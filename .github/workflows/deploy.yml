name: Deploy

on:
  workflow_dispatch:
    inputs:
      delete_pending_transactions:
        description: "Delete pending transactions?"
        default: false
        type: boolean
  workflow_run:
    workflows:
      - Test
    types:
      - completed
    branches:
      - sandbox
      - main
      - staging

jobs:
  check-new-contracts:
    name: Check for new contracts
    concurrency: ${{ github.event.workflow_run.head_branch }}
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      new-contracts-exists: ${{ steps.check-cache.outputs.new-contracts-exists }}
    steps:
      - name: Set sandbox environment variables
        run: |
          echo "CACHE_VERSION=${{ secrets.CACHE_VERSION_SANDBOX }}" >> $GITHUB_ENV
        if: ${{ github.event.workflow_run.head_branch == 'sandbox' }}

      - name: Set dev environment variables
        run: |
          echo "CACHE_VERSION=${{ secrets.CACHE_VERSION_MAIN }}" >> $GITHUB_ENV
        if: ${{ github.event.workflow_run.head_branch == 'main' }}

      - name: Set staging environment variables
        run: |
          echo "CACHE_VERSION=${{ secrets.CACHE_VERSION_STAGING }}" >> $GITHUB_ENV
        if: ${{ github.event.workflow_run.head_branch == 'staging' }}

      - name: View cache version
        id: check-cache-version
        run: |
          echo [INFO] CACHE_VERSION is not a secret.
          echo [INFO] It is a text parameter meant for busting cache.
          echo [INFO] Displaying it below with added spaces in between the text.
          echo [INFO] Change it to any other text to bust cache.
          echo [INFO] CACHE_VERSION:
          echo ${{ env.CACHE_VERSION }} | sed 's/./& /g'
          echo ::set-output name=cache-version::${{ env.CACHE_VERSION }}

      - name: Checkout branch
        uses: actions/checkout@v3

      - name: Restore cache
        uses: actions/cache@v3
        id: restore-cache
        with:
          path: "contracts"
          key: contracts-${{ steps.check-cache-version.outputs.cache-version }}-${{ hashFiles('contracts/**/*.sol') }}

      - name: Check for new contracts
        id: check-cache
        run: |
          CACHE_HIT=${{ steps.restore-cache.outputs.cache-hit }}
          if [ "$CACHE_HIT" == "true" ]; then
            echo [INFO] No new contracts found.
            echo [INFO] Skipping compilation and deployment.
            echo ::set-output name=new-contracts-exists::false
          else
            echo [INFO] New contracts found or cache is busted.
            echo [INFO] Proceeding with compilation and deployment.
            echo ::set-output name=new-contracts-exists::true
          fi
  check-pending-transactions:
    name: Check for pending transactions
    runs-on: ubuntu-latest
    needs: check-new-contracts
    if: needs.check-new-contracts.outputs.new-contracts-exists == 'true'
    outputs:
      pending-transactions-exists: ${{ steps.check-pending-transactions.outputs.pending-transactions-exists }}
      pending-transactions-deleted: ${{ steps.delete-pending-transactions.outputs.pending-transactions-deleted }}
    steps:
      - name: Set sandbox environment variables
        run: |
          echo "AWS_STAGE_LABEL=sandbox" >> $GITHUB_ENV
        if: ${{ github.event.workflow_run.head_branch == 'sandbox' }}

      - name: Set dev environment variables
        run: |
          echo "AWS_STAGE_LABEL=dev" >> $GITHUB_ENV
        if: ${{ github.event.workflow_run.head_branch == 'main' }}

      - name: Set staging environment variables
        run: |
          echo "AWS_STAGE_LABEL=staging" >> $GITHUB_ENV
        if: ${{ github.event.workflow_run.head_branch == 'staging' }}

      - name: Set common environment variables
        run: |
          echo "HARDHAT_NETWORK=mumbai" >> $GITHUB_ENV
          echo "S3_BUCKET_NAME=oparcade-contract-deployments" >> $GITHUB_ENV

      - name: Configure AWS credentials to assume role in sharedsvc
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ADMIN }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ADMIN }}
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::188390096251:role/GitHubActionsAssumeRoleForDeployment
          role-duration-seconds: 3600

      - name: Check for pending transactions
        id: check-pending-transactions
        run: |
          exit_code=$(aws s3api head-object --bucket ${{ env.S3_BUCKET_NAME }} --key ${{ env.AWS_STAGE_LABEL }}/deployments/${{ env.HARDHAT_NETWORK }}/.pendingTransactions >/dev/null 2>1; echo $?)

          if [ $exit_code = 0 ]; then
              echo "[WARN] File .pendingTransactions exists."
              aws s3 cp s3://${{ env.S3_BUCKET_NAME }}/${{ env.AWS_STAGE_LABEL }}/deployments/${{ env.HARDHAT_NETWORK }}/.pendingTransactions .
              echo "[WARN] Pending transactions:"
              cat .pendingTransactions | jq 'keys'
              echo "[WARN] Please verify transactions on Etherscan."
              echo "[WARN] Skipping compilation and deployment."
              echo ::set-output name=pending-transactions-exists::true
          else
              echo "[INFO] File .pendingTransactions does not exists."
              echo "[INFO] Proceeding with compilation and deployment."
              echo ::set-output name=pending-transactions-exists::false
          fi
      - name: Delete pending transactions
        id: delete-pending-transactions
        run: |
          echo "[INFO] Deleting pending transactions..."
          aws s3 rm s3://${{ env.S3_BUCKET_NAME }}/${{ env.AWS_STAGE_LABEL }}/deployments/${{ env.HARDHAT_NETWORK }}/.pendingTransactions
          echo ::set-output name=pending-transactions-deleted::true
        if: ${{ github.event.inputs.delete_pending_transactions == 'true' }}

  deploy:
    name: Deploy contracts
    runs-on: ubuntu-latest
    needs: check-pending-transactions
    if: needs.check-pending-transactions.outputs.pending-transactions-exists == 'false' || needs.check-pending-transactions.outputs.pending-transactions-deleted == 'true'
    steps:
      - name: Set sandbox environment variables
        run: |
          echo "AWS_STAGE_LABEL=sandbox" >> $GITHUB_ENV
        if: ${{ github.event.workflow_run.head_branch == 'sandbox' }}

      - name: Set dev environment variables
        run: |
          echo "AWS_STAGE_LABEL=dev" >> $GITHUB_ENV
        if: ${{ github.event.workflow_run.head_branch == 'main' }}

      - name: Set staging environment variables
        run: |
          echo "AWS_STAGE_LABEL=staging" >> $GITHUB_ENV
        if: ${{ github.event.workflow_run.head_branch == 'staging' }}

      - name: Set common environment variables
        run: |
          echo "CHAMBER_SERVICE=${{ env.AWS_STAGE_LABEL }}/contract" >> $GITHUB_ENV
          echo "S3_BUCKET_NAME=oparcade-contract-deployments" >> $GITHUB_ENV
          echo "HARDHAT_NETWORK=mumbai" >> $GITHUB_ENV

      - name: Checkout branch
        uses: actions/checkout@v3

      - name: Configure AWS credentials to assume role in sharedsvc
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ADMIN }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ADMIN }}
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::188390096251:role/GitHubActionsAssumeRoleForDeployment
          role-duration-seconds: 3600

      - name: Create .env file
        uses: classtinginc/chamber-action@master
        with:
          args: export --format dotenv --output-file .env ${{ env.CHAMBER_SERVICE }}

      - name: Check for existing deployments in S3 bucket
        id: check-deployments
        run: |
          DEPLOYMENTS=$(aws s3api list-objects-v2 --bucket ${{ env.S3_BUCKET_NAME }} --prefix ${{ env.AWS_STAGE_LABEL }}/deployments)
          if [ "$DEPLOYMENTS" == "" ]; then
            echo ::set-output name=deployments-exists::false
          else
            echo ::set-output name=deployments-exists::true
          fi

      - name: Initializing deployment
        run: |
          echo "[INFO] No existing deployments found in S3 bucket for stage: ${{ env.AWS_STAGE_LABEL }}"
          echo "[INFO] Initializing smart contract deployment."
          echo "[INFO] Removing existing deployments folder in the repo."
          if [ -d deployments ]; then rm -rf deployments; fi
        if: steps.check-deployments.outputs.deployments-exists == 'false'

      - name: Download existing deployments from S3 bucket
        run: |
          aws s3 sync --delete s3://${{ env.S3_BUCKET_NAME }}/${{ env.AWS_STAGE_LABEL }}/deployments/ ./deployments/
        if: steps.check-deployments.outputs.deployments-exists == 'true'

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 14
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Compile contracts
        run: yarn run compile

      - name: Deploy contracts
        run: yarn run deploy:remote ${{ env.HARDHAT_NETWORK }}

      - name: Upload deployments to S3 bucket
        run: aws s3 sync --delete ./deployments/ s3://${{ env.S3_BUCKET_NAME }}/${{ env.AWS_STAGE_LABEL }}/deployments/
        if: always()

      - name: Verify contracts
        run: yarn run etherscan ${{ env.HARDHAT_NETWORK }}
