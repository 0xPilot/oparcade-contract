name: Verify

on:
  workflow_dispatch:
    inputs:
      verify_contracts:
        description: "Verify contracts on Etherscan?"
        default: false
        type: boolean

jobs:
  etherscan-verify:
    name: Verify contracts
    concurrency: ${{ github.ref_name }}
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.verify_contracts == 'true' }}
    steps:
      - name: Checkout branch
        uses: actions/checkout@v3

      - name: Set sandbox environment variables
        run: |
          echo "AWS_STAGE_LABEL=sandbox" >> $GITHUB_ENV
        if: ${{ github.ref_name == 'sandbox' }}

      - name: Set dev environment variables
        run: |
          echo "AWS_STAGE_LABEL=dev" >> $GITHUB_ENV
        if: ${{ github.ref_name == 'main' }}

      - name: Set staging environment variables
        run: |
          echo "AWS_STAGE_LABEL=staging" >> $GITHUB_ENV
        if: ${{ github.ref_name == 'staging' }}

      - name: Set common environment variables
        run: |
          echo "HARDHAT_NETWORK=mumbai" >> $GITHUB_ENV
          echo "S3_BUCKET_NAME=oparcade-contract-deployments" >> $GITHUB_ENV
          echo "CHAMBER_SERVICE=${{ env.AWS_STAGE_LABEL }}/contract" >> $GITHUB_ENV

      - name: Configure AWS credentials to assume role in sharedsvc
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ADMIN }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ADMIN }}
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::188390096251:role/GitHubActionsAssumeRoleForDeployment
          role-duration-seconds: 3600

      - name: Create .env file
        uses: classtinginc/chamber-action@master
        with:
          args: export --format dotenv --output-file .env ${{ env.CHAMBER_SERVICE }}

      - name: Check for existing deployments in S3 bucket
        id: check-deployments
        run: |
          DEPLOYMENTS=$(aws s3api list-objects-v2 --bucket ${{ env.S3_BUCKET_NAME }} --prefix ${{ env.AWS_STAGE_LABEL }}/deployments)
          if [ "$DEPLOYMENTS" == "" ]; then
            echo ::set-output name=deployments-exists::false
          else
            echo ::set-output name=deployments-exists::true
          fi

      - name: Download existing deployments from S3 bucket
        run: |
          aws s3 sync --delete s3://${{ env.S3_BUCKET_NAME }}/${{ env.AWS_STAGE_LABEL }}/deployments/ ./deployments/
        if: steps.check-deployments.outputs.deployments-exists == 'true'

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 14
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Verify contracts
        run: yarn run etherscan ${{ env.HARDHAT_NETWORK }}
