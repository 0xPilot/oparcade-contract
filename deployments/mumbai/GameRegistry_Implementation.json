{
  "address": "0x444DcF1091235b4BbA1119ac19eF5fB57a9473B8",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "oldBaseGameCreatorFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBaseGameCreatorFee",
          "type": "uint256"
        }
      ],
      "name": "BaseGameCreatorFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tournamentName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "DepositAmountUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "oldStatus",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newStatus",
          "type": "bool"
        }
      ],
      "name": "DistributableTokenAddressUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "gameName",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "gameCreator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseGameCreatorFee",
          "type": "uint256"
        }
      ],
      "name": "GameAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldGameCreator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newGameCreator",
          "type": "address"
        }
      ],
      "name": "GameCreatorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "gameName",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "gameCreator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseGameCreatorFee",
          "type": "uint256"
        }
      ],
      "name": "GameRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldFeeRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPlatformFee",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPlatformFee",
          "type": "uint256"
        }
      ],
      "name": "PlatformFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tournamentName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "appliedGameCreatorFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tournamentCreatorFee",
          "type": "uint256"
        }
      ],
      "name": "TournamentCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldTournamentCreationFeeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldTournamentCreationFeeAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newTournamentCreationFeeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTournamentCreationFeeAmount",
          "type": "uint256"
        }
      ],
      "name": "TournamentCreationFeeUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_gameName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_gameCreator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_baseGameCreatorFee",
          "type": "uint256"
        }
      ],
      "name": "addGame",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gid",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addressRegistry",
      "outputs": [
        {
          "internalType": "contract IAddressRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tournamentName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_proposedGameCreatorFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tournamentCreatorFee",
          "type": "uint256"
        }
      ],
      "name": "createTournamentByDAO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tid",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tournamentName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_proposedGameCreatorFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tournamentCreatorFee",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct GameRegistry.Token",
          "name": "_depositToken",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_distributionTokenAddress",
          "type": "address"
        }
      ],
      "name": "createTournamentByDAOWithTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tid",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tournamentName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_proposedGameCreatorFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tournamentCreatorFee",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct GameRegistry.Token",
          "name": "_depositToken",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct GameRegistry.Token",
          "name": "_tokenToAddPrizePool",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_nftAddressToAddPrizePool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftTypeToAddPrizePool",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIdsToAddPrizePool",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amountsToAddPrizePool",
          "type": "uint256[]"
        }
      ],
      "name": "createTournamentByUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tid",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "games",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "creatorAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "baseCreatorFee",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isDeprecated",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "tournamentsCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tid",
          "type": "uint256"
        }
      ],
      "name": "getAppliedGameCreatorFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "getDepositTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        }
      ],
      "name": "getDepositTokenList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        }
      ],
      "name": "getDistributableTokenList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        }
      ],
      "name": "getGameBaseCreatorFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        }
      ],
      "name": "getGameCreatorAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        }
      ],
      "name": "getGameName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        }
      ],
      "name": "getTournamentCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tid",
          "type": "uint256"
        }
      ],
      "name": "getTournamentCreator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tid",
          "type": "uint256"
        }
      ],
      "name": "getTournamentCreatorFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tid",
          "type": "uint256"
        }
      ],
      "name": "getTournamentName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addressRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_platformFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tournamentCreationFeeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tournamentCreationFeeAmount",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "isDistributable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        }
      ],
      "name": "isGameDeprecated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platformFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        }
      ],
      "name": "removeGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tournamentCreationFeeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tournamentCreationFeeToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_baseGameCreatorFee",
          "type": "uint256"
        }
      ],
      "name": "updateBaseGameCreatorFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "updateDepositTokenAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isDistributable",
          "type": "bool"
        }
      ],
      "name": "updateDistributableTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_gameCreator",
          "type": "address"
        }
      ],
      "name": "updateGameCreator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_platformFee",
          "type": "uint256"
        }
      ],
      "name": "updatePlatformFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tournamentCreationFeeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tournamentCreationFeeAmount",
          "type": "uint256"
        }
      ],
      "name": "updateTournamentCreationFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf8ae4dd86ca4b1da174c7680353fc73972775139eae2e510a05e61e49d9281b7",
  "receipt": {
    "to": null,
    "from": "0xaD733B7055eCAebFb3B38626f0148c5d12158F03",
    "contractAddress": "0x444DcF1091235b4BbA1119ac19eF5fB57a9473B8",
    "transactionIndex": 5,
    "gasUsed": "3636131",
    "logsBloom": "0x
    "blockHash": "0x7ea581f606d3129c40e646c046dd10c37a4e07f23e81062de01ed02aef98cf80",
    "transactionHash": "0xf8ae4dd86ca4b1da174c7680353fc73972775139eae2e510a05e61e49d9281b7",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 27764155,
        "transactionHash": "0xf8ae4dd86ca4b1da174c7680353fc73972775139eae2e510a05e61e49d9281b7",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ad733b7055ecaebfb3b38626f0148c5d12158f03",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000204b9acd6bcd2e80000000000000000000000000000000000000000000000001e1a11f64801800000000000000000000000000000000000000000000000246d5e08cc1f148e4ed80000000000000000000000000000000000000000000000001c1558497144ad1800000000000000000000000000000000000000000000246d600d85cbeb4b21c0",
        "logIndex": 10,
        "blockHash": "0x7ea581f606d3129c40e646c046dd10c37a4e07f23e81062de01ed02aef98cf80"
      }
    ],
    "blockNumber": 27764155,
    "cumulativeGasUsed": "4414992",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "90450ff192f6db5913d3cec6d8efd383",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldBaseGameCreatorFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBaseGameCreatorFee\",\"type\":\"uint256\"}],\"name\":\"BaseGameCreatorFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tournamentName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"DepositAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"DistributableTokenAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"gameName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gameCreator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseGameCreatorFee\",\"type\":\"uint256\"}],\"name\":\"GameAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldGameCreator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGameCreator\",\"type\":\"address\"}],\"name\":\"GameCreatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"gameName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gameCreator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseGameCreatorFee\",\"type\":\"uint256\"}],\"name\":\"GameRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldFeeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPlatformFee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPlatformFee\",\"type\":\"uint256\"}],\"name\":\"PlatformFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tournamentName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"appliedGameCreatorFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tournamentCreatorFee\",\"type\":\"uint256\"}],\"name\":\"TournamentCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldTournamentCreationFeeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTournamentCreationFeeAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTournamentCreationFeeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTournamentCreationFeeAmount\",\"type\":\"uint256\"}],\"name\":\"TournamentCreationFeeUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_gameName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_gameCreator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_baseGameCreatorFee\",\"type\":\"uint256\"}],\"name\":\"addGame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gid\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressRegistry\",\"outputs\":[{\"internalType\":\"contract IAddressRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tournamentName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_proposedGameCreatorFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tournamentCreatorFee\",\"type\":\"uint256\"}],\"name\":\"createTournamentByDAO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tid\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tournamentName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_proposedGameCreatorFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tournamentCreatorFee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct GameRegistry.Token\",\"name\":\"_depositToken\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_distributionTokenAddress\",\"type\":\"address\"}],\"name\":\"createTournamentByDAOWithTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tid\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tournamentName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_proposedGameCreatorFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tournamentCreatorFee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct GameRegistry.Token\",\"name\":\"_depositToken\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct GameRegistry.Token\",\"name\":\"_tokenToAddPrizePool\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_nftAddressToAddPrizePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftTypeToAddPrizePool\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIdsToAddPrizePool\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountsToAddPrizePool\",\"type\":\"uint256[]\"}],\"name\":\"createTournamentByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tid\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creatorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseCreatorFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isDeprecated\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tournamentsCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tid\",\"type\":\"uint256\"}],\"name\":\"getAppliedGameCreatorFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getDepositTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"}],\"name\":\"getDepositTokenList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"}],\"name\":\"getDistributableTokenList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"}],\"name\":\"getGameBaseCreatorFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"}],\"name\":\"getGameCreatorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"}],\"name\":\"getGameName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"}],\"name\":\"getTournamentCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tid\",\"type\":\"uint256\"}],\"name\":\"getTournamentCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tid\",\"type\":\"uint256\"}],\"name\":\"getTournamentCreatorFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tid\",\"type\":\"uint256\"}],\"name\":\"getTournamentName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_platformFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tournamentCreationFeeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tournamentCreationFeeAmount\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"isDistributable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"}],\"name\":\"isGameDeprecated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"}],\"name\":\"removeGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tournamentCreationFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tournamentCreationFeeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseGameCreatorFee\",\"type\":\"uint256\"}],\"name\":\"updateBaseGameCreatorFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateDepositTokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isDistributable\",\"type\":\"bool\"}],\"name\":\"updateDistributableTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_gameCreator\",\"type\":\"address\"}],\"name\":\"updateGameCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_platformFee\",\"type\":\"uint256\"}],\"name\":\"updatePlatformFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tournamentCreationFeeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tournamentCreationFeeAmount\",\"type\":\"uint256\"}],\"name\":\"updateTournamentCreationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"David Lee\",\"kind\":\"dev\",\"methods\":{\"addGame(string,address,uint256)\":{\"details\":\"Base game creator fee is the minimum fee vaule that the game creator should be rewarded from the tournamnet of the gameWhen creating the tournament of the game, the game creator fee can be proposed by the tournament creatorbut the proposed value can't be less than the base oneIf the proposed game creator fee is 0, the base game creator fee will be applied\",\"params\":{\"_baseGameCreatorFee\":\"Base game creator fee\",\"_gameCreator\":\"Game creator address\",\"_gameName\":\"Game name to add\"}},\"createTournamentByDAO(uint256,string,uint256,uint256)\":{\"details\":\"Only ownerIf the proposed game creaetor fee is 0, the base game creator fee is appliedThe prize pool for the tournament that the owner created is initialized on Oparcade contract\",\"params\":{\"_gid\":\"Game ID\",\"_proposedGameCreatorFee\":\"Proposed game creator fee\",\"_tournamentCreatorFee\":\"Tournament creator fee\"},\"returns\":{\"tid\":\"Tournament ID created\"}},\"createTournamentByDAOWithTokens(uint256,string,uint256,uint256,(address,uint256),address)\":{\"details\":\"Only ownerIf the proposed game creaetor fee is 0, the base game creator fee is appliedThe prize pool for the tournament that the owner created is initialized on Oparcade contract\",\"params\":{\"_depositToken\":\"Token to allow/disallow the deposit\",\"_distributionTokenAddress\":\"Distribution token address to be set to active\",\"_gid\":\"Game ID\",\"_proposedGameCreatorFee\":\"Proposed game creator fee\",\"_tournamentCreatorFee\":\"Tournament creator fee\"},\"returns\":{\"tid\":\"Tournament ID created\"}},\"createTournamentByUser(uint256,string,uint256,uint256,(address,uint256),(address,uint256),address,uint256,uint256[],uint256[])\":{\"details\":\"Anyone can create the tournament and initialize the prize pool with tokens and NFTsTournament creator should set all params necessary for the tournament in 1 tx andthe params set is immutable. It will be prevent the fraud tournament is createdTournament creator should pay fees to create the tournamentand the fee token address and fee token amount are set by the ownerIf the proposed game creaetor fee is 0, the base game creator fee is appliedNFT type to initialize the prize pool should be either 721 or 1155\",\"params\":{\"_amountsToAddPrizePool\":\"NFT token amount list to initialize the prize pool\",\"_depositToken\":\"Deposit token (address and amount) for playing the tournament\",\"_gid\":\"Game ID\",\"_nftAddressToAddPrizePool\":\"NFT address to initialize the prize pool\",\"_nftTypeToAddPrizePool\":\"NFT type to initialize the prize pool\",\"_proposedGameCreatorFee\":\"Proposed game creator fee\",\"_tokenIdsToAddPrizePool\":\"NFT token Id list to initialize the prize pool\",\"_tokenToAddPrizePool\":\"Token (address and amount) to initialize the prize pool\",\"_tournamentCreatorFee\":\"Tournament creator fee\"},\"returns\":{\"tid\":\"Tournament ID created\"}},\"gameCount()\":{\"returns\":{\"_0\":\"(uint256) Amount of games created\"}},\"getAppliedGameCreatorFee(uint256,uint256)\":{\"params\":{\"_gid\":\"Game ID\",\"_tid\":\"Tournament ID\"},\"returns\":{\"_0\":\"(string) Game applied game creator fee of a tournament\"}},\"getDepositTokenAmount(uint256,uint256,address)\":{\"params\":{\"_gid\":\"Game ID\",\"_tid\":\"Tournament ID\",\"_tokenAddress\":\"token address\"},\"returns\":{\"_0\":\"(uint256) Tournament deposit token amount\"}},\"getDepositTokenList(uint256)\":{\"params\":{\"\":\"(address[]) Deposit token list of the game\",\"_gid\":\"Game ID\"}},\"getDistributableTokenList(uint256)\":{\"params\":{\"\":\"(address[]) Distributable token list of the game\",\"_gid\":\"Game ID\"}},\"getGameBaseCreatorFee(uint256)\":{\"params\":{\"_gid\":\"Game ID\"},\"returns\":{\"_0\":\"(uint256) Game creator fee\"}},\"getGameCreatorAddress(uint256)\":{\"params\":{\"_gid\":\"Game ID\"},\"returns\":{\"_0\":\"(string) Game creator address\"}},\"getGameName(uint256)\":{\"params\":{\"_gid\":\"Game ID\"},\"returns\":{\"_0\":\"(string) Game name\"}},\"getTournamentCount(uint256)\":{\"params\":{\"_gid\":\"Game ID\"},\"returns\":{\"_0\":\"(uint256) Number of the tournament\"}},\"getTournamentCreator(uint256,uint256)\":{\"params\":{\"_gid\":\"Game ID\",\"_tid\":\"Tournament ID\"},\"returns\":{\"_0\":\"(address) Tournament creator address\"}},\"getTournamentCreatorFee(uint256,uint256)\":{\"params\":{\"_gid\":\"Game ID\",\"_tid\":\"Tournament ID\"},\"returns\":{\"_0\":\"(uint256) Tournament creator fee\"}},\"getTournamentName(uint256,uint256)\":{\"params\":{\"_gid\":\"Game ID\",\"_tid\":\"Tournament ID\"},\"returns\":{\"_0\":\"(string) Tournament name\"}},\"isDistributable(uint256,address)\":{\"params\":{\"_gid\":\"Game ID\",\"_tokenAddress\":\"token address\"},\"returns\":{\"_0\":\"(uint256) Is token distributable\"}},\"isGameDeprecated(uint256)\":{\"params\":{\"_gid\":\"Game ID\"},\"returns\":{\"_0\":\"(bool) Is deprecated\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeGame(uint256)\":{\"details\":\"Game is not removed from the games array, just set it deprecated\",\"params\":{\"_gid\":\"Game ID\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateBaseGameCreatorFee(uint256,uint256)\":{\"details\":\"Tournament creator fee is the royality that will be transferred to the tournament creator addressTournament creator can propose the game creator fee when creating the tournamentbut it can't be less than the base game creator fee\",\"params\":{\"_baseGameCreatorFee\":\"Base game creator fee\",\"_gid\":\"Game ID\"}},\"updateDepositTokenAmount(uint256,uint256,address,uint256)\":{\"details\":\"Only ownerOnly tokens with an amount greater than zero is valid for the deposit\",\"params\":{\"_amount\":\"Token amount\",\"_gid\":\"Game ID\",\"_tid\":\"Tournament ID\",\"_token\":\"Token address to allow/disallow the deposit\"}},\"updateDistributableTokenAddress(uint256,address,bool)\":{\"details\":\"Only owner\",\"params\":{\"_gid\":\"Game ID\",\"_isDistributable\":\"true: distributable false: not distributable\",\"_token\":\"Token address to allow/disallow the deposit\"}},\"updateGameCreator(uint256,address)\":{\"params\":{\"_gameCreator\":\"Game creator address\",\"_gid\":\"Game ID\"}},\"updatePlatformFee(address,uint256)\":{\"details\":\"Only ownerAllow zero recipient address only of fee is also zero\",\"params\":{\"_feeRecipient\":\"Platform fee recipient address\",\"_platformFee\":\"platform fee\"}},\"updateTournamentCreationFee(address,uint256)\":{\"details\":\"Only ownerTournament creator should pay this fee when creating the tournament\",\"params\":{\"_tournamentCreationFeeAmount\":\"Fee token amount\",\"_tournamentCreationFeeToken\":\"Fee token address\"}}},\"stateVariables\":{\"MAX_PERMILLAGE\":{\"details\":\"Max fee constant in permillage (percentage * 10)\"},\"addressRegistry\":{\"details\":\"AddressRegistry\"},\"feeRecipient\":{\"details\":\"Platform fee recipient\"},\"games\":{\"details\":\"Game name array\"},\"platformFee\":{\"details\":\"Platform fee\"},\"tournamentCreationFeeAmount\":{\"details\":\"Tournament creation fee token amount\"},\"tournamentCreationFeeToken\":{\"details\":\"Tournament creation fee token address\"}},\"title\":\"GameRegistry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addGame(string,address,uint256)\":{\"notice\":\"Add the new game\"},\"createTournamentByDAO(uint256,string,uint256,uint256)\":{\"notice\":\"Create the tournament\"},\"createTournamentByDAOWithTokens(uint256,string,uint256,uint256,(address,uint256),address)\":{\"notice\":\"Create the tournament and set tokens\"},\"createTournamentByUser(uint256,string,uint256,uint256,(address,uint256),(address,uint256),address,uint256,uint256[],uint256[])\":{\"notice\":\"Create the tournament\"},\"gameCount()\":{\"notice\":\"Returns the number of games created\"},\"getAppliedGameCreatorFee(uint256,uint256)\":{\"notice\":\"Returns the applied game creator fee of the specific tournament\"},\"getDepositTokenAmount(uint256,uint256,address)\":{\"notice\":\"Returns the deposit token amount of the specific tournament\"},\"getDepositTokenList(uint256)\":{\"notice\":\"Returns the deposit token list of the game\"},\"getDistributableTokenList(uint256)\":{\"notice\":\"Returns the distributable token list of the game\"},\"getGameBaseCreatorFee(uint256)\":{\"notice\":\"Returns the game creator fee\"},\"getGameCreatorAddress(uint256)\":{\"notice\":\"Returns the game creator address\"},\"getGameName(uint256)\":{\"notice\":\"Returns the game name\"},\"getTournamentCount(uint256)\":{\"notice\":\"Returns the number of the tournaments of the specific game\"},\"getTournamentCreator(uint256,uint256)\":{\"notice\":\"Returns the tournament creator address of the specific tournament\"},\"getTournamentCreatorFee(uint256,uint256)\":{\"notice\":\"Returns the tournament creator fee of the specific tournament\"},\"getTournamentName(uint256,uint256)\":{\"notice\":\"Returns the tournament name of the specific tournament\"},\"isDistributable(uint256,address)\":{\"notice\":\"Returns true if the token of a specific game is distributable, false otherwise\"},\"isGameDeprecated(uint256)\":{\"notice\":\"Returns a boolean indicating if a specific game is deprecated\"},\"removeGame(uint256)\":{\"notice\":\"Remove the exising game\"},\"updateBaseGameCreatorFee(uint256,uint256)\":{\"notice\":\"Update the base game creator fee\"},\"updateDepositTokenAmount(uint256,uint256,address,uint256)\":{\"notice\":\"Update deposit token amount\"},\"updateDistributableTokenAddress(uint256,address,bool)\":{\"notice\":\"Update distributable token address\"},\"updateGameCreator(uint256,address)\":{\"notice\":\"Update the game creator\"},\"updatePlatformFee(address,uint256)\":{\"notice\":\"Update the platform fee\"},\"updateTournamentCreationFee(address,uint256)\":{\"notice\":\"Update the tournament creation fee\"}},\"notice\":\"This contract stores all info related to the game and tournament creation\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GameRegistry.sol\":\"GameRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"contracts/GameRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"./interfaces/IAddressRegistry.sol\\\";\\nimport \\\"./interfaces/IOparcade.sol\\\";\\n\\n/**\\n * @title GameRegistry\\n * @notice This contract stores all info related to the game and tournament creation\\n * @author David Lee\\n */\\ncontract GameRegistry is OwnableUpgradeable {\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n  event GameAdded(\\n    address indexed by,\\n    uint256 indexed gid,\\n    string gameName,\\n    address indexed gameCreator,\\n    uint256 baseGameCreatorFee\\n  );\\n  event GameRemoved(\\n    address indexed by,\\n    uint256 indexed gid,\\n    string gameName,\\n    address indexed gameCreator,\\n    uint256 baseGameCreatorFee\\n  );\\n  event GameCreatorUpdated(\\n    address indexed by,\\n    uint256 indexed gid,\\n    address indexed oldGameCreator,\\n    address newGameCreator\\n  );\\n  event BaseGameCreatorFeeUpdated(\\n    address indexed by,\\n    uint256 indexed gid,\\n    uint256 indexed oldBaseGameCreatorFee,\\n    uint256 newBaseGameCreatorFee\\n  );\\n  event TournamentCreated(\\n    address indexed by,\\n    uint256 indexed gid,\\n    uint256 indexed tid,\\n    string tournamentName,\\n    uint256 appliedGameCreatorFee,\\n    uint256 tournamentCreatorFee\\n  );\\n  event DepositAmountUpdated(\\n    address indexed by,\\n    uint256 indexed gid,\\n    uint256 indexed tid,\\n    string tournamentName,\\n    address token,\\n    uint256 oldAmount,\\n    uint256 newAmount\\n  );\\n  event DistributableTokenAddressUpdated(\\n    address indexed by,\\n    uint256 indexed gid,\\n    address indexed token,\\n    bool oldStatus,\\n    bool newStatus\\n  );\\n  event PlatformFeeUpdated(\\n    address indexed by,\\n    address indexed oldFeeRecipient,\\n    uint256 oldPlatformFee,\\n    address indexed newFeeRecipient,\\n    uint256 newPlatformFee\\n  );\\n  event TournamentCreationFeeUpdated(\\n    address indexed by,\\n    address indexed oldTournamentCreationFeeToken,\\n    uint256 oldTournamentCreationFeeAmount,\\n    address indexed newTournamentCreationFeeToken,\\n    uint256 newTournamentCreationFeeAmount\\n  );\\n\\n  struct Token {\\n    address tokenAddress;\\n    uint256 tokenAmount;\\n  }\\n\\n  struct Tournament {\\n    string name;\\n    address creatorAddress;\\n    uint256 creatorFee;\\n    uint256 appliedGameCreatorFee;\\n    /// @dev Token address -> amount\\n    mapping(address => uint256) depositTokenAmount;\\n  }\\n\\n  struct Game {\\n    string name;\\n    address creatorAddress;\\n    uint256 baseCreatorFee;\\n    bool isDeprecated;\\n    address[] distributableTokenList; // return all array\\n    address[] depositTokenList;\\n    mapping(uint256 => Tournament) tournaments;\\n    uint256 tournamentsCount;\\n    /// @dev Token address -> Bool\\n    mapping(address => bool) distributable;\\n  }\\n\\n  /// @dev Game name array\\n  Game[] public games;\\n\\n  /// @dev AddressRegistry\\n  IAddressRegistry public addressRegistry;\\n\\n  /// @dev Platform fee recipient\\n  address public feeRecipient;\\n\\n  /// @dev Platform fee\\n  uint256 public platformFee;\\n\\n  /// @dev Tournament creation fee token address\\n  address public tournamentCreationFeeToken;\\n\\n  /// @dev Tournament creation fee token amount\\n  uint256 public tournamentCreationFeeAmount;\\n\\n  /// @dev Max fee constant in permillage (percentage * 10)\\n  uint256 constant MAX_PERMILLAGE = 100_0;\\n\\n  modifier onlyValidGID(uint256 _gid) {\\n    require(_gid < games.length, \\\"Invalid game index\\\");\\n    _;\\n  }\\n\\n  modifier onlyActiveGame(uint256 _gid) {\\n    require(_gid < games.length && !games[_gid].isDeprecated, \\\"Game not active\\\");\\n    _;\\n  }\\n\\n  modifier onlyValidTID(uint256 _gid, uint256 _tid) {\\n    require(_tid < games[_gid].tournamentsCount, \\\"Invalid tournament index\\\");\\n    _;\\n  }\\n\\n  function initialize(\\n    address _addressRegistry,\\n    address _feeRecipient,\\n    uint256 _platformFee,\\n    address _tournamentCreationFeeToken,\\n    uint256 _tournamentCreationFeeAmount\\n  ) public initializer {\\n    __Ownable_init();\\n\\n    require(_addressRegistry != address(0), \\\"Zero address registry\\\");\\n    require(_tournamentCreationFeeToken != address(0), \\\"Zero tournament fee token\\\");\\n    require(_feeRecipient != address(0) || _platformFee == 0, \\\"Fee recipient not set\\\");\\n    require(_platformFee <= MAX_PERMILLAGE, \\\"Platform fee exceeded\\\");\\n\\n    // initialize AddressRegistery\\n    addressRegistry = IAddressRegistry(_addressRegistry);\\n\\n    // initialize fee and recipient\\n    feeRecipient = _feeRecipient;\\n    platformFee = _platformFee;\\n    tournamentCreationFeeToken = _tournamentCreationFeeToken;\\n    tournamentCreationFeeAmount = _tournamentCreationFeeAmount;\\n  }\\n\\n  /**\\n   * @notice Returns a boolean indicating if a specific game is deprecated\\n   * @param _gid Game ID\\n   * @return (bool) Is deprecated\\n   */\\n  function isGameDeprecated(uint256 _gid) external view onlyValidGID(_gid) returns (bool) {\\n    return games[_gid].isDeprecated;\\n  }\\n\\n  /**\\n   * @notice Returns the game name\\n   * @param _gid Game ID\\n   * @return (string) Game name\\n   */\\n  function getGameName(uint256 _gid) external view onlyValidGID(_gid) returns (string memory) {\\n    return games[_gid].name;\\n  }\\n\\n  /**\\n   * @notice Returns the game creator address\\n   * @param _gid Game ID\\n   * @return (string) Game creator address\\n   */\\n  function getGameCreatorAddress(uint256 _gid) external view onlyValidGID(_gid) returns (address) {\\n    return games[_gid].creatorAddress;\\n  }\\n\\n  /**\\n   * @notice Returns the game creator fee\\n   * @param _gid Game ID\\n   * @return (uint256) Game creator fee\\n   */\\n  function getGameBaseCreatorFee(uint256 _gid) external view onlyValidGID(_gid) returns (uint256) {\\n    return games[_gid].baseCreatorFee;\\n  }\\n\\n  /**\\n   * @notice Returns true if the token of a specific game is distributable, false otherwise\\n   * @param _gid Game ID\\n   * @param _tokenAddress token address\\n   * @return (uint256) Is token distributable\\n   */\\n  function isDistributable(uint256 _gid, address _tokenAddress) external view onlyValidGID(_gid) returns (bool) {\\n    return games[_gid].distributable[_tokenAddress];\\n  }\\n\\n  /**\\n   * @notice Returns the deposit token list of the game\\n   * @param _gid Game ID\\n   * @param (address[]) Deposit token list of the game\\n   */\\n  function getDepositTokenList(uint256 _gid) external view returns (address[] memory) {\\n    return games[_gid].depositTokenList;\\n  }\\n\\n  /**\\n   * @notice Returns the distributable token list of the game\\n   * @param _gid Game ID\\n   * @param (address[]) Distributable token list of the game\\n   */\\n  function getDistributableTokenList(uint256 _gid) external view returns (address[] memory) {\\n    return games[_gid].distributableTokenList;\\n  }\\n\\n  /**\\n   * @notice Returns the number of games created\\n   * @return (uint256) Amount of games created\\n   */\\n  function gameCount() external view returns (uint256) {\\n    return games.length;\\n  }\\n\\n  /**\\n   * @notice Returns the number of the tournaments of the specific game\\n   * @param _gid Game ID\\n   * @return (uint256) Number of the tournament\\n   */\\n  function getTournamentCount(uint256 _gid) external view onlyValidGID(_gid) returns (uint256) {\\n    return games[_gid].tournamentsCount;\\n  }\\n\\n  /**\\n   * @notice Returns the tournament name of the specific tournament\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @return (string) Tournament name\\n   */\\n  function getTournamentName(uint256 _gid, uint256 _tid)\\n    external\\n    view\\n    onlyValidGID(_gid)\\n    onlyValidTID(_gid, _tid)\\n    returns (string memory)\\n  {\\n    return games[_gid].tournaments[_tid].name;\\n  }\\n\\n  /**\\n   * @notice Returns the tournament creator fee of the specific tournament\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @return (uint256) Tournament creator fee\\n   */\\n  function getTournamentCreatorFee(uint256 _gid, uint256 _tid)\\n    external\\n    view\\n    onlyValidGID(_gid)\\n    onlyValidTID(_gid, _tid)\\n    returns (uint256)\\n  {\\n    return games[_gid].tournaments[_tid].creatorFee;\\n  }\\n\\n  /**\\n   * @notice Returns the applied game creator fee of the specific tournament\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @return (string) Game applied game creator fee of a tournament\\n   */\\n  function getAppliedGameCreatorFee(uint256 _gid, uint256 _tid)\\n    external\\n    view\\n    onlyValidGID(_gid)\\n    onlyValidTID(_gid, _tid)\\n    returns (uint256)\\n  {\\n    return games[_gid].tournaments[_tid].appliedGameCreatorFee;\\n  }\\n\\n  /**\\n   * @notice Returns the deposit token amount of the specific tournament\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _tokenAddress token address\\n   * @return (uint256) Tournament deposit token amount\\n   */\\n  function getDepositTokenAmount(\\n    uint256 _gid,\\n    uint256 _tid,\\n    address _tokenAddress\\n  ) external view onlyValidGID(_gid) onlyValidTID(_gid, _tid) returns (uint256) {\\n    return games[_gid].tournaments[_tid].depositTokenAmount[_tokenAddress];\\n  }\\n\\n  /**\\n   * @notice Returns the tournament creator address of the specific tournament\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @return (address) Tournament creator address\\n   */\\n  function getTournamentCreator(uint256 _gid, uint256 _tid)\\n    external\\n    view\\n    onlyValidGID(_gid)\\n    onlyValidTID(_gid, _tid)\\n    returns (address)\\n  {\\n    return games[_gid].tournaments[_tid].creatorAddress;\\n  }\\n\\n  /**\\n   * @notice Add the new game\\n   * @dev Base game creator fee is the minimum fee vaule that the game creator should be rewarded from the tournamnet of the game\\n   * @dev When creating the tournament of the game, the game creator fee can be proposed by the tournament creator\\n   * @dev but the proposed value can't be less than the base one\\n   * @dev If the proposed game creator fee is 0, the base game creator fee will be applied\\n   * @param _gameName Game name to add\\n   * @param _gameCreator Game creator address\\n   * @param _baseGameCreatorFee Base game creator fee\\n   */\\n  function addGame(\\n    string calldata _gameName,\\n    address _gameCreator,\\n    uint256 _baseGameCreatorFee\\n  ) external onlyOwner returns (uint256 gid) {\\n    require(bytes(_gameName).length != 0, \\\"Empty game name\\\");\\n    require(_gameCreator != address(0), \\\"Zero game creator address\\\");\\n    require(platformFee + _baseGameCreatorFee <= MAX_PERMILLAGE, \\\"Exceeded base game creator fee\\\");\\n\\n    // Create game and set properties\\n    gid = games.length;\\n    games.push();\\n    games[gid].name = _gameName;\\n    games[gid].creatorAddress = _gameCreator;\\n    games[gid].baseCreatorFee = _baseGameCreatorFee;\\n\\n    emit GameAdded(msg.sender, gid, _gameName, _gameCreator, _baseGameCreatorFee);\\n  }\\n\\n  /**\\n   * @notice Remove the exising game\\n   * @dev Game is not removed from the games array, just set it deprecated\\n   * @param _gid Game ID\\n   */\\n  function removeGame(uint256 _gid) external onlyOwner onlyActiveGame(_gid) {\\n    // remove game\\n    games[_gid].isDeprecated = true;\\n\\n    emit GameRemoved(msg.sender, _gid, games[_gid].name, games[_gid].creatorAddress, games[_gid].baseCreatorFee);\\n  }\\n\\n  /**\\n   * @notice Update the game creator\\n   * @param _gid Game ID\\n   * @param _gameCreator Game creator address\\n   */\\n  function updateGameCreator(uint256 _gid, address _gameCreator) external onlyActiveGame(_gid) {\\n    require(msg.sender == games[_gid].creatorAddress, \\\"Only game creator\\\");\\n    require(_gameCreator != address(0), \\\"Zero game creator address\\\");\\n\\n    emit GameCreatorUpdated(msg.sender, _gid, games[_gid].creatorAddress, _gameCreator);\\n\\n    // update the game creator address\\n    games[_gid].creatorAddress = _gameCreator;\\n  }\\n\\n  /**\\n   * @notice Update the base game creator fee\\n   * @dev Tournament creator fee is the royality that will be transferred to the tournament creator address\\n   * @dev Tournament creator can propose the game creator fee when creating the tournament\\n   * @dev but it can't be less than the base game creator fee\\n   * @param _gid Game ID\\n   * @param _baseGameCreatorFee Base game creator fee\\n   */\\n  function updateBaseGameCreatorFee(uint256 _gid, uint256 _baseGameCreatorFee) external onlyOwner onlyActiveGame(_gid) {\\n    require(platformFee + _baseGameCreatorFee <= MAX_PERMILLAGE, \\\"Exceeded game creator fee\\\");\\n\\n    emit BaseGameCreatorFeeUpdated(msg.sender, _gid, games[_gid].baseCreatorFee, _baseGameCreatorFee);\\n\\n    // update the game creator fee\\n    games[_gid].baseCreatorFee = _baseGameCreatorFee;\\n  }\\n\\n  /**\\n   * @notice Create the tournament and set tokens\\n   * @dev Only owner\\n   * @dev If the proposed game creaetor fee is 0, the base game creator fee is applied\\n   * @dev The prize pool for the tournament that the owner created is initialized on Oparcade contract\\n   * @param _gid Game ID\\n   * @param _proposedGameCreatorFee Proposed game creator fee\\n   * @param _tournamentCreatorFee Tournament creator fee\\n   * @param _depositToken Token to allow/disallow the deposit\\n   * @param _distributionTokenAddress Distribution token address to be set to active\\n   * @return tid Tournament ID created\\n   */\\n  function createTournamentByDAOWithTokens(\\n    uint256 _gid,\\n    string memory _tournamentName,\\n    uint256 _proposedGameCreatorFee,\\n    uint256 _tournamentCreatorFee,\\n    Token calldata _depositToken,\\n    address _distributionTokenAddress\\n  ) external onlyOwner onlyActiveGame(_gid) returns (uint256 tid) {\\n    // create the tournament\\n    tid = _createTournament(_gid, _tournamentName, _proposedGameCreatorFee, _tournamentCreatorFee);\\n\\n    // set the deposit token address and amount\\n    _updateDepositTokenAmount(_gid, tid, _depositToken.tokenAddress, _depositToken.tokenAmount);\\n\\n    // set the distributable token address\\n    if (!games[_gid].distributable[_distributionTokenAddress]) {\\n      _updateDistributableTokenAddress(_gid, _distributionTokenAddress, true);\\n    }\\n\\n    return tid;\\n  }\\n\\n  /**\\n   * @notice Create the tournament\\n   * @dev Only owner\\n   * @dev If the proposed game creaetor fee is 0, the base game creator fee is applied\\n   * @dev The prize pool for the tournament that the owner created is initialized on Oparcade contract\\n   * @param _gid Game ID\\n   * @param _proposedGameCreatorFee Proposed game creator fee\\n   * @param _tournamentCreatorFee Tournament creator fee\\n   * @return tid Tournament ID created\\n   */\\n  function createTournamentByDAO(\\n    uint256 _gid,\\n    string calldata _tournamentName,\\n    uint256 _proposedGameCreatorFee,\\n    uint256 _tournamentCreatorFee\\n  ) external onlyOwner onlyActiveGame(_gid) returns (uint256 tid) {\\n    tid = _createTournament(_gid, _tournamentName, _proposedGameCreatorFee, _tournamentCreatorFee);\\n  }\\n\\n  /**\\n   * @notice Create the tournament\\n   * @dev If the proposed game creaetor fee is 0, the base game creator fee is applied\\n   * @param _gid Game ID\\n   * @param _proposedGameCreatorFee Proposed game creator fee\\n   * @param _tournamentCreatorFee Tournament creator fee\\n   * @return tid Tournament ID created\\n   */\\n  function _createTournament(\\n    uint256 _gid,\\n    string memory _tournamentName,\\n    uint256 _proposedGameCreatorFee,\\n    uint256 _tournamentCreatorFee\\n  ) internal returns (uint256 tid) {\\n    // use baseCreatorFee if _proposedGameCreatorFee is zero\\n    uint256 appliedGameCreatorFee;\\n    if (_proposedGameCreatorFee == 0) {\\n      appliedGameCreatorFee = games[_gid].baseCreatorFee;\\n    } else {\\n      appliedGameCreatorFee = _proposedGameCreatorFee;\\n    }\\n\\n    // check fees\\n    require(games[_gid].baseCreatorFee <= appliedGameCreatorFee, \\\"Low game creator fee proposed\\\");\\n    require(platformFee + appliedGameCreatorFee + _tournamentCreatorFee <= MAX_PERMILLAGE, \\\"Exceeded fees\\\");\\n\\n    // get the new tournament ID\\n    tid = games[_gid].tournamentsCount;\\n\\n    // add tournament\\n    games[_gid].tournamentsCount += 1;\\n    games[_gid].tournaments[tid].name = _tournamentName;\\n    games[_gid].tournaments[tid].creatorAddress = msg.sender;\\n    games[_gid].tournaments[tid].appliedGameCreatorFee = appliedGameCreatorFee;\\n    games[_gid].tournaments[tid].creatorFee = _tournamentCreatorFee;\\n\\n    emit TournamentCreated(msg.sender, _gid, tid, _tournamentName, appliedGameCreatorFee, _tournamentCreatorFee);\\n  }\\n\\n  /**\\n   * @notice Create the tournament\\n   * @dev Anyone can create the tournament and initialize the prize pool with tokens and NFTs\\n   * @dev Tournament creator should set all params necessary for the tournament in 1 tx and\\n   * @dev the params set is immutable. It will be prevent the fraud tournament is created\\n   * @dev Tournament creator should pay fees to create the tournament\\n   * @dev and the fee token address and fee token amount are set by the owner\\n   * @dev If the proposed game creaetor fee is 0, the base game creator fee is applied\\n   * @dev NFT type to initialize the prize pool should be either 721 or 1155\\n   * @param _gid Game ID\\n   * @param _proposedGameCreatorFee Proposed game creator fee\\n   * @param _tournamentCreatorFee Tournament creator fee\\n   * @param _depositToken Deposit token (address and amount) for playing the tournament\\n   * @param _tokenToAddPrizePool Token (address and amount) to initialize the prize pool\\n   * @param _nftAddressToAddPrizePool NFT address to initialize the prize pool\\n   * @param _nftTypeToAddPrizePool NFT type to initialize the prize pool\\n   * @param _tokenIdsToAddPrizePool NFT token Id list to initialize the prize pool\\n   * @param _amountsToAddPrizePool NFT token amount list to initialize the prize pool\\n   * @return tid Tournament ID created\\n   */\\n  function createTournamentByUser(\\n    uint256 _gid,\\n    string calldata _tournamentName,\\n    uint256 _proposedGameCreatorFee,\\n    uint256 _tournamentCreatorFee,\\n    Token calldata _depositToken,\\n    Token calldata _tokenToAddPrizePool,\\n    address _nftAddressToAddPrizePool,\\n    uint256 _nftTypeToAddPrizePool,\\n    uint256[] memory _tokenIdsToAddPrizePool,\\n    uint256[] memory _amountsToAddPrizePool\\n  ) external onlyActiveGame(_gid) returns (uint256 tid) {\\n    // pay the tournament creation fee\\n    IERC20Upgradeable(tournamentCreationFeeToken).safeTransferFrom(\\n      msg.sender,\\n      feeRecipient,\\n      tournamentCreationFeeAmount\\n    );\\n\\n    // create new tournament\\n    tid = _createTournament(_gid, _tournamentName, _proposedGameCreatorFee, _tournamentCreatorFee);\\n\\n    // set the deposit token amount\\n    _updateDepositTokenAmount(_gid, tid, _depositToken.tokenAddress, _depositToken.tokenAmount);\\n\\n    // set the distributable token\\n    if (!games[_gid].distributable[_depositToken.tokenAddress] && _depositToken.tokenAmount > 0) {\\n      _updateDistributableTokenAddress(_gid, _depositToken.tokenAddress, true);\\n    }\\n    if (!games[_gid].distributable[_tokenToAddPrizePool.tokenAddress] && _tokenToAddPrizePool.tokenAmount > 0) {\\n      _updateDistributableTokenAddress(_gid, _tokenToAddPrizePool.tokenAddress, true);\\n    }\\n\\n    // initialize the prize pool with tokens\\n    if (_tokenToAddPrizePool.tokenAmount > 0) {\\n      IOparcade(addressRegistry.oparcade()).depositPrize(\\n        msg.sender,\\n        _gid,\\n        tid,\\n        _tokenToAddPrizePool.tokenAddress,\\n        _tokenToAddPrizePool.tokenAmount\\n      );\\n    }\\n\\n    // initialize the prize pool with NFTs\\n    if (_nftTypeToAddPrizePool == 721 || _nftTypeToAddPrizePool == 1155) {\\n      // set the distributable token\\n      if (!games[_gid].distributable[_nftAddressToAddPrizePool] && _amountsToAddPrizePool.length > 0) {\\n        _updateDistributableTokenAddress(_gid, _nftAddressToAddPrizePool, true);\\n      }\\n\\n      IOparcade(addressRegistry.oparcade()).depositNFTPrize(\\n        msg.sender,\\n        _gid,\\n        tid,\\n        _nftAddressToAddPrizePool,\\n        _nftTypeToAddPrizePool,\\n        _tokenIdsToAddPrizePool,\\n        _amountsToAddPrizePool\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @notice Update deposit token amount\\n   * @dev Only owner\\n   * @dev Only tokens with an amount greater than zero is valid for the deposit\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _token Token address to allow/disallow the deposit\\n   * @param _amount Token amount\\n   */\\n  function updateDepositTokenAmount(\\n    uint256 _gid,\\n    uint256 _tid,\\n    address _token,\\n    uint256 _amount\\n  ) external onlyOwner onlyActiveGame(_gid) onlyValidTID(_gid, _tid) {\\n    _updateDepositTokenAmount(_gid, _tid, _token, _amount);\\n  }\\n\\n  /**\\n   * @notice Update deposit token amount\\n   * @dev Only tokens with an amount greater than zero is valid for the deposit\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _token Token address to allow/disallow the deposit\\n   * @param _amount Token amount\\n   */\\n  function _updateDepositTokenAmount(\\n    uint256 _gid,\\n    uint256 _tid,\\n    address _token,\\n    uint256 _amount\\n  ) internal {\\n    emit DepositAmountUpdated(\\n      msg.sender,\\n      _gid,\\n      _tid,\\n      games[_gid].tournaments[_tid].name,\\n      _token,\\n      games[_gid].tournaments[_tid].depositTokenAmount[_token],\\n      _amount\\n    );\\n\\n    // update deposit token list\\n    if (_amount > 0) {\\n      if (games[_gid].tournaments[_tid].depositTokenAmount[_token] == 0) {\\n        // add the token into the list only if it's added newly\\n        games[_gid].depositTokenList.push(_token);\\n      }\\n    } else {\\n      for (uint256 i; i < games[_gid].depositTokenList.length; i++) {\\n        if (_token == games[_gid].depositTokenList[i]) {\\n          // remove the token from the list\\n          games[_gid].depositTokenList[i] = games[_gid].depositTokenList[games[_gid].depositTokenList.length - 1];\\n          games[_gid].depositTokenList.pop();\\n          break;\\n        }\\n      }\\n    }\\n\\n    // update deposit token amount\\n    games[_gid].tournaments[_tid].depositTokenAmount[_token] = _amount;\\n  }\\n\\n  /**\\n   * @notice Update distributable token address\\n   * @dev Only owner\\n   * @param _gid Game ID\\n   * @param _token Token address to allow/disallow the deposit\\n   * @param _isDistributable true: distributable false: not distributable\\n   */\\n  function updateDistributableTokenAddress(\\n    uint256 _gid,\\n    address _token,\\n    bool _isDistributable\\n  ) external onlyOwner onlyActiveGame(_gid) {\\n    _updateDistributableTokenAddress(_gid, _token, _isDistributable);\\n  }\\n\\n  /**\\n   * @notice Update distributable token address\\n   * @dev Only owner\\n   * @param _gid Game ID\\n   * @param _token Token address to allow/disallow the deposit\\n   * @param _isDistributable true: distributable false: not distributable\\n   */\\n  function _updateDistributableTokenAddress(\\n    uint256 _gid,\\n    address _token,\\n    bool _isDistributable\\n  ) internal {\\n    emit DistributableTokenAddressUpdated(\\n      msg.sender,\\n      _gid,\\n      _token,\\n      games[_gid].distributable[_token],\\n      _isDistributable\\n    );\\n\\n    // update distributable token list\\n    if (_isDistributable) {\\n      if (!games[_gid].distributable[_token]) {\\n        // add token to the list only if it's added newly\\n        games[_gid].distributableTokenList.push(_token);\\n      }\\n    } else {\\n      for (uint256 i; i < games[_gid].distributableTokenList.length; i++) {\\n        if (_token == games[_gid].distributableTokenList[i]) {\\n          games[_gid].distributableTokenList[i] = games[_gid].distributableTokenList[\\n            games[_gid].distributableTokenList.length - 1\\n          ];\\n          games[_gid].distributableTokenList.pop();\\n          break;\\n        }\\n      }\\n    }\\n\\n    // update distributable token amount\\n    games[_gid].distributable[_token] = _isDistributable;\\n  }\\n\\n  /**\\n   * @notice Update the platform fee\\n   * @dev Only owner\\n   * @dev Allow zero recipient address only of fee is also zero\\n   * @param _feeRecipient Platform fee recipient address\\n   * @param _platformFee platform fee\\n   */\\n  function updatePlatformFee(address _feeRecipient, uint256 _platformFee) external onlyOwner {\\n    require(_feeRecipient != address(0) || _platformFee == 0, \\\"Fee recipient not set\\\");\\n    require(_platformFee <= MAX_PERMILLAGE, \\\"Platform fee exceeded\\\");\\n\\n    emit PlatformFeeUpdated(msg.sender, feeRecipient, platformFee, _feeRecipient, _platformFee);\\n\\n    feeRecipient = _feeRecipient;\\n    platformFee = _platformFee;\\n  }\\n\\n  /**\\n   * @notice Update the tournament creation fee\\n   * @dev Only owner\\n   * @dev Tournament creator should pay this fee when creating the tournament\\n   * @param _tournamentCreationFeeToken Fee token address\\n   * @param _tournamentCreationFeeAmount Fee token amount\\n   */\\n  function updateTournamentCreationFee(address _tournamentCreationFeeToken, uint256 _tournamentCreationFeeAmount)\\n    external\\n    onlyOwner\\n  {\\n    require(_tournamentCreationFeeToken != address(0), \\\"Zero tournament creation fee token\\\");\\n    require(_tournamentCreationFeeAmount > 0, \\\"Zero tournament creation fee\\\");\\n\\n    emit TournamentCreationFeeUpdated(\\n      msg.sender,\\n      tournamentCreationFeeToken,\\n      tournamentCreationFeeAmount,\\n      _tournamentCreationFeeToken,\\n      _tournamentCreationFeeAmount\\n    );\\n\\n    tournamentCreationFeeToken = _tournamentCreationFeeToken;\\n    tournamentCreationFeeAmount = _tournamentCreationFeeAmount;\\n  }\\n}\\n\",\"keccak256\":\"0x795ab6b9458fda5abba6414ce4d617135bc6a8ac7f38582c5de68c3da3d66574\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\n/**\\n * @title AddressRegistry Contract Interface\\n * @notice Define the interface used to get addresses in Oparcade\\n * @author David Lee\\n */\\ninterface IAddressRegistry {\\n  /**\\n   * @notice Provide the Oparcade contract address\\n   * @dev Can be zero in case of the Oparcade contract is not registered\\n   * @return address Oparcade contract address\\n   */\\n  function oparcade() external view returns (address);\\n\\n  /**\\n   * @notice Provide the GameRegistry contract address\\n   * @dev Can be zero in case of the GameRegistry contract is not registered\\n   * @return address GameRegistry contract address\\n   */\\n  function gameRegistry() external view returns (address);\\n\\n  /**\\n   * @notice Provide the maintainer address\\n   * @dev Can be zero in case of the maintainer address is not registered\\n   * @return address Maintainer contract address\\n   */\\n  function maintainer() external view returns (address);\\n\\n  /**\\n   * @notice Provide the timelock contract address\\n   * @dev Can be zero in case of the timelock address is not registered\\n   * @return address Timelock contract address\\n   */\\n  function timelock() external view returns (address);\\n}\\n\",\"keccak256\":\"0x3f2cbab5d28ad41e776c8ec62d06b756bad0d20f587c3c028d119b6068017908\",\"license\":\"MIT\"},\"contracts/interfaces/IOparcade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\n/**\\n * @title Oparcade Contract Interface\\n * @notice Define the interface used to get the token deposit and withdrawal info\\n * @author David Lee\\n */\\ninterface IOparcade {\\n  /**\\n   * @notice Deposit ERC20 tokens from user\\n   * @dev Only tokens registered in GameRegistry with an amount greater than zero is valid for the deposit\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _token Token address to deposit\\n   */\\n  function deposit(\\n    uint256 _gid,\\n    uint256 _tid,\\n    address _token\\n  ) external;\\n\\n  /**\\n   * @notice Deposit the prize tokens for the specific game/tournament\\n   * @dev Only tokens which are allowed as a distributable token can be deposited\\n   * @dev Prize is transferred from _depositor address to this contract\\n   * @param _depositor Depositor address\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _token Prize token address\\n   * @param _amount Prize amount to deposit\\n   */\\n  function depositPrize(\\n    address _depositor,\\n    uint256 _gid,\\n    uint256 _tid,\\n    address _token,\\n    uint256 _amount\\n  ) external;\\n\\n  /**\\n   * @notice Deposit NFT prize for the specific game/tournament\\n   * @dev NFT type should be either 721 or 1155\\n   * @param _from NFT owner address\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _nftAddress NFT address\\n   * @param _nftType NFT type (721/1155)\\n   * @param _tokenIds Token Id list\\n   * @param _amounts Token amount list\\n   */\\n  function depositNFTPrize(\\n    address _from,\\n    uint256 _gid,\\n    uint256 _tid,\\n    address _nftAddress,\\n    uint256 _nftType,\\n    uint256[] calldata _tokenIds,\\n    uint256[] calldata _amounts\\n  ) external;\\n\\n  /**\\n   * @notice Distribute winners their prizes\\n   * @dev Only maintainer\\n   * @dev The maximum distributable prize amount is the sum of the users' deposit and the prize that the owner deposited\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _winners Winners list\\n   * @param _token Prize token address\\n   * @param _amounts Prize list\\n   */\\n  function distributePrize(\\n    uint256 _gid,\\n    uint256 _tid,\\n    address[] calldata _winners,\\n    address _token,\\n    uint256[] calldata _amounts\\n  ) external;\\n\\n  /**\\n   * @notice Distribute winners' NFT prizes\\n   * @dev Only maintainer\\n   * @dev NFT type should be either 721 or 1155\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _winners Winners list\\n   * @param _nftAddress NFT address\\n   * @param _nftType NFT type (721/1155)\\n   * @param _tokenIds Token Id list\\n   * @param _amounts Token amount list\\n   */\\n  function distributeNFTPrize(\\n    uint256 _gid,\\n    uint256 _tid,\\n    address[] calldata _winners,\\n    address _nftAddress,\\n    uint256 _nftType,\\n    uint256[] calldata _tokenIds,\\n    uint256[] calldata _amounts\\n  ) external;\\n\\n  /**\\n   * @notice Withdraw the prize tokens from the specific game/tournament\\n   * @dev Only owner\\n   * @param _to Beneficiary address\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _token Prize token address\\n   * @param _amount Prize amount to withdraw\\n   */\\n  function withdrawPrize(\\n    address _to,\\n    uint256 _gid,\\n    uint256 _tid,\\n    address _token,\\n    uint256 _amount\\n  ) external;\\n\\n  /**\\n   * @notice Withdraw NFT prize for the specific game/tournament\\n   * @dev Only owner\\n   * @dev NFT type should be either 721 or 1155\\n   * @param _to NFT receiver address\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _nftAddress NFT address\\n   * @param _nftType NFT type (721/1155)\\n   * @param _tokenIds Token Id list\\n   * @param _amounts Token amount list\\n   */\\n  function withdrawNFTPrize(\\n    address _to,\\n    uint256 _gid,\\n    uint256 _tid,\\n    address _nftAddress,\\n    uint256 _nftType,\\n    uint256[] calldata _tokenIds,\\n    uint256[] calldata _amounts\\n  ) external;\\n\\n  /**\\n   * @notice Pause Oparcade\\n   * @dev Only owner\\n   */\\n  function pause() external;\\n\\n  /**\\n   * @notice Resume Oparcade\\n   * @dev Only owner\\n   */\\n  function unpause() external;\\n}\\n\",\"keccak256\":\"0x0ae13c180038978a2868256997a7231b467d32bc26b45f83b36445b3e73311be\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506140de806100206000396000f3fe608060405234801561001057600080fd5b50600436106102415760003560e01c80638da5cb5b11610145578063ddeeec88116100bd578063f3ad65f41161008c578063f483a0ca11610071578063f483a0ca146104d9578063f7c00e63146104f9578063fbf60be41461050c57600080fd5b8063f3ad65f4146104b3578063f406c2d1146104c657600080fd5b8063ddeeec8814610467578063edcd43ac1461047a578063f2fde38b1461048d578063f30818c1146104a057600080fd5b8063a7fbe6ba11610114578063b6d3bc64116100f9578063b6d3bc641461042e578063c94113b514610441578063cde8d10a1461045457600080fd5b8063a7fbe6ba14610408578063aba869c51461041b57600080fd5b80638da5cb5b146103ae57806391dd73f0146103bf578063920a236b146103d2578063a7ab0549146103f557600080fd5b806346904840116101d857806364fe328e116101a757806371a2304b1161018c57806371a2304b1461037f57806373d31240146103925780638d2acf0e146103a557600080fd5b806364fe328e14610364578063715018a61461037757600080fd5b80634690484014610316578063478eedc8146103295780634d1975b4146103495780636039197d1461035157600080fd5b80632a42b461116102145780632a42b461146102b257806335865971146102dd5780634116b1ad146102f057806341c92c0a1461030357600080fd5b80630fcf566e14610246578063117a5b901461025b57806322871dcd1461028857806326232a2e146102a9575b600080fd5b610259610254366004613724565b61051f565b005b61026e610269366004613750565b610694565b60405161027f9594939291906137c1565b60405180910390f35b61029b610296366004613801565b610773565b60405190815260200161027f565b61029b60685481565b6069546102c5906001600160a01b031681565b6040516001600160a01b03909116815260200161027f565b61029b6102eb366004613823565b610872565b6102596102fe36600461385c565b610981565b61029b610311366004613750565b610b86565b6067546102c5906001600160a01b031681565b61033c610337366004613801565b610bff565b60405161027f919061388c565b60655461029b565b61029b61035f3660046138f8565b610d80565b610259610372366004613801565b610ec7565b61025961107d565b61025961038d3660046139cb565b6110d1565b6102596103a0366004613750565b611216565b61029b606a5481565b6033546001600160a01b03166102c5565b6102596103cd366004613a18565b6113e3565b6103e56103e0366004613750565b6114b4565b604051901515815260200161027f565b61029b610403366004613801565b611530565b61029b610416366004613a98565b61162f565b6103e561042936600461385c565b611889565b61029b61043c366004613af5565b61191c565b61025961044f366004613724565b611a2e565b6102c5610462366004613750565b611b9c565b61029b610475366004613bc8565b611c1e565b61029b610488366004613750565b6120b8565b61025961049b366004613cbb565b612130565b61033c6104ae366004613750565b612200565b6066546102c5906001600160a01b031681565b6102c56104d4366004613801565b612300565b6104ec6104e7366004613750565b612405565b60405161027f9190613cd8565b610259610507366004613d25565b61248b565b6104ec61051a366004613750565b612706565b6033546001600160a01b0316331461056c5760405162461bcd60e51b8152602060048201819052602482015260008051602061408983398151915260448201526064015b60405180910390fd5b6001600160a01b038216151580610581575080155b6105cd5760405162461bcd60e51b815260206004820152601560248201527f46656520726563697069656e74206e6f742073657400000000000000000000006044820152606401610563565b6103e881111561061f5760405162461bcd60e51b815260206004820152601560248201527f506c6174666f726d2066656520657863656564656400000000000000000000006044820152606401610563565b60675460685460408051918252602082018490526001600160a01b0385811693169133917f41340b8520c039756fdade211d2fd26138ba0673031cebf9ae4ae32d38357062910160405180910390a4606780546001600160a01b0319166001600160a01b039390931692909217909155606855565b606581815481106106a457600080fd5b90600052602060002090600902016000915090508060000180546106c790613d80565b80601f01602080910402602001604051908101604052809291908181526020018280546106f390613d80565b80156107405780601f1061071557610100808354040283529160200191610740565b820191906000526020600020905b81548152906001019060200180831161072357829003601f168201915b50505060018401546002850154600386015460079096015494956001600160a01b039092169490935060ff909116915085565b606554600090839081106107be5760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610563565b8383606582815481106107d3576107d3613db5565b906000526020600020906009020160070154811061082e5760405162461bcd60e51b8152602060048201526018602482015277092dcecc2d8d2c840e8deeae4dcc2dacadce840d2dcc8caf60431b6044820152606401610563565b6065868154811061084157610841613db5565b9060005260206000209060090201600601600086815260200190815260200160002060020154935050505092915050565b606554600090849081106108bd5760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610563565b8484606582815481106108d2576108d2613db5565b906000526020600020906009020160070154811061092d5760405162461bcd60e51b8152602060048201526018602482015277092dcecc2d8d2c840e8deeae4dcc2dacadce840d2dcc8caf60431b6044820152606401610563565b6065878154811061094057610940613db5565b60009182526020808320898452600660099093020191909101815260408083206001600160a01b038916845260040190915290205493505050509392505050565b6065548290811080156109bb5750606581815481106109a2576109a2613db5565b600091825260209091206003600990920201015460ff16155b6109f95760405162461bcd60e51b815260206004820152600f60248201526e47616d65206e6f742061637469766560881b6044820152606401610563565b60658381548110610a0c57610a0c613db5565b60009182526020909120600990910201600101546001600160a01b03163314610a775760405162461bcd60e51b815260206004820152601160248201527f4f6e6c792067616d652063726561746f720000000000000000000000000000006044820152606401610563565b6001600160a01b038216610acd5760405162461bcd60e51b815260206004820152601960248201527f5a65726f2067616d652063726561746f722061646472657373000000000000006044820152606401610563565b60658381548110610ae057610ae0613db5565b6000918252602091829020600990910201600101546040516001600160a01b03858116825290911691859133917fc3ead6876b368fd5723f08611f2323ab6862a20398921fb4c5d8102183752686910160405180910390a48160658481548110610b4c57610b4c613db5565b906000526020600020906009020160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550505050565b60655460009082908110610bd15760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610563565b60658381548110610be457610be4613db5565b90600052602060002090600902016007015491505b50919050565b60655460609083908110610c4a5760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610563565b838360658281548110610c5f57610c5f613db5565b9060005260206000209060090201600701548110610cba5760405162461bcd60e51b8152602060048201526018602482015277092dcecc2d8d2c840e8deeae4dcc2dacadce840d2dcc8caf60431b6044820152606401610563565b60658681548110610ccd57610ccd613db5565b600091825260208083208884526006600990930201919091019052604090208054610cf790613d80565b80601f0160208091040260200160405190810160405280929190818152602001828054610d2390613d80565b8015610d705780601f10610d4557610100808354040283529160200191610d70565b820191906000526020600020905b815481529060010190602001808311610d5357829003601f168201915b5050505050935050505092915050565b6033546000906001600160a01b03163314610dcb5760405162461bcd60e51b815260206004820181905260248201526000805160206140898339815191526044820152606401610563565b606554879081108015610e05575060658181548110610dec57610dec613db5565b600091825260209091206003600990920201015460ff16155b610e435760405162461bcd60e51b815260206004820152600f60248201526e47616d65206e6f742061637469766560881b6044820152606401610563565b610e4f8888888861278a565b9150610e6d8883610e636020880188613cbb565b8760200135612a76565b60658881548110610e8057610e80613db5565b600091825260208083206001600160a01b03871684526008600990930201919091019052604090205460ff16610ebc57610ebc88846001612e0f565b509695505050505050565b6033546001600160a01b03163314610f0f5760405162461bcd60e51b815260206004820181905260248201526000805160206140898339815191526044820152606401610563565b606554829081108015610f49575060658181548110610f3057610f30613db5565b600091825260209091206003600990920201015460ff16155b610f875760405162461bcd60e51b815260206004820152600f60248201526e47616d65206e6f742061637469766560881b6044820152606401610563565b6103e882606854610f989190613de1565b1115610fe65760405162461bcd60e51b815260206004820152601960248201527f45786365656465642067616d652063726561746f7220666565000000000000006044820152606401610563565b60658381548110610ff957610ff9613db5565b90600052602060002090600902016002015483336001600160a01b03167f1368505f5ab324c064457c30f01846471732247325d44b676e806cc4cd884a708560405161104791815260200190565b60405180910390a4816065848154811061106357611063613db5565b906000526020600020906009020160020181905550505050565b6033546001600160a01b031633146110c55760405162461bcd60e51b815260206004820181905260248201526000805160206140898339815191526044820152606401610563565b6110cf600061316c565b565b6033546001600160a01b031633146111195760405162461bcd60e51b815260206004820181905260248201526000805160206140898339815191526044820152606401610563565b60655484908110801561115357506065818154811061113a5761113a613db5565b600091825260209091206003600990920201015460ff16155b6111915760405162461bcd60e51b815260206004820152600f60248201526e47616d65206e6f742061637469766560881b6044820152606401610563565b8484606582815481106111a6576111a6613db5565b90600052602060002090600902016007015481106112015760405162461bcd60e51b8152602060048201526018602482015277092dcecc2d8d2c840e8deeae4dcc2dacadce840d2dcc8caf60431b6044820152606401610563565b61120d87878787612a76565b50505050505050565b6033546001600160a01b0316331461125e5760405162461bcd60e51b815260206004820181905260248201526000805160206140898339815191526044820152606401610563565b60655481908110801561129857506065818154811061127f5761127f613db5565b600091825260209091206003600990920201015460ff16155b6112d65760405162461bcd60e51b815260206004820152600f60248201526e47616d65206e6f742061637469766560881b6044820152606401610563565b6001606583815481106112eb576112eb613db5565b906000526020600020906009020160030160006101000a81548160ff0219169083151502179055506065828154811061132657611326613db5565b906000526020600020906009020160010160009054906101000a90046001600160a01b03166001600160a01b031682336001600160a01b03167f87c3cbb8e83984547de922e1b60d2b0e975685ec4e9aca63d4eb28317d4da5606065868154811061139357611393613db5565b9060005260206000209060090201600001606587815481106113b7576113b7613db5565b9060005260206000209060090201600201546040516113d7929190613e99565b60405180910390a45050565b6033546001600160a01b0316331461142b5760405162461bcd60e51b815260206004820181905260248201526000805160206140898339815191526044820152606401610563565b60655483908110801561146557506065818154811061144c5761144c613db5565b600091825260209091206003600990920201015460ff16155b6114a35760405162461bcd60e51b815260206004820152600f60248201526e47616d65206e6f742061637469766560881b6044820152606401610563565b6114ae848484612e0f565b50505050565b606554600090829081106114ff5760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610563565b6065838154811061151257611512613db5565b600091825260209091206009909102016003015460ff169392505050565b6065546000908390811061157b5760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610563565b83836065828154811061159057611590613db5565b90600052602060002090600902016007015481106115eb5760405162461bcd60e51b8152602060048201526018602482015277092dcecc2d8d2c840e8deeae4dcc2dacadce840d2dcc8caf60431b6044820152606401610563565b606586815481106115fe576115fe613db5565b9060005260206000209060090201600601600086815260200190815260200160002060030154935050505092915050565b6033546000906001600160a01b0316331461167a5760405162461bcd60e51b815260206004820181905260248201526000805160206140898339815191526044820152606401610563565b836116c75760405162461bcd60e51b815260206004820152600f60248201527f456d7074792067616d65206e616d6500000000000000000000000000000000006044820152606401610563565b6001600160a01b03831661171d5760405162461bcd60e51b815260206004820152601960248201527f5a65726f2067616d652063726561746f722061646472657373000000000000006044820152606401610563565b6103e88260685461172e9190613de1565b111561177c5760405162461bcd60e51b815260206004820152601e60248201527f457863656564656420626173652067616d652063726561746f722066656500006044820152606401610563565b506065805460018101808355600083905290918691869190849081106117a4576117a4613db5565b600091825260209091206117be93600990920201916135f2565b5082606582815481106117d3576117d3613db5565b906000526020600020906009020160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550816065828154811061181c5761181c613db5565b906000526020600020906009020160020181905550826001600160a01b031681336001600160a01b03167f871f6ba5dcb0133e30d68dd1c00225621e34ea9882970c2578c9136a4113d04f88888760405161187993929190613ebb565b60405180910390a4949350505050565b606554600090839081106118d45760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610563565b606584815481106118e7576118e7613db5565b600091825260208083206001600160a01b03871684526008600990930201919091019052604090205460ff1691505092915050565b6033546000906001600160a01b031633146119675760405162461bcd60e51b815260206004820181905260248201526000805160206140898339815191526044820152606401610563565b6065548690811080156119a157506065818154811061198857611988613db5565b600091825260209091206003600990920201015460ff16155b6119df5760405162461bcd60e51b815260206004820152600f60248201526e47616d65206e6f742061637469766560881b6044820152606401610563565b611a238787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525089925088915061278a9050565b979650505050505050565b6033546001600160a01b03163314611a765760405162461bcd60e51b815260206004820181905260248201526000805160206140898339815191526044820152606401610563565b6001600160a01b038216611ad75760405162461bcd60e51b815260206004820152602260248201527f5a65726f20746f75726e616d656e74206372656174696f6e2066656520746f6b60448201526132b760f11b6064820152608401610563565b60008111611b275760405162461bcd60e51b815260206004820152601c60248201527f5a65726f20746f75726e616d656e74206372656174696f6e20666565000000006044820152606401610563565b606954606a5460408051918252602082018490526001600160a01b0385811693169133917f45bc4d0779d14a1aad1c23a7c7276ca222ceb0f53ce9ec76d88470974674a58f910160405180910390a4606980546001600160a01b0319166001600160a01b039390931692909217909155606a55565b60655460009082908110611be75760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610563565b60658381548110611bfa57611bfa613db5565b60009182526020909120600990910201600101546001600160a01b03169392505050565b6065546000908c9081108015611c5b575060658181548110611c4257611c42613db5565b600091825260209091206003600990920201015460ff16155b611c995760405162461bcd60e51b815260206004820152600f60248201526e47616d65206e6f742061637469766560881b6044820152606401610563565b606754606a54606954611cbd926001600160a01b03918216923392909116906131be565b611d018d8d8d8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508f92508e915061278a9050565b9150611d1f8d83611d1560208c018c613cbb565b8b60200135612a76565b60658d81548110611d3257611d32613db5565b90600052602060002090600902016008016000896000016020810190611d589190613cbb565b6001600160a01b0316815260208101919091526040016000205460ff16158015611d86575060008860200135115b15611da357611da38d611d9c60208b018b613cbb565b6001612e0f565b60658d81548110611db657611db6613db5565b90600052602060002090600902016008016000886000016020810190611ddc9190613cbb565b6001600160a01b0316815260208101919091526040016000205460ff16158015611e0a575060008760200135115b15611e2057611e208d611d9c60208a018a613cbb565b602087013515611f5357606660009054906101000a90046001600160a01b03166001600160a01b0316638d374f256040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea19190613ef4565b6001600160a01b0316631de6ba17338f85611ebf60208d018d613cbb565b60405160e086901b7fffffffff000000000000000000000000000000000000000000000000000000001681526001600160a01b03948516600482015260248101939093526044830191909152909116606482015260208a0135608482015260a401600060405180830381600087803b158015611f3a57600080fd5b505af1158015611f4e573d6000803e3d6000fd5b505050505b846102d11480611f64575084610483145b156120a85760658d81548110611f7c57611f7c613db5565b600091825260208083206001600160a01b038a1684526008600990930201919091019052604090205460ff16158015611fb6575060008351115b15611fc757611fc78d876001612e0f565b606660009054906101000a90046001600160a01b03166001600160a01b0316638d374f256040518163ffffffff1660e01b8152600401602060405180830381865afa15801561201a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061203e9190613ef4565b6001600160a01b031663b3a833b8338f858a8a8a8a6040518863ffffffff1660e01b81526004016120759796959493929190613f4c565b600060405180830381600087803b15801561208f57600080fd5b505af11580156120a3573d6000803e3d6000fd5b505050505b509b9a5050505050505050505050565b606554600090829081106121035760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610563565b6065838154811061211657612116613db5565b906000526020600020906009020160020154915050919050565b6033546001600160a01b031633146121785760405162461bcd60e51b815260206004820181905260248201526000805160206140898339815191526044820152606401610563565b6001600160a01b0381166121f45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610563565b6121fd8161316c565b50565b6065546060908290811061224b5760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610563565b6065838154811061225e5761225e613db5565b9060005260206000209060090201600001805461227a90613d80565b80601f01602080910402602001604051908101604052809291908181526020018280546122a690613d80565b80156122f35780601f106122c8576101008083540402835291602001916122f3565b820191906000526020600020905b8154815290600101906020018083116122d657829003601f168201915b5050505050915050919050565b6065546000908390811061234b5760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610563565b83836065828154811061236057612360613db5565b90600052602060002090600902016007015481106123bb5760405162461bcd60e51b8152602060048201526018602482015277092dcecc2d8d2c840e8deeae4dcc2dacadce840d2dcc8caf60431b6044820152606401610563565b606586815481106123ce576123ce613db5565b60009182526020808320888452600660099093020191909101905260409020600101546001600160a01b0316935050505092915050565b60606065828154811061241a5761241a613db5565b906000526020600020906009020160050180548060200260200160405190810160405280929190818152602001828054801561247f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612461575b50505050509050919050565b600054610100900460ff166124a65760005460ff16156124aa565b303b155b61251c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610563565b600054610100900460ff1615801561253e576000805461ffff19166101011790555b61254661322d565b6001600160a01b03861661259c5760405162461bcd60e51b815260206004820152601560248201527f5a65726f206164647265737320726567697374727900000000000000000000006044820152606401610563565b6001600160a01b0383166125f25760405162461bcd60e51b815260206004820152601960248201527f5a65726f20746f75726e616d656e742066656520746f6b656e000000000000006044820152606401610563565b6001600160a01b038516151580612607575083155b6126535760405162461bcd60e51b815260206004820152601560248201527f46656520726563697069656e74206e6f742073657400000000000000000000006044820152606401610563565b6103e88411156126a55760405162461bcd60e51b815260206004820152601560248201527f506c6174666f726d2066656520657863656564656400000000000000000000006044820152606401610563565b606680546001600160a01b038089166001600160a01b0319928316179092556067805488841690831617905560688690556069805492861692909116919091179055606a82905580156126fe576000805461ff00191690555b505050505050565b60606065828154811061271b5761271b613db5565b906000526020600020906009020160040180548060200260200160405190810160405280929190818152602001828054801561247f576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116124615750505050509050919050565b600080836127be57606586815481106127a5576127a5613db5565b90600052602060002090600902016002015490506127c1565b50825b80606587815481106127d5576127d5613db5565b90600052602060002090600902016002015411156128355760405162461bcd60e51b815260206004820152601d60248201527f4c6f772067616d652063726561746f72206665652070726f706f7365640000006044820152606401610563565b6103e883826068546128479190613de1565b6128519190613de1565b111561289f5760405162461bcd60e51b815260206004820152600d60248201527f45786365656465642066656573000000000000000000000000000000000000006044820152606401610563565b606586815481106128b2576128b2613db5565b90600052602060002090600902016007015491506001606587815481106128db576128db613db5565b906000526020600020906009020160070160008282546128fb9190613de1565b92505081905550846065878154811061291657612916613db5565b90600052602060002090600902016006016000848152602001908152602001600020600001908051906020019061294e929190613676565b50336065878154811061296357612963613db5565b9060005260206000209060090201600601600084815260200190815260200160002060010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080606587815481106129c0576129c0613db5565b906000526020600020906009020160060160008481526020019081526020016000206003018190555082606587815481106129fd576129fd613db5565b90600052602060002090600902016006016000848152602001908152602001600020600201819055508186336001600160a01b03167f5b1600316d8d2966d4cad163e656448a5622202016ec8b306efe11d70fa58d51888588604051612a6593929190613faa565b60405180910390a450949350505050565b8284336001600160a01b03167fa5c159e7b999109ecb53422b7b9c90ccbadb6ed8896d2e239257d284ce6d57aa60658881548110612ab657612ab6613db5565b906000526020600020906009020160060160008881526020019081526020016000206000018660658a81548110612aef57612aef613db5565b600091825260208083208c8452600660099093020191909101815260408083206001600160a01b038c16845260040190915290819020549051612b36939291908990613fcf565b60405180910390a48015612be65760658481548110612b5757612b57613db5565b60009182526020808320868452600660099093020191909101815260408083206001600160a01b0386168452600401909152902054612be15760658481548110612ba357612ba3613db5565b60009182526020808320600992909202909101600501805460018101825590835291200180546001600160a01b0319166001600160a01b0384161790555b612dbe565b60005b60658581548110612bfc57612bfc613db5565b906000526020600020906009020160050180549050811015612dbc5760658581548110612c2b57612c2b613db5565b90600052602060002090600902016005018181548110612c4d57612c4d613db5565b6000918252602090912001546001600160a01b0384811691161415612daa5760658581548110612c7f57612c7f613db5565b9060005260206000209060090201600501600160658781548110612ca557612ca5613db5565b906000526020600020906009020160050180549050612cc49190614007565b81548110612cd457612cd4613db5565b600091825260209091200154606580546001600160a01b039092169187908110612d0057612d00613db5565b90600052602060002090600902016005018281548110612d2257612d22613db5565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060658581548110612d6357612d63613db5565b9060005260206000209060090201600501805480612d8357612d8361401e565b600082815260209020810160001990810180546001600160a01b0319169055019055612dbc565b80612db481614034565b915050612be9565b505b8060658581548110612dd257612dd2613db5565b600091825260208083209683526006600990920290960101855260408082206001600160a01b039095168252600490940190945291909220555050565b816001600160a01b031683336001600160a01b03167f55c3f1ffae9780d4a4ce8073352d34fea806bb40540f99c3e32abaac63de3b1b60658781548110612e5857612e58613db5565b600091825260208083206001600160a01b038a168452600992909202909101600801815260409182902054825160ff90911615158152871515918101919091520160405180910390a48015612f405760658381548110612eba57612eba613db5565b600091825260208083206001600160a01b03861684526008600990930201919091019052604090205460ff16612f3b5760658381548110612efd57612efd613db5565b60009182526020808320600992909202909101600401805460018101825590835291200180546001600160a01b0319166001600160a01b0384161790555b613118565b60005b60658481548110612f5657612f56613db5565b9060005260206000209060090201600401805490508110156131165760658481548110612f8557612f85613db5565b90600052602060002090600902016004018181548110612fa757612fa7613db5565b6000918252602090912001546001600160a01b03848116911614156131045760658481548110612fd957612fd9613db5565b9060005260206000209060090201600401600160658681548110612fff57612fff613db5565b90600052602060002090600902016004018054905061301e9190614007565b8154811061302e5761302e613db5565b600091825260209091200154606580546001600160a01b03909216918690811061305a5761305a613db5565b9060005260206000209060090201600401828154811061307c5761307c613db5565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550606584815481106130bd576130bd613db5565b90600052602060002090600902016004018054806130dd576130dd61401e565b600082815260209020810160001990810180546001600160a01b0319169055019055613116565b8061310e81614034565b915050612f43565b505b806065848154811061312c5761312c613db5565b600091825260208083206001600160a01b03909616835260086009909202909501019093526040909220805492151560ff19909316929092179091555050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b1790526114ae9085906132a8565b600054610100900460ff166132985760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610563565b6132a0613392565b6110cf6133fd565b60006132fd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166134719092919063ffffffff16565b80519091501561338d578080602001905181019061331b919061404f565b61338d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610563565b505050565b600054610100900460ff166110cf5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610563565b600054610100900460ff166134685760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610563565b6110cf3361316c565b6060613480848460008561348a565b90505b9392505050565b6060824710156135025760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610563565b843b6135505760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610563565b600080866001600160a01b0316858760405161356c919061406c565b60006040518083038185875af1925050503d80600081146135a9576040519150601f19603f3d011682016040523d82523d6000602084013e6135ae565b606091505b5091509150611a23828286606083156135c8575081613483565b8251156135d85782518084602001fd5b8160405162461bcd60e51b8152600401610563919061388c565b8280546135fe90613d80565b90600052602060002090601f0160209004810192826136205760008555613666565b82601f106136395782800160ff19823516178555613666565b82800160010185558215613666579182015b8281111561366657823582559160200191906001019061364b565b506136729291506136ea565b5090565b82805461368290613d80565b90600052602060002090601f0160209004810192826136a45760008555613666565b82601f106136bd57805160ff1916838001178555613666565b82800160010185558215613666579182015b828111156136665782518255916020019190600101906136cf565b5b8082111561367257600081556001016136eb565b6001600160a01b03811681146121fd57600080fd5b803561371f816136ff565b919050565b6000806040838503121561373757600080fd5b8235613742816136ff565b946020939093013593505050565b60006020828403121561376257600080fd5b5035919050565b60005b8381101561378457818101518382015260200161376c565b838111156114ae5750506000910152565b600081518084526137ad816020860160208601613769565b601f01601f19169290920160200192915050565b60a0815260006137d460a0830188613795565b6001600160a01b039690961660208301525060408101939093529015156060830152608090910152919050565b6000806040838503121561381457600080fd5b50508035926020909101359150565b60008060006060848603121561383857600080fd5b83359250602084013591506040840135613851816136ff565b809150509250925092565b6000806040838503121561386f57600080fd5b823591506020830135613881816136ff565b809150509250929050565b6020815260006134836020830184613795565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156138de576138de61389f565b604052919050565b600060408284031215610bf957600080fd5b60008060008060008060e0878903121561391157600080fd5b8635955060208088013567ffffffffffffffff8082111561393157600080fd5b818a0191508a601f83011261394557600080fd5b8135818111156139575761395761389f565b613969601f8201601f191685016138b5565b91508082528b8482850101111561397f57600080fd5b808484018584013760008482840101525080975050505060408701359350606087013592506139b188608089016138e6565b91506139bf60c08801613714565b90509295509295509295565b600080600080608085870312156139e157600080fd5b843593506020850135925060408501356139fa816136ff565b9396929550929360600135925050565b80151581146121fd57600080fd5b600080600060608486031215613a2d57600080fd5b833592506020840135613a3f816136ff565b9150604084013561385181613a0a565b60008083601f840112613a6157600080fd5b50813567ffffffffffffffff811115613a7957600080fd5b602083019150836020828501011115613a9157600080fd5b9250929050565b60008060008060608587031215613aae57600080fd5b843567ffffffffffffffff811115613ac557600080fd5b613ad187828801613a4f565b9095509350506020850135613ae5816136ff565b9396929550929360400135925050565b600080600080600060808688031215613b0d57600080fd5b85359450602086013567ffffffffffffffff811115613b2b57600080fd5b613b3788828901613a4f565b9699909850959660408101359660609091013595509350505050565b600082601f830112613b6457600080fd5b8135602067ffffffffffffffff821115613b8057613b8061389f565b8160051b613b8f8282016138b5565b9283528481018201928281019087851115613ba957600080fd5b83870192505b84831015611a2357823582529183019190830190613baf565b60008060008060008060008060008060006101808c8e031215613bea57600080fd5b8b359a5067ffffffffffffffff8060208e01351115613c0857600080fd5b613c188e60208f01358f01613a4f565b909b50995060408d0135985060608d01359750613c388e60808f016138e6565b9650613c478e60c08f016138e6565b9550613c566101008e01613714565b94506101208d01359350806101408e01351115613c7257600080fd5b613c838e6101408f01358f01613b53565b9250806101608e01351115613c9757600080fd5b50613ca98d6101608e01358e01613b53565b90509295989b509295989b9093969950565b600060208284031215613ccd57600080fd5b8135613483816136ff565b6020808252825182820181905260009190848201906040850190845b81811015613d195783516001600160a01b031683529284019291840191600101613cf4565b50909695505050505050565b600080600080600060a08688031215613d3d57600080fd5b8535613d48816136ff565b94506020860135613d58816136ff565b9350604086013592506060860135613d6f816136ff565b949793965091946080013592915050565b600181811c90821680613d9457607f821691505b60208210811415610bf957634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115613df457613df4613dcb565b500190565b8054600090600181811c9080831680613e1357607f831692505b6020808410821415613e3557634e487b7160e01b600052602260045260246000fd5b83885260208801828015613e505760018114613e6157613e8c565b60ff19871682528282019750613e8c565b60008981526020902060005b87811015613e8657815484820152908601908401613e6d565b83019850505b5050505050505092915050565b604081526000613eac6040830185613df9565b90508260208301529392505050565b604081528260408201528284606083013760006060848301015260006060601f19601f8601168301019050826020830152949350505050565b600060208284031215613f0657600080fd5b8151613483816136ff565b600081518084526020808501945080840160005b83811015613f4157815187529582019590820190600101613f25565b509495945050505050565b60006001600160a01b03808a16835288602084015287604084015280871660608401525084608083015260e060a0830152613f8a60e0830185613f11565b82810360c0840152613f9c8185613f11565b9a9950505050505050505050565b606081526000613fbd6060830186613795565b60208301949094525060400152919050565b608081526000613fe26080830187613df9565b6001600160a01b03959095166020830152506040810192909252606090910152919050565b60008282101561401957614019613dcb565b500390565b634e487b7160e01b600052603160045260246000fd5b600060001982141561404857614048613dcb565b5060010190565b60006020828403121561406157600080fd5b815161348381613a0a565b6000825161407e818460208701613769565b919091019291505056fe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220b1900f1b11dfa5796934ab52673799c70f39a165763a68d10106cd90e70488cd64736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102415760003560e01c80638da5cb5b11610145578063ddeeec88116100bd578063f3ad65f41161008c578063f483a0ca11610071578063f483a0ca146104d9578063f7c00e63146104f9578063fbf60be41461050c57600080fd5b8063f3ad65f4146104b3578063f406c2d1146104c657600080fd5b8063ddeeec8814610467578063edcd43ac1461047a578063f2fde38b1461048d578063f30818c1146104a057600080fd5b8063a7fbe6ba11610114578063b6d3bc64116100f9578063b6d3bc641461042e578063c94113b514610441578063cde8d10a1461045457600080fd5b8063a7fbe6ba14610408578063aba869c51461041b57600080fd5b80638da5cb5b146103ae57806391dd73f0146103bf578063920a236b146103d2578063a7ab0549146103f557600080fd5b806346904840116101d857806364fe328e116101a757806371a2304b1161018c57806371a2304b1461037f57806373d31240146103925780638d2acf0e146103a557600080fd5b806364fe328e14610364578063715018a61461037757600080fd5b80634690484014610316578063478eedc8146103295780634d1975b4146103495780636039197d1461035157600080fd5b80632a42b461116102145780632a42b461146102b257806335865971146102dd5780634116b1ad146102f057806341c92c0a1461030357600080fd5b80630fcf566e14610246578063117a5b901461025b57806322871dcd1461028857806326232a2e146102a9575b600080fd5b610259610254366004613724565b61051f565b005b61026e610269366004613750565b610694565b60405161027f9594939291906137c1565b60405180910390f35b61029b610296366004613801565b610773565b60405190815260200161027f565b61029b60685481565b6069546102c5906001600160a01b031681565b6040516001600160a01b03909116815260200161027f565b61029b6102eb366004613823565b610872565b6102596102fe36600461385c565b610981565b61029b610311366004613750565b610b86565b6067546102c5906001600160a01b031681565b61033c610337366004613801565b610bff565b60405161027f919061388c565b60655461029b565b61029b61035f3660046138f8565b610d80565b610259610372366004613801565b610ec7565b61025961107d565b61025961038d3660046139cb565b6110d1565b6102596103a0366004613750565b611216565b61029b606a5481565b6033546001600160a01b03166102c5565b6102596103cd366004613a18565b6113e3565b6103e56103e0366004613750565b6114b4565b604051901515815260200161027f565b61029b610403366004613801565b611530565b61029b610416366004613a98565b61162f565b6103e561042936600461385c565b611889565b61029b61043c366004613af5565b61191c565b61025961044f366004613724565b611a2e565b6102c5610462366004613750565b611b9c565b61029b610475366004613bc8565b611c1e565b61029b610488366004613750565b6120b8565b61025961049b366004613cbb565b612130565b61033c6104ae366004613750565b612200565b6066546102c5906001600160a01b031681565b6102c56104d4366004613801565b612300565b6104ec6104e7366004613750565b612405565b60405161027f9190613cd8565b610259610507366004613d25565b61248b565b6104ec61051a366004613750565b612706565b6033546001600160a01b0316331461056c5760405162461bcd60e51b8152602060048201819052602482015260008051602061408983398151915260448201526064015b60405180910390fd5b6001600160a01b038216151580610581575080155b6105cd5760405162461bcd60e51b815260206004820152601560248201527f46656520726563697069656e74206e6f742073657400000000000000000000006044820152606401610563565b6103e881111561061f5760405162461bcd60e51b815260206004820152601560248201527f506c6174666f726d2066656520657863656564656400000000000000000000006044820152606401610563565b60675460685460408051918252602082018490526001600160a01b0385811693169133917f41340b8520c039756fdade211d2fd26138ba0673031cebf9ae4ae32d38357062910160405180910390a4606780546001600160a01b0319166001600160a01b039390931692909217909155606855565b606581815481106106a457600080fd5b90600052602060002090600902016000915090508060000180546106c790613d80565b80601f01602080910402602001604051908101604052809291908181526020018280546106f390613d80565b80156107405780601f1061071557610100808354040283529160200191610740565b820191906000526020600020905b81548152906001019060200180831161072357829003601f168201915b50505060018401546002850154600386015460079096015494956001600160a01b039092169490935060ff909116915085565b606554600090839081106107be5760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610563565b8383606582815481106107d3576107d3613db5565b906000526020600020906009020160070154811061082e5760405162461bcd60e51b8152602060048201526018602482015277092dcecc2d8d2c840e8deeae4dcc2dacadce840d2dcc8caf60431b6044820152606401610563565b6065868154811061084157610841613db5565b9060005260206000209060090201600601600086815260200190815260200160002060020154935050505092915050565b606554600090849081106108bd5760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610563565b8484606582815481106108d2576108d2613db5565b906000526020600020906009020160070154811061092d5760405162461bcd60e51b8152602060048201526018602482015277092dcecc2d8d2c840e8deeae4dcc2dacadce840d2dcc8caf60431b6044820152606401610563565b6065878154811061094057610940613db5565b60009182526020808320898452600660099093020191909101815260408083206001600160a01b038916845260040190915290205493505050509392505050565b6065548290811080156109bb5750606581815481106109a2576109a2613db5565b600091825260209091206003600990920201015460ff16155b6109f95760405162461bcd60e51b815260206004820152600f60248201526e47616d65206e6f742061637469766560881b6044820152606401610563565b60658381548110610a0c57610a0c613db5565b60009182526020909120600990910201600101546001600160a01b03163314610a775760405162461bcd60e51b815260206004820152601160248201527f4f6e6c792067616d652063726561746f720000000000000000000000000000006044820152606401610563565b6001600160a01b038216610acd5760405162461bcd60e51b815260206004820152601960248201527f5a65726f2067616d652063726561746f722061646472657373000000000000006044820152606401610563565b60658381548110610ae057610ae0613db5565b6000918252602091829020600990910201600101546040516001600160a01b03858116825290911691859133917fc3ead6876b368fd5723f08611f2323ab6862a20398921fb4c5d8102183752686910160405180910390a48160658481548110610b4c57610b4c613db5565b906000526020600020906009020160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550505050565b60655460009082908110610bd15760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610563565b60658381548110610be457610be4613db5565b90600052602060002090600902016007015491505b50919050565b60655460609083908110610c4a5760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610563565b838360658281548110610c5f57610c5f613db5565b9060005260206000209060090201600701548110610cba5760405162461bcd60e51b8152602060048201526018602482015277092dcecc2d8d2c840e8deeae4dcc2dacadce840d2dcc8caf60431b6044820152606401610563565b60658681548110610ccd57610ccd613db5565b600091825260208083208884526006600990930201919091019052604090208054610cf790613d80565b80601f0160208091040260200160405190810160405280929190818152602001828054610d2390613d80565b8015610d705780601f10610d4557610100808354040283529160200191610d70565b820191906000526020600020905b815481529060010190602001808311610d5357829003601f168201915b5050505050935050505092915050565b6033546000906001600160a01b03163314610dcb5760405162461bcd60e51b815260206004820181905260248201526000805160206140898339815191526044820152606401610563565b606554879081108015610e05575060658181548110610dec57610dec613db5565b600091825260209091206003600990920201015460ff16155b610e435760405162461bcd60e51b815260206004820152600f60248201526e47616d65206e6f742061637469766560881b6044820152606401610563565b610e4f8888888861278a565b9150610e6d8883610e636020880188613cbb565b8760200135612a76565b60658881548110610e8057610e80613db5565b600091825260208083206001600160a01b03871684526008600990930201919091019052604090205460ff16610ebc57610ebc88846001612e0f565b509695505050505050565b6033546001600160a01b03163314610f0f5760405162461bcd60e51b815260206004820181905260248201526000805160206140898339815191526044820152606401610563565b606554829081108015610f49575060658181548110610f3057610f30613db5565b600091825260209091206003600990920201015460ff16155b610f875760405162461bcd60e51b815260206004820152600f60248201526e47616d65206e6f742061637469766560881b6044820152606401610563565b6103e882606854610f989190613de1565b1115610fe65760405162461bcd60e51b815260206004820152601960248201527f45786365656465642067616d652063726561746f7220666565000000000000006044820152606401610563565b60658381548110610ff957610ff9613db5565b90600052602060002090600902016002015483336001600160a01b03167f1368505f5ab324c064457c30f01846471732247325d44b676e806cc4cd884a708560405161104791815260200190565b60405180910390a4816065848154811061106357611063613db5565b906000526020600020906009020160020181905550505050565b6033546001600160a01b031633146110c55760405162461bcd60e51b815260206004820181905260248201526000805160206140898339815191526044820152606401610563565b6110cf600061316c565b565b6033546001600160a01b031633146111195760405162461bcd60e51b815260206004820181905260248201526000805160206140898339815191526044820152606401610563565b60655484908110801561115357506065818154811061113a5761113a613db5565b600091825260209091206003600990920201015460ff16155b6111915760405162461bcd60e51b815260206004820152600f60248201526e47616d65206e6f742061637469766560881b6044820152606401610563565b8484606582815481106111a6576111a6613db5565b90600052602060002090600902016007015481106112015760405162461bcd60e51b8152602060048201526018602482015277092dcecc2d8d2c840e8deeae4dcc2dacadce840d2dcc8caf60431b6044820152606401610563565b61120d87878787612a76565b50505050505050565b6033546001600160a01b0316331461125e5760405162461bcd60e51b815260206004820181905260248201526000805160206140898339815191526044820152606401610563565b60655481908110801561129857506065818154811061127f5761127f613db5565b600091825260209091206003600990920201015460ff16155b6112d65760405162461bcd60e51b815260206004820152600f60248201526e47616d65206e6f742061637469766560881b6044820152606401610563565b6001606583815481106112eb576112eb613db5565b906000526020600020906009020160030160006101000a81548160ff0219169083151502179055506065828154811061132657611326613db5565b906000526020600020906009020160010160009054906101000a90046001600160a01b03166001600160a01b031682336001600160a01b03167f87c3cbb8e83984547de922e1b60d2b0e975685ec4e9aca63d4eb28317d4da5606065868154811061139357611393613db5565b9060005260206000209060090201600001606587815481106113b7576113b7613db5565b9060005260206000209060090201600201546040516113d7929190613e99565b60405180910390a45050565b6033546001600160a01b0316331461142b5760405162461bcd60e51b815260206004820181905260248201526000805160206140898339815191526044820152606401610563565b60655483908110801561146557506065818154811061144c5761144c613db5565b600091825260209091206003600990920201015460ff16155b6114a35760405162461bcd60e51b815260206004820152600f60248201526e47616d65206e6f742061637469766560881b6044820152606401610563565b6114ae848484612e0f565b50505050565b606554600090829081106114ff5760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610563565b6065838154811061151257611512613db5565b600091825260209091206009909102016003015460ff169392505050565b6065546000908390811061157b5760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610563565b83836065828154811061159057611590613db5565b90600052602060002090600902016007015481106115eb5760405162461bcd60e51b8152602060048201526018602482015277092dcecc2d8d2c840e8deeae4dcc2dacadce840d2dcc8caf60431b6044820152606401610563565b606586815481106115fe576115fe613db5565b9060005260206000209060090201600601600086815260200190815260200160002060030154935050505092915050565b6033546000906001600160a01b0316331461167a5760405162461bcd60e51b815260206004820181905260248201526000805160206140898339815191526044820152606401610563565b836116c75760405162461bcd60e51b815260206004820152600f60248201527f456d7074792067616d65206e616d6500000000000000000000000000000000006044820152606401610563565b6001600160a01b03831661171d5760405162461bcd60e51b815260206004820152601960248201527f5a65726f2067616d652063726561746f722061646472657373000000000000006044820152606401610563565b6103e88260685461172e9190613de1565b111561177c5760405162461bcd60e51b815260206004820152601e60248201527f457863656564656420626173652067616d652063726561746f722066656500006044820152606401610563565b506065805460018101808355600083905290918691869190849081106117a4576117a4613db5565b600091825260209091206117be93600990920201916135f2565b5082606582815481106117d3576117d3613db5565b906000526020600020906009020160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550816065828154811061181c5761181c613db5565b906000526020600020906009020160020181905550826001600160a01b031681336001600160a01b03167f871f6ba5dcb0133e30d68dd1c00225621e34ea9882970c2578c9136a4113d04f88888760405161187993929190613ebb565b60405180910390a4949350505050565b606554600090839081106118d45760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610563565b606584815481106118e7576118e7613db5565b600091825260208083206001600160a01b03871684526008600990930201919091019052604090205460ff1691505092915050565b6033546000906001600160a01b031633146119675760405162461bcd60e51b815260206004820181905260248201526000805160206140898339815191526044820152606401610563565b6065548690811080156119a157506065818154811061198857611988613db5565b600091825260209091206003600990920201015460ff16155b6119df5760405162461bcd60e51b815260206004820152600f60248201526e47616d65206e6f742061637469766560881b6044820152606401610563565b611a238787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525089925088915061278a9050565b979650505050505050565b6033546001600160a01b03163314611a765760405162461bcd60e51b815260206004820181905260248201526000805160206140898339815191526044820152606401610563565b6001600160a01b038216611ad75760405162461bcd60e51b815260206004820152602260248201527f5a65726f20746f75726e616d656e74206372656174696f6e2066656520746f6b60448201526132b760f11b6064820152608401610563565b60008111611b275760405162461bcd60e51b815260206004820152601c60248201527f5a65726f20746f75726e616d656e74206372656174696f6e20666565000000006044820152606401610563565b606954606a5460408051918252602082018490526001600160a01b0385811693169133917f45bc4d0779d14a1aad1c23a7c7276ca222ceb0f53ce9ec76d88470974674a58f910160405180910390a4606980546001600160a01b0319166001600160a01b039390931692909217909155606a55565b60655460009082908110611be75760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610563565b60658381548110611bfa57611bfa613db5565b60009182526020909120600990910201600101546001600160a01b03169392505050565b6065546000908c9081108015611c5b575060658181548110611c4257611c42613db5565b600091825260209091206003600990920201015460ff16155b611c995760405162461bcd60e51b815260206004820152600f60248201526e47616d65206e6f742061637469766560881b6044820152606401610563565b606754606a54606954611cbd926001600160a01b03918216923392909116906131be565b611d018d8d8d8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508f92508e915061278a9050565b9150611d1f8d83611d1560208c018c613cbb565b8b60200135612a76565b60658d81548110611d3257611d32613db5565b90600052602060002090600902016008016000896000016020810190611d589190613cbb565b6001600160a01b0316815260208101919091526040016000205460ff16158015611d86575060008860200135115b15611da357611da38d611d9c60208b018b613cbb565b6001612e0f565b60658d81548110611db657611db6613db5565b90600052602060002090600902016008016000886000016020810190611ddc9190613cbb565b6001600160a01b0316815260208101919091526040016000205460ff16158015611e0a575060008760200135115b15611e2057611e208d611d9c60208a018a613cbb565b602087013515611f5357606660009054906101000a90046001600160a01b03166001600160a01b0316638d374f256040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea19190613ef4565b6001600160a01b0316631de6ba17338f85611ebf60208d018d613cbb565b60405160e086901b7fffffffff000000000000000000000000000000000000000000000000000000001681526001600160a01b03948516600482015260248101939093526044830191909152909116606482015260208a0135608482015260a401600060405180830381600087803b158015611f3a57600080fd5b505af1158015611f4e573d6000803e3d6000fd5b505050505b846102d11480611f64575084610483145b156120a85760658d81548110611f7c57611f7c613db5565b600091825260208083206001600160a01b038a1684526008600990930201919091019052604090205460ff16158015611fb6575060008351115b15611fc757611fc78d876001612e0f565b606660009054906101000a90046001600160a01b03166001600160a01b0316638d374f256040518163ffffffff1660e01b8152600401602060405180830381865afa15801561201a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061203e9190613ef4565b6001600160a01b031663b3a833b8338f858a8a8a8a6040518863ffffffff1660e01b81526004016120759796959493929190613f4c565b600060405180830381600087803b15801561208f57600080fd5b505af11580156120a3573d6000803e3d6000fd5b505050505b509b9a5050505050505050505050565b606554600090829081106121035760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610563565b6065838154811061211657612116613db5565b906000526020600020906009020160020154915050919050565b6033546001600160a01b031633146121785760405162461bcd60e51b815260206004820181905260248201526000805160206140898339815191526044820152606401610563565b6001600160a01b0381166121f45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610563565b6121fd8161316c565b50565b6065546060908290811061224b5760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610563565b6065838154811061225e5761225e613db5565b9060005260206000209060090201600001805461227a90613d80565b80601f01602080910402602001604051908101604052809291908181526020018280546122a690613d80565b80156122f35780601f106122c8576101008083540402835291602001916122f3565b820191906000526020600020905b8154815290600101906020018083116122d657829003601f168201915b5050505050915050919050565b6065546000908390811061234b5760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610563565b83836065828154811061236057612360613db5565b90600052602060002090600902016007015481106123bb5760405162461bcd60e51b8152602060048201526018602482015277092dcecc2d8d2c840e8deeae4dcc2dacadce840d2dcc8caf60431b6044820152606401610563565b606586815481106123ce576123ce613db5565b60009182526020808320888452600660099093020191909101905260409020600101546001600160a01b0316935050505092915050565b60606065828154811061241a5761241a613db5565b906000526020600020906009020160050180548060200260200160405190810160405280929190818152602001828054801561247f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612461575b50505050509050919050565b600054610100900460ff166124a65760005460ff16156124aa565b303b155b61251c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610563565b600054610100900460ff1615801561253e576000805461ffff19166101011790555b61254661322d565b6001600160a01b03861661259c5760405162461bcd60e51b815260206004820152601560248201527f5a65726f206164647265737320726567697374727900000000000000000000006044820152606401610563565b6001600160a01b0383166125f25760405162461bcd60e51b815260206004820152601960248201527f5a65726f20746f75726e616d656e742066656520746f6b656e000000000000006044820152606401610563565b6001600160a01b038516151580612607575083155b6126535760405162461bcd60e51b815260206004820152601560248201527f46656520726563697069656e74206e6f742073657400000000000000000000006044820152606401610563565b6103e88411156126a55760405162461bcd60e51b815260206004820152601560248201527f506c6174666f726d2066656520657863656564656400000000000000000000006044820152606401610563565b606680546001600160a01b038089166001600160a01b0319928316179092556067805488841690831617905560688690556069805492861692909116919091179055606a82905580156126fe576000805461ff00191690555b505050505050565b60606065828154811061271b5761271b613db5565b906000526020600020906009020160040180548060200260200160405190810160405280929190818152602001828054801561247f576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116124615750505050509050919050565b600080836127be57606586815481106127a5576127a5613db5565b90600052602060002090600902016002015490506127c1565b50825b80606587815481106127d5576127d5613db5565b90600052602060002090600902016002015411156128355760405162461bcd60e51b815260206004820152601d60248201527f4c6f772067616d652063726561746f72206665652070726f706f7365640000006044820152606401610563565b6103e883826068546128479190613de1565b6128519190613de1565b111561289f5760405162461bcd60e51b815260206004820152600d60248201527f45786365656465642066656573000000000000000000000000000000000000006044820152606401610563565b606586815481106128b2576128b2613db5565b90600052602060002090600902016007015491506001606587815481106128db576128db613db5565b906000526020600020906009020160070160008282546128fb9190613de1565b92505081905550846065878154811061291657612916613db5565b90600052602060002090600902016006016000848152602001908152602001600020600001908051906020019061294e929190613676565b50336065878154811061296357612963613db5565b9060005260206000209060090201600601600084815260200190815260200160002060010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080606587815481106129c0576129c0613db5565b906000526020600020906009020160060160008481526020019081526020016000206003018190555082606587815481106129fd576129fd613db5565b90600052602060002090600902016006016000848152602001908152602001600020600201819055508186336001600160a01b03167f5b1600316d8d2966d4cad163e656448a5622202016ec8b306efe11d70fa58d51888588604051612a6593929190613faa565b60405180910390a450949350505050565b8284336001600160a01b03167fa5c159e7b999109ecb53422b7b9c90ccbadb6ed8896d2e239257d284ce6d57aa60658881548110612ab657612ab6613db5565b906000526020600020906009020160060160008881526020019081526020016000206000018660658a81548110612aef57612aef613db5565b600091825260208083208c8452600660099093020191909101815260408083206001600160a01b038c16845260040190915290819020549051612b36939291908990613fcf565b60405180910390a48015612be65760658481548110612b5757612b57613db5565b60009182526020808320868452600660099093020191909101815260408083206001600160a01b0386168452600401909152902054612be15760658481548110612ba357612ba3613db5565b60009182526020808320600992909202909101600501805460018101825590835291200180546001600160a01b0319166001600160a01b0384161790555b612dbe565b60005b60658581548110612bfc57612bfc613db5565b906000526020600020906009020160050180549050811015612dbc5760658581548110612c2b57612c2b613db5565b90600052602060002090600902016005018181548110612c4d57612c4d613db5565b6000918252602090912001546001600160a01b0384811691161415612daa5760658581548110612c7f57612c7f613db5565b9060005260206000209060090201600501600160658781548110612ca557612ca5613db5565b906000526020600020906009020160050180549050612cc49190614007565b81548110612cd457612cd4613db5565b600091825260209091200154606580546001600160a01b039092169187908110612d0057612d00613db5565b90600052602060002090600902016005018281548110612d2257612d22613db5565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060658581548110612d6357612d63613db5565b9060005260206000209060090201600501805480612d8357612d8361401e565b600082815260209020810160001990810180546001600160a01b0319169055019055612dbc565b80612db481614034565b915050612be9565b505b8060658581548110612dd257612dd2613db5565b600091825260208083209683526006600990920290960101855260408082206001600160a01b039095168252600490940190945291909220555050565b816001600160a01b031683336001600160a01b03167f55c3f1ffae9780d4a4ce8073352d34fea806bb40540f99c3e32abaac63de3b1b60658781548110612e5857612e58613db5565b600091825260208083206001600160a01b038a168452600992909202909101600801815260409182902054825160ff90911615158152871515918101919091520160405180910390a48015612f405760658381548110612eba57612eba613db5565b600091825260208083206001600160a01b03861684526008600990930201919091019052604090205460ff16612f3b5760658381548110612efd57612efd613db5565b60009182526020808320600992909202909101600401805460018101825590835291200180546001600160a01b0319166001600160a01b0384161790555b613118565b60005b60658481548110612f5657612f56613db5565b9060005260206000209060090201600401805490508110156131165760658481548110612f8557612f85613db5565b90600052602060002090600902016004018181548110612fa757612fa7613db5565b6000918252602090912001546001600160a01b03848116911614156131045760658481548110612fd957612fd9613db5565b9060005260206000209060090201600401600160658681548110612fff57612fff613db5565b90600052602060002090600902016004018054905061301e9190614007565b8154811061302e5761302e613db5565b600091825260209091200154606580546001600160a01b03909216918690811061305a5761305a613db5565b9060005260206000209060090201600401828154811061307c5761307c613db5565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550606584815481106130bd576130bd613db5565b90600052602060002090600902016004018054806130dd576130dd61401e565b600082815260209020810160001990810180546001600160a01b0319169055019055613116565b8061310e81614034565b915050612f43565b505b806065848154811061312c5761312c613db5565b600091825260208083206001600160a01b03909616835260086009909202909501019093526040909220805492151560ff19909316929092179091555050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b1790526114ae9085906132a8565b600054610100900460ff166132985760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610563565b6132a0613392565b6110cf6133fd565b60006132fd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166134719092919063ffffffff16565b80519091501561338d578080602001905181019061331b919061404f565b61338d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610563565b505050565b600054610100900460ff166110cf5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610563565b600054610100900460ff166134685760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610563565b6110cf3361316c565b6060613480848460008561348a565b90505b9392505050565b6060824710156135025760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610563565b843b6135505760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610563565b600080866001600160a01b0316858760405161356c919061406c565b60006040518083038185875af1925050503d80600081146135a9576040519150601f19603f3d011682016040523d82523d6000602084013e6135ae565b606091505b5091509150611a23828286606083156135c8575081613483565b8251156135d85782518084602001fd5b8160405162461bcd60e51b8152600401610563919061388c565b8280546135fe90613d80565b90600052602060002090601f0160209004810192826136205760008555613666565b82601f106136395782800160ff19823516178555613666565b82800160010185558215613666579182015b8281111561366657823582559160200191906001019061364b565b506136729291506136ea565b5090565b82805461368290613d80565b90600052602060002090601f0160209004810192826136a45760008555613666565b82601f106136bd57805160ff1916838001178555613666565b82800160010185558215613666579182015b828111156136665782518255916020019190600101906136cf565b5b8082111561367257600081556001016136eb565b6001600160a01b03811681146121fd57600080fd5b803561371f816136ff565b919050565b6000806040838503121561373757600080fd5b8235613742816136ff565b946020939093013593505050565b60006020828403121561376257600080fd5b5035919050565b60005b8381101561378457818101518382015260200161376c565b838111156114ae5750506000910152565b600081518084526137ad816020860160208601613769565b601f01601f19169290920160200192915050565b60a0815260006137d460a0830188613795565b6001600160a01b039690961660208301525060408101939093529015156060830152608090910152919050565b6000806040838503121561381457600080fd5b50508035926020909101359150565b60008060006060848603121561383857600080fd5b83359250602084013591506040840135613851816136ff565b809150509250925092565b6000806040838503121561386f57600080fd5b823591506020830135613881816136ff565b809150509250929050565b6020815260006134836020830184613795565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156138de576138de61389f565b604052919050565b600060408284031215610bf957600080fd5b60008060008060008060e0878903121561391157600080fd5b8635955060208088013567ffffffffffffffff8082111561393157600080fd5b818a0191508a601f83011261394557600080fd5b8135818111156139575761395761389f565b613969601f8201601f191685016138b5565b91508082528b8482850101111561397f57600080fd5b808484018584013760008482840101525080975050505060408701359350606087013592506139b188608089016138e6565b91506139bf60c08801613714565b90509295509295509295565b600080600080608085870312156139e157600080fd5b843593506020850135925060408501356139fa816136ff565b9396929550929360600135925050565b80151581146121fd57600080fd5b600080600060608486031215613a2d57600080fd5b833592506020840135613a3f816136ff565b9150604084013561385181613a0a565b60008083601f840112613a6157600080fd5b50813567ffffffffffffffff811115613a7957600080fd5b602083019150836020828501011115613a9157600080fd5b9250929050565b60008060008060608587031215613aae57600080fd5b843567ffffffffffffffff811115613ac557600080fd5b613ad187828801613a4f565b9095509350506020850135613ae5816136ff565b9396929550929360400135925050565b600080600080600060808688031215613b0d57600080fd5b85359450602086013567ffffffffffffffff811115613b2b57600080fd5b613b3788828901613a4f565b9699909850959660408101359660609091013595509350505050565b600082601f830112613b6457600080fd5b8135602067ffffffffffffffff821115613b8057613b8061389f565b8160051b613b8f8282016138b5565b9283528481018201928281019087851115613ba957600080fd5b83870192505b84831015611a2357823582529183019190830190613baf565b60008060008060008060008060008060006101808c8e031215613bea57600080fd5b8b359a5067ffffffffffffffff8060208e01351115613c0857600080fd5b613c188e60208f01358f01613a4f565b909b50995060408d0135985060608d01359750613c388e60808f016138e6565b9650613c478e60c08f016138e6565b9550613c566101008e01613714565b94506101208d01359350806101408e01351115613c7257600080fd5b613c838e6101408f01358f01613b53565b9250806101608e01351115613c9757600080fd5b50613ca98d6101608e01358e01613b53565b90509295989b509295989b9093969950565b600060208284031215613ccd57600080fd5b8135613483816136ff565b6020808252825182820181905260009190848201906040850190845b81811015613d195783516001600160a01b031683529284019291840191600101613cf4565b50909695505050505050565b600080600080600060a08688031215613d3d57600080fd5b8535613d48816136ff565b94506020860135613d58816136ff565b9350604086013592506060860135613d6f816136ff565b949793965091946080013592915050565b600181811c90821680613d9457607f821691505b60208210811415610bf957634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115613df457613df4613dcb565b500190565b8054600090600181811c9080831680613e1357607f831692505b6020808410821415613e3557634e487b7160e01b600052602260045260246000fd5b83885260208801828015613e505760018114613e6157613e8c565b60ff19871682528282019750613e8c565b60008981526020902060005b87811015613e8657815484820152908601908401613e6d565b83019850505b5050505050505092915050565b604081526000613eac6040830185613df9565b90508260208301529392505050565b604081528260408201528284606083013760006060848301015260006060601f19601f8601168301019050826020830152949350505050565b600060208284031215613f0657600080fd5b8151613483816136ff565b600081518084526020808501945080840160005b83811015613f4157815187529582019590820190600101613f25565b509495945050505050565b60006001600160a01b03808a16835288602084015287604084015280871660608401525084608083015260e060a0830152613f8a60e0830185613f11565b82810360c0840152613f9c8185613f11565b9a9950505050505050505050565b606081526000613fbd6060830186613795565b60208301949094525060400152919050565b608081526000613fe26080830187613df9565b6001600160a01b03959095166020830152506040810192909252606090910152919050565b60008282101561401957614019613dcb565b500390565b634e487b7160e01b600052603160045260246000fd5b600060001982141561404857614048613dcb565b5060010190565b60006020828403121561406157600080fd5b815161348381613a0a565b6000825161407e818460208701613769565b919091019291505056fe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220b1900f1b11dfa5796934ab52673799c70f39a165763a68d10106cd90e70488cd64736f6c634300080b0033",
  "devdoc": {
    "author": "David Lee",
    "kind": "dev",
    "methods": {
      "addGame(string,address,uint256)": {
        "details": "Base game creator fee is the minimum fee vaule that the game creator should be rewarded from the tournamnet of the gameWhen creating the tournament of the game, the game creator fee can be proposed by the tournament creatorbut the proposed value can't be less than the base oneIf the proposed game creator fee is 0, the base game creator fee will be applied",
        "params": {
          "_baseGameCreatorFee": "Base game creator fee",
          "_gameCreator": "Game creator address",
          "_gameName": "Game name to add"
        }
      },
      "createTournamentByDAO(uint256,string,uint256,uint256)": {
        "details": "Only ownerIf the proposed game creaetor fee is 0, the base game creator fee is appliedThe prize pool for the tournament that the owner created is initialized on Oparcade contract",
        "params": {
          "_gid": "Game ID",
          "_proposedGameCreatorFee": "Proposed game creator fee",
          "_tournamentCreatorFee": "Tournament creator fee"
        },
        "returns": {
          "tid": "Tournament ID created"
        }
      },
      "createTournamentByDAOWithTokens(uint256,string,uint256,uint256,(address,uint256),address)": {
        "details": "Only ownerIf the proposed game creaetor fee is 0, the base game creator fee is appliedThe prize pool for the tournament that the owner created is initialized on Oparcade contract",
        "params": {
          "_depositToken": "Token to allow/disallow the deposit",
          "_distributionTokenAddress": "Distribution token address to be set to active",
          "_gid": "Game ID",
          "_proposedGameCreatorFee": "Proposed game creator fee",
          "_tournamentCreatorFee": "Tournament creator fee"
        },
        "returns": {
          "tid": "Tournament ID created"
        }
      },
      "createTournamentByUser(uint256,string,uint256,uint256,(address,uint256),(address,uint256),address,uint256,uint256[],uint256[])": {
        "details": "Anyone can create the tournament and initialize the prize pool with tokens and NFTsTournament creator should set all params necessary for the tournament in 1 tx andthe params set is immutable. It will be prevent the fraud tournament is createdTournament creator should pay fees to create the tournamentand the fee token address and fee token amount are set by the ownerIf the proposed game creaetor fee is 0, the base game creator fee is appliedNFT type to initialize the prize pool should be either 721 or 1155",
        "params": {
          "_amountsToAddPrizePool": "NFT token amount list to initialize the prize pool",
          "_depositToken": "Deposit token (address and amount) for playing the tournament",
          "_gid": "Game ID",
          "_nftAddressToAddPrizePool": "NFT address to initialize the prize pool",
          "_nftTypeToAddPrizePool": "NFT type to initialize the prize pool",
          "_proposedGameCreatorFee": "Proposed game creator fee",
          "_tokenIdsToAddPrizePool": "NFT token Id list to initialize the prize pool",
          "_tokenToAddPrizePool": "Token (address and amount) to initialize the prize pool",
          "_tournamentCreatorFee": "Tournament creator fee"
        },
        "returns": {
          "tid": "Tournament ID created"
        }
      },
      "gameCount()": {
        "returns": {
          "_0": "(uint256) Amount of games created"
        }
      },
      "getAppliedGameCreatorFee(uint256,uint256)": {
        "params": {
          "_gid": "Game ID",
          "_tid": "Tournament ID"
        },
        "returns": {
          "_0": "(string) Game applied game creator fee of a tournament"
        }
      },
      "getDepositTokenAmount(uint256,uint256,address)": {
        "params": {
          "_gid": "Game ID",
          "_tid": "Tournament ID",
          "_tokenAddress": "token address"
        },
        "returns": {
          "_0": "(uint256) Tournament deposit token amount"
        }
      },
      "getDepositTokenList(uint256)": {
        "params": {
          "": "(address[]) Deposit token list of the game",
          "_gid": "Game ID"
        }
      },
      "getDistributableTokenList(uint256)": {
        "params": {
          "": "(address[]) Distributable token list of the game",
          "_gid": "Game ID"
        }
      },
      "getGameBaseCreatorFee(uint256)": {
        "params": {
          "_gid": "Game ID"
        },
        "returns": {
          "_0": "(uint256) Game creator fee"
        }
      },
      "getGameCreatorAddress(uint256)": {
        "params": {
          "_gid": "Game ID"
        },
        "returns": {
          "_0": "(string) Game creator address"
        }
      },
      "getGameName(uint256)": {
        "params": {
          "_gid": "Game ID"
        },
        "returns": {
          "_0": "(string) Game name"
        }
      },
      "getTournamentCount(uint256)": {
        "params": {
          "_gid": "Game ID"
        },
        "returns": {
          "_0": "(uint256) Number of the tournament"
        }
      },
      "getTournamentCreator(uint256,uint256)": {
        "params": {
          "_gid": "Game ID",
          "_tid": "Tournament ID"
        },
        "returns": {
          "_0": "(address) Tournament creator address"
        }
      },
      "getTournamentCreatorFee(uint256,uint256)": {
        "params": {
          "_gid": "Game ID",
          "_tid": "Tournament ID"
        },
        "returns": {
          "_0": "(uint256) Tournament creator fee"
        }
      },
      "getTournamentName(uint256,uint256)": {
        "params": {
          "_gid": "Game ID",
          "_tid": "Tournament ID"
        },
        "returns": {
          "_0": "(string) Tournament name"
        }
      },
      "isDistributable(uint256,address)": {
        "params": {
          "_gid": "Game ID",
          "_tokenAddress": "token address"
        },
        "returns": {
          "_0": "(uint256) Is token distributable"
        }
      },
      "isGameDeprecated(uint256)": {
        "params": {
          "_gid": "Game ID"
        },
        "returns": {
          "_0": "(bool) Is deprecated"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeGame(uint256)": {
        "details": "Game is not removed from the games array, just set it deprecated",
        "params": {
          "_gid": "Game ID"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateBaseGameCreatorFee(uint256,uint256)": {
        "details": "Tournament creator fee is the royality that will be transferred to the tournament creator addressTournament creator can propose the game creator fee when creating the tournamentbut it can't be less than the base game creator fee",
        "params": {
          "_baseGameCreatorFee": "Base game creator fee",
          "_gid": "Game ID"
        }
      },
      "updateDepositTokenAmount(uint256,uint256,address,uint256)": {
        "details": "Only ownerOnly tokens with an amount greater than zero is valid for the deposit",
        "params": {
          "_amount": "Token amount",
          "_gid": "Game ID",
          "_tid": "Tournament ID",
          "_token": "Token address to allow/disallow the deposit"
        }
      },
      "updateDistributableTokenAddress(uint256,address,bool)": {
        "details": "Only owner",
        "params": {
          "_gid": "Game ID",
          "_isDistributable": "true: distributable false: not distributable",
          "_token": "Token address to allow/disallow the deposit"
        }
      },
      "updateGameCreator(uint256,address)": {
        "params": {
          "_gameCreator": "Game creator address",
          "_gid": "Game ID"
        }
      },
      "updatePlatformFee(address,uint256)": {
        "details": "Only ownerAllow zero recipient address only of fee is also zero",
        "params": {
          "_feeRecipient": "Platform fee recipient address",
          "_platformFee": "platform fee"
        }
      },
      "updateTournamentCreationFee(address,uint256)": {
        "details": "Only ownerTournament creator should pay this fee when creating the tournament",
        "params": {
          "_tournamentCreationFeeAmount": "Fee token amount",
          "_tournamentCreationFeeToken": "Fee token address"
        }
      }
    },
    "stateVariables": {
      "MAX_PERMILLAGE": {
        "details": "Max fee constant in permillage (percentage * 10)"
      },
      "addressRegistry": {
        "details": "AddressRegistry"
      },
      "feeRecipient": {
        "details": "Platform fee recipient"
      },
      "games": {
        "details": "Game name array"
      },
      "platformFee": {
        "details": "Platform fee"
      },
      "tournamentCreationFeeAmount": {
        "details": "Tournament creation fee token amount"
      },
      "tournamentCreationFeeToken": {
        "details": "Tournament creation fee token address"
      }
    },
    "title": "GameRegistry",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addGame(string,address,uint256)": {
        "notice": "Add the new game"
      },
      "createTournamentByDAO(uint256,string,uint256,uint256)": {
        "notice": "Create the tournament"
      },
      "createTournamentByDAOWithTokens(uint256,string,uint256,uint256,(address,uint256),address)": {
        "notice": "Create the tournament and set tokens"
      },
      "createTournamentByUser(uint256,string,uint256,uint256,(address,uint256),(address,uint256),address,uint256,uint256[],uint256[])": {
        "notice": "Create the tournament"
      },
      "gameCount()": {
        "notice": "Returns the number of games created"
      },
      "getAppliedGameCreatorFee(uint256,uint256)": {
        "notice": "Returns the applied game creator fee of the specific tournament"
      },
      "getDepositTokenAmount(uint256,uint256,address)": {
        "notice": "Returns the deposit token amount of the specific tournament"
      },
      "getDepositTokenList(uint256)": {
        "notice": "Returns the deposit token list of the game"
      },
      "getDistributableTokenList(uint256)": {
        "notice": "Returns the distributable token list of the game"
      },
      "getGameBaseCreatorFee(uint256)": {
        "notice": "Returns the game creator fee"
      },
      "getGameCreatorAddress(uint256)": {
        "notice": "Returns the game creator address"
      },
      "getGameName(uint256)": {
        "notice": "Returns the game name"
      },
      "getTournamentCount(uint256)": {
        "notice": "Returns the number of the tournaments of the specific game"
      },
      "getTournamentCreator(uint256,uint256)": {
        "notice": "Returns the tournament creator address of the specific tournament"
      },
      "getTournamentCreatorFee(uint256,uint256)": {
        "notice": "Returns the tournament creator fee of the specific tournament"
      },
      "getTournamentName(uint256,uint256)": {
        "notice": "Returns the tournament name of the specific tournament"
      },
      "isDistributable(uint256,address)": {
        "notice": "Returns true if the token of a specific game is distributable, false otherwise"
      },
      "isGameDeprecated(uint256)": {
        "notice": "Returns a boolean indicating if a specific game is deprecated"
      },
      "removeGame(uint256)": {
        "notice": "Remove the exising game"
      },
      "updateBaseGameCreatorFee(uint256,uint256)": {
        "notice": "Update the base game creator fee"
      },
      "updateDepositTokenAmount(uint256,uint256,address,uint256)": {
        "notice": "Update deposit token amount"
      },
      "updateDistributableTokenAddress(uint256,address,bool)": {
        "notice": "Update distributable token address"
      },
      "updateGameCreator(uint256,address)": {
        "notice": "Update the game creator"
      },
      "updatePlatformFee(address,uint256)": {
        "notice": "Update the platform fee"
      },
      "updateTournamentCreationFee(address,uint256)": {
        "notice": "Update the tournament creation fee"
      }
    },
    "notice": "This contract stores all info related to the game and tournament creation",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 132,
        "contract": "contracts/GameRegistry.sol:GameRegistry",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 135,
        "contract": "contracts/GameRegistry.sol:GameRegistry",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1444,
        "contract": "contracts/GameRegistry.sol:GameRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/GameRegistry.sol:GameRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 124,
        "contract": "contracts/GameRegistry.sol:GameRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6476,
        "contract": "contracts/GameRegistry.sol:GameRegistry",
        "label": "games",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_struct(Game)6471_storage)dyn_storage"
      },
      {
        "astId": 6480,
        "contract": "contracts/GameRegistry.sol:GameRegistry",
        "label": "addressRegistry",
        "offset": 0,
        "slot": "102",
        "type": "t_contract(IAddressRegistry)9611"
      },
      {
        "astId": 6483,
        "contract": "contracts/GameRegistry.sol:GameRegistry",
        "label": "feeRecipient",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      },
      {
        "astId": 6486,
        "contract": "contracts/GameRegistry.sol:GameRegistry",
        "label": "platformFee",
        "offset": 0,
        "slot": "104",
        "type": "t_uint256"
      },
      {
        "astId": 6489,
        "contract": "contracts/GameRegistry.sol:GameRegistry",
        "label": "tournamentCreationFeeToken",
        "offset": 0,
        "slot": "105",
        "type": "t_address"
      },
      {
        "astId": 6492,
        "contract": "contracts/GameRegistry.sol:GameRegistry",
        "label": "tournamentCreationFeeAmount",
        "offset": 0,
        "slot": "106",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Game)6471_storage)dyn_storage": {
        "base": "t_struct(Game)6471_storage",
        "encoding": "dynamic_array",
        "label": "struct GameRegistry.Game[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAddressRegistry)9611": {
        "encoding": "inplace",
        "label": "contract IAddressRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Tournament)6444_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GameRegistry.Tournament)",
        "numberOfBytes": "32",
        "value": "t_struct(Tournament)6444_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Game)6471_storage": {
        "encoding": "inplace",
        "label": "struct GameRegistry.Game",
        "members": [
          {
            "astId": 6446,
            "contract": "contracts/GameRegistry.sol:GameRegistry",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 6448,
            "contract": "contracts/GameRegistry.sol:GameRegistry",
            "label": "creatorAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6450,
            "contract": "contracts/GameRegistry.sol:GameRegistry",
            "label": "baseCreatorFee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6452,
            "contract": "contracts/GameRegistry.sol:GameRegistry",
            "label": "isDeprecated",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 6455,
            "contract": "contracts/GameRegistry.sol:GameRegistry",
            "label": "distributableTokenList",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 6458,
            "contract": "contracts/GameRegistry.sol:GameRegistry",
            "label": "depositTokenList",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 6463,
            "contract": "contracts/GameRegistry.sol:GameRegistry",
            "label": "tournaments",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_uint256,t_struct(Tournament)6444_storage)"
          },
          {
            "astId": 6465,
            "contract": "contracts/GameRegistry.sol:GameRegistry",
            "label": "tournamentsCount",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 6470,
            "contract": "contracts/GameRegistry.sol:GameRegistry",
            "label": "distributable",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(Tournament)6444_storage": {
        "encoding": "inplace",
        "label": "struct GameRegistry.Tournament",
        "members": [
          {
            "astId": 6432,
            "contract": "contracts/GameRegistry.sol:GameRegistry",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 6434,
            "contract": "contracts/GameRegistry.sol:GameRegistry",
            "label": "creatorAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6436,
            "contract": "contracts/GameRegistry.sol:GameRegistry",
            "label": "creatorFee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6438,
            "contract": "contracts/GameRegistry.sol:GameRegistry",
            "label": "appliedGameCreatorFee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6443,
            "contract": "contracts/GameRegistry.sol:GameRegistry",
            "label": "depositTokenAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}