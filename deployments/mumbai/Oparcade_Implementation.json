{
  "address": "0x8f0E87d1B0106B2C213E5C7b7511c7718F6e07bc",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "NFTPrizeDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "winners",
          "type": "address[]"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "NFTPrizeDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "NFTPrizeWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PrizeDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "winners",
          "type": "address[]"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "PrizeDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PrizeWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UserDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "addressRegistry",
      "outputs": [
        {
          "internalType": "contract IAddressRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftType",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "depositNFTPrize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositPrize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tid",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_winners",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftType",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "distributeNFTPrize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tid",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_winners",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "distributePrize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addressRegistry",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalNFTPrizeDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalNFTPrizeDistribution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalPrizeDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalPrizeDistribution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalPrizeFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalUserDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalWithdrawAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftType",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawNFTPrize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawPrize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x6b0e12e3679e195ebb5248efb9575a3cffc1863d7d85cc1684f09a942cb4ae7c",
  "receipt": {
    "to": null,
    "from": "0x8f96BFc80BC3B7D881767253EDb7A76429B7EC6B",
    "contractAddress": "0x8f0E87d1B0106B2C213E5C7b7511c7718F6e07bc",
    "transactionIndex": 0,
    "gasUsed": "4133879",
    "logsBloom": "0x
    "blockHash": "0x0987e4578acb5c6fa69b853562b0cac27ae52841f30a98467f3bfe5573b85ab5",
    "transactionHash": "0x6b0e12e3679e195ebb5248efb9575a3cffc1863d7d85cc1684f09a942cb4ae7c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 26786100,
        "transactionHash": "0x6b0e12e3679e195ebb5248efb9575a3cffc1863d7d85cc1684f09a942cb4ae7c",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000008f96bfc80bc3b7d881767253edb7a76429b7ec6b",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000024b75a4502838c600000000000000000000000000000000000000000000000004c7e2ea9cdfe38d000000000000000000000000000000000000000000000ec68e6bb64ba8214ce6000000000000000000000000000000000000000000000000027c6d464cb7aac7000000000000000000000000000000000000000000000ec690b72beff84985ac",
        "logIndex": 0,
        "blockHash": "0x0987e4578acb5c6fa69b853562b0cac27ae52841f30a98467f3bfe5573b85ab5"
      }
    ],
    "blockNumber": 26786100,
    "cumulativeGasUsed": "4133879",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "59920b8e96a3b80037a0cc75c09b417f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"NFTPrizeDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"NFTPrizeDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"NFTPrizeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PrizeDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"PrizeDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PrizeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addressRegistry\",\"outputs\":[{\"internalType\":\"contract IAddressRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftType\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"depositNFTPrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositPrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tid\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_winners\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftType\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"distributeNFTPrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tid\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_winners\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"distributePrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressRegistry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalNFTPrizeDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalNFTPrizeDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalPrizeDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalPrizeDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalPrizeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalUserDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalWithdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftType\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawNFTPrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawPrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"David Lee\",\"kind\":\"dev\",\"methods\":{\"deposit(uint256,uint256,address)\":{\"details\":\"Only tokens registered in GameRegistry with an amount greater than zero is valid for the deposit\",\"params\":{\"_gid\":\"Game ID\",\"_tid\":\"Tournament ID\",\"_token\":\"Token address to deposit\"}},\"depositNFTPrize(address,uint256,uint256,address,uint256,uint256[],uint256[])\":{\"details\":\"NFT type should be either 721 or 1155\",\"params\":{\"_amounts\":\"Token amount list\",\"_from\":\"NFT owner address\",\"_gid\":\"Game ID\",\"_nftAddress\":\"NFT address\",\"_nftType\":\"NFT type (721/1155)\",\"_tid\":\"Tournament ID\",\"_tokenIds\":\"Token Id list\"}},\"depositPrize(address,uint256,uint256,address,uint256)\":{\"details\":\"Only tokens which are allowed as a distributable token can be deposited\",\"params\":{\"_amount\":\"Prize amount to deposit\",\"_depositor\":\"Depositor address\",\"_gid\":\"Game ID\",\"_tid\":\"Tournament ID\",\"_token\":\"Prize token address\"}},\"distributeNFTPrize(uint256,uint256,address[],address,uint256,uint256[],uint256[])\":{\"details\":\"Only maintainerNFT type should be either 721 or 1155\",\"params\":{\"_amounts\":\"Token amount list\",\"_gid\":\"Game ID\",\"_nftAddress\":\"NFT address\",\"_nftType\":\"NFT type (721/1155)\",\"_tid\":\"Tournament ID\",\"_tokenIds\":\"Token Id list\",\"_winners\":\"Winners list\"}},\"distributePrize(uint256,uint256,address[],address,uint256[])\":{\"details\":\"Only maintainerThe maximum distributable prize amount is the sum of the users' deposit and the prize that the owner deposited\",\"params\":{\"_amounts\":\"Prize list\",\"_gid\":\"Game ID\",\"_tid\":\"Tournament ID\",\"_token\":\"Prize token address\",\"_winners\":\"Winners list\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Only owner\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Only owner\"},\"withdraw(address[],uint256[],address)\":{\"details\":\"Only owner\",\"params\":{\"_amounts\":\"Token amounts\",\"_beneficiary\":\"Beneficiary address\",\"_tokens\":\"Token addresses\"}},\"withdrawNFTPrize(address,uint256,uint256,address,uint256,uint256[],uint256[])\":{\"details\":\"Only ownerNFT type should be either 721 or 1155\",\"params\":{\"_amounts\":\"Token amount list\",\"_gid\":\"Game ID\",\"_nftAddress\":\"NFT address\",\"_nftType\":\"NFT type (721/1155)\",\"_tid\":\"Tournament ID\",\"_to\":\"NFT receiver address\",\"_tokenIds\":\"Token Id list\"}},\"withdrawPrize(uint256,uint256,address,uint256)\":{\"details\":\"Only owner\",\"params\":{\"_amount\":\"Prize amount to withdraw\",\"_gid\":\"Game ID\",\"_tid\":\"Tournament ID\",\"_token\":\"Prize token address\"}}},\"stateVariables\":{\"addressRegistry\":{\"details\":\"AddressRegistry\"},\"totalNFTPrizeDeposit\":{\"details\":\"Game ID -> Tournament ID -> NFT Address -> Token ID -> Deposit Amount\"},\"totalNFTPrizeDistribution\":{\"details\":\"Game ID -> Tournament ID -> NFT Address -> Token ID -> Distribution Amount\"},\"totalPrizeDeposit\":{\"details\":\"Game ID -> Tournament ID -> Token Address -> Total Prize Deposit Amount\"},\"totalPrizeDistribution\":{\"details\":\"Game ID -> Tournament ID -> Token Address -> Total Prize Distribution Amount excluding Fee\"},\"totalPrizeFee\":{\"details\":\"Game ID -> Tournament ID -> Token Address -> Total Prize Fee Amount\"},\"totalUserDeposit\":{\"details\":\"Game ID -> Tournament ID -> Token Address -> Total User Deposit Amount\"},\"totalWithdrawAmount\":{\"details\":\"Token Address -> Total Withdraw Amount\"}},\"title\":\"Oparcade\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit(uint256,uint256,address)\":{\"notice\":\"Deposit ERC20 tokens from user\"},\"depositNFTPrize(address,uint256,uint256,address,uint256,uint256[],uint256[])\":{\"notice\":\"Deposit NFT prize for the specific game/tournament\"},\"depositPrize(address,uint256,uint256,address,uint256)\":{\"notice\":\"Deposit the prize tokens for the specific game/tournament\"},\"distributeNFTPrize(uint256,uint256,address[],address,uint256,uint256[],uint256[])\":{\"notice\":\"Distribute winners NFT prizes\"},\"distributePrize(uint256,uint256,address[],address,uint256[])\":{\"notice\":\"Distribute winners their prizes\"},\"pause()\":{\"notice\":\"Pause Oparcade\"},\"unpause()\":{\"notice\":\"Resume Oparcade\"},\"withdraw(address[],uint256[],address)\":{\"notice\":\"Withdraw tokens\"},\"withdrawNFTPrize(address,uint256,uint256,address,uint256,uint256[],uint256[])\":{\"notice\":\"Withdraw NFT prize for the specific game/tournament\"},\"withdrawPrize(uint256,uint256,address,uint256)\":{\"notice\":\"Withdraw the prize tokens from the specific game/tournament\"}},\"notice\":\"This contract manages token deposit/distribution from/to the users playing the game/tournament\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Oparcade.sol\":\"Oparcade\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1edf4e6819997d1820aea89eff73d4fdaeff0bb87ff2f2b4cb6ad60bfe5ba63c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155HolderUpgradeable is Initializable, ERC1155ReceiverUpgradeable {\\n    function __ERC1155Holder_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Holder_init_unchained() internal onlyInitializing {\\n    }\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa8a1f16aa62b4d8c9e380057d9c3ee5c992e4a10dccc5650b26e38d4c61287d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\\n    function __ERC1155Receiver_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Receiver_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa1b77d6d0f4591359c42b747a31375f20b0571b5e1fb62652d8184fb10f1d63a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5d3b80a09c746aed89446a14d0e8f5ba5212520360d00a495a2156a7a51497e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721HolderUpgradeable is Initializable, IERC721ReceiverUpgradeable {\\n    function __ERC721Holder_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Holder_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb7f90ab8af7dae0bd4acfa088f9e606ea039110face097ca7c8beef563f71e90\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Oparcade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport \\\"./interfaces/IAddressRegistry.sol\\\";\\nimport \\\"./interfaces/IGameRegistry.sol\\\";\\n\\n/**\\n * @title Oparcade\\n * @notice This contract manages token deposit/distribution from/to the users playing the game/tournament\\n * @author David Lee\\n */\\ncontract Oparcade is\\n  OwnableUpgradeable,\\n  ReentrancyGuardUpgradeable,\\n  PausableUpgradeable,\\n  ERC721HolderUpgradeable,\\n  ERC1155HolderUpgradeable\\n{\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n  event UserDeposited(address by, uint256 indexed gid, uint256 indexed tid, address indexed token, uint256 amount);\\n  event PrizeDistributed(\\n    address by,\\n    address[] winners,\\n    uint256 indexed gid,\\n    uint256 indexed tid,\\n    address indexed token,\\n    uint256[] amounts\\n  );\\n  event NFTPrizeDistributed(\\n    address by,\\n    address[] winners,\\n    uint256 indexed gid,\\n    uint256 indexed tid,\\n    address indexed nftAddress,\\n    uint256 nftType,\\n    uint256[] tokenIds,\\n    uint256[] amounts\\n  );\\n  event PrizeDeposited(\\n    address by,\\n    address depositor,\\n    uint256 indexed gid,\\n    uint256 indexed tid,\\n    address indexed token,\\n    uint256 amount\\n  );\\n  event PrizeWithdrawn(address by, uint256 indexed gid, uint256 indexed tid, address indexed token, uint256 amount);\\n  event NFTPrizeDeposited(\\n    address by,\\n    address from,\\n    uint256 indexed gid,\\n    uint256 indexed tid,\\n    address indexed nftAddress,\\n    uint256 nftType,\\n    uint256[] tokenIds,\\n    uint256[] amounts\\n  );\\n  event NFTPrizeWithdrawn(\\n    address by,\\n    address to,\\n    uint256 indexed gid,\\n    uint256 indexed tid,\\n    address indexed nftAddress,\\n    uint256 nftType,\\n    uint256[] tokenIds,\\n    uint256[] amounts\\n  );\\n  event Withdrawn(address indexed by, address indexed beneficiary, address indexed token, uint256 amount);\\n\\n  bytes4 private constant INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n  bytes4 private constant INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n\\n  /// @dev Game ID -> Tournament ID -> Token Address -> Total User Deposit Amount\\n  mapping(uint256 => mapping(uint256 => mapping(address => uint256))) public totalUserDeposit;\\n\\n  /// @dev Game ID -> Tournament ID -> Token Address -> Total Prize Distribution Amount excluding Fee\\n  mapping(uint256 => mapping(uint256 => mapping(address => uint256))) public totalPrizeDistribution;\\n\\n  /// @dev Game ID -> Tournament ID -> Token Address -> Total Prize Fee Amount\\n  mapping(uint256 => mapping(uint256 => mapping(address => uint256))) public totalPrizeFee;\\n\\n  /// @dev Game ID -> Tournament ID -> NFT Address -> Token ID -> Distribution Amount\\n  mapping(uint256 => mapping(uint256 => mapping(address => mapping(uint256 => uint256))))\\n    public totalNFTPrizeDistribution;\\n\\n  /// @dev Game ID -> Tournament ID -> Token Address -> Total Prize Deposit Amount\\n  mapping(uint256 => mapping(uint256 => mapping(address => uint256))) public totalPrizeDeposit;\\n\\n  /// @dev Game ID -> Tournament ID -> NFT Address -> Token ID -> Deposit Amount\\n  mapping(uint256 => mapping(uint256 => mapping(address => mapping(uint256 => uint256)))) public totalNFTPrizeDeposit;\\n\\n  /// @dev Token Address -> Total Withdraw Amount\\n  mapping(address => uint256) public totalWithdrawAmount;\\n\\n  /// @dev AddressRegistry\\n  IAddressRegistry public addressRegistry;\\n\\n  modifier onlyMaintainer() {\\n    require(msg.sender == addressRegistry.maintainer(), \\\"Only maintainer\\\");\\n    _;\\n  }\\n\\n  receive() external payable {}\\n\\n  function initialize(address _addressRegistry) public initializer {\\n    __Ownable_init();\\n    __ReentrancyGuard_init();\\n    __Pausable_init();\\n    __ERC721Holder_init();\\n    __ERC1155Holder_init();\\n\\n    require(_addressRegistry != address(0), \\\"Invalid AddressRegistry\\\");\\n\\n    // initialize AddressRegistery\\n    addressRegistry = IAddressRegistry(_addressRegistry);\\n  }\\n\\n  /**\\n   * @notice Deposit ERC20 tokens from user\\n   * @dev Only tokens registered in GameRegistry with an amount greater than zero is valid for the deposit\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _token Token address to deposit\\n   */\\n  function deposit(\\n    uint256 _gid,\\n    uint256 _tid,\\n    address _token\\n  ) external whenNotPaused {\\n    // get token amount to deposit\\n    uint256 depositTokenAmount = IGameRegistry(addressRegistry.gameRegistry()).depositTokenAmount(_gid, _tid, _token);\\n\\n    // check if the token address is valid\\n    require(depositTokenAmount > 0, \\\"Invalid deposit token\\\");\\n\\n    // transfer the payment\\n    IERC20Upgradeable(_token).safeTransferFrom(msg.sender, address(this), depositTokenAmount);\\n    totalUserDeposit[_gid][_tid][_token] += depositTokenAmount;\\n\\n    emit UserDeposited(msg.sender, _gid, _tid, _token, depositTokenAmount);\\n  }\\n\\n  /**\\n   * @notice Distribute winners their prizes\\n   * @dev Only maintainer\\n   * @dev The maximum distributable prize amount is the sum of the users' deposit and the prize that the owner deposited\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _winners Winners list\\n   * @param _token Prize token address\\n   * @param _amounts Prize list\\n   */\\n  function distributePrize(\\n    uint256 _gid,\\n    uint256 _tid,\\n    address[] calldata _winners,\\n    address _token,\\n    uint256[] calldata _amounts\\n  ) external whenNotPaused onlyMaintainer {\\n    require(_winners.length == _amounts.length, \\\"Mismatched winners and amounts\\\");\\n\\n    // get gameRegistry\\n    IGameRegistry gameRegistry = IGameRegistry(addressRegistry.gameRegistry());\\n\\n    // check if token is allowed to distribute\\n    require(gameRegistry.distributable(_gid, _token), \\\"Disallowed distribution token\\\");\\n\\n    _transferPayment(_gid, _tid, _winners, _token, _amounts);\\n\\n    // check if the prize amount is not exceeded\\n    require(\\n      totalPrizeDistribution[_gid][_tid][_token] + totalPrizeFee[_gid][_tid][_token] <=\\n        totalPrizeDeposit[_gid][_tid][_token] + totalUserDeposit[_gid][_tid][_token],\\n      \\\"Prize amount exceeded\\\"\\n    );\\n\\n    emit PrizeDistributed(msg.sender, _winners, _gid, _tid, _token, _amounts);\\n  }\\n\\n  function _transferPayment(\\n    uint256 _gid,\\n    uint256 _tid,\\n    address[] calldata _winners,\\n    address _token,\\n    uint256[] calldata _amounts\\n  ) internal {\\n    // get gameRegistry\\n    IGameRegistry gameRegistry = IGameRegistry(addressRegistry.gameRegistry());\\n\\n    // transfer the winners their prizes\\n    uint256 totalPlatformFeeAmount;\\n    uint256 totalGameCreatorFeeAmount;\\n    uint256 totalTournamentCreatorFeeAmount;\\n    for (uint256 i; i < _winners.length; i++) {\\n      // get userAmount\\n      uint256 userAmount = _amounts[i];\\n\\n      {\\n        // calculate the platform fee\\n        uint256 platformFeeAmount = (_amounts[i] * IGameRegistry(addressRegistry.gameRegistry()).platformFee()) / 1000;\\n        totalPlatformFeeAmount += platformFeeAmount;\\n\\n        // update userAmount\\n        userAmount -= platformFeeAmount;\\n      }\\n\\n      {\\n        // calculate gameCreatorFee\\n        uint256 gameCreatorFee = gameRegistry.appliedGameCreatorFees(_gid, _tid);\\n        uint256 gameCreatorFeeAmount = (_amounts[i] * gameCreatorFee) / 1000;\\n        totalGameCreatorFeeAmount += gameCreatorFeeAmount;\\n\\n        // update userAmount\\n        userAmount -= gameCreatorFeeAmount;\\n      }\\n\\n      {\\n        // calculate tournamentCreatorFee\\n        uint256 tournamentCreatorFee = gameRegistry.tournamentCreatorFees(_gid, _tid);\\n        uint256 tournamentCreatorFeeAmount = (_amounts[i] * tournamentCreatorFee) / 1000;\\n        totalTournamentCreatorFeeAmount += tournamentCreatorFeeAmount;\\n\\n        // update userAmount\\n        userAmount -= tournamentCreatorFee;\\n      }\\n\\n      // transfer the prize\\n      totalPrizeDistribution[_gid][_tid][_token] += userAmount;\\n      IERC20Upgradeable(_token).safeTransfer(_winners[i], userAmount);\\n    }\\n\\n    // transfer the fees\\n    totalPrizeFee[_gid][_tid][_token] +=\\n      totalPlatformFeeAmount +\\n      totalGameCreatorFeeAmount +\\n      totalTournamentCreatorFeeAmount;\\n    IERC20Upgradeable(_token).safeTransfer(\\n      IGameRegistry(addressRegistry.gameRegistry()).feeRecipient(),\\n      totalPlatformFeeAmount\\n    );\\n    IERC20Upgradeable(_token).safeTransfer(gameRegistry.gameCreators(_gid), totalPlatformFeeAmount);\\n    IERC20Upgradeable(_token).safeTransfer(gameRegistry.getTournamentCreator(_gid, _tid), totalPlatformFeeAmount);\\n  }\\n\\n  /**\\n   * @notice Distribute winners NFT prizes\\n   * @dev Only maintainer\\n   * @dev NFT type should be either 721 or 1155\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _winners Winners list\\n   * @param _nftAddress NFT address\\n   * @param _nftType NFT type (721/1155)\\n   * @param _tokenIds Token Id list\\n   * @param _amounts Token amount list\\n   */\\n  function distributeNFTPrize(\\n    uint256 _gid,\\n    uint256 _tid,\\n    address[] calldata _winners,\\n    address _nftAddress,\\n    uint256 _nftType,\\n    uint256[] calldata _tokenIds,\\n    uint256[] calldata _amounts\\n  ) external whenNotPaused nonReentrant onlyMaintainer {\\n    // check if token is allowed to distribute\\n    require(\\n      IGameRegistry(addressRegistry.gameRegistry()).distributable(_gid, _nftAddress),\\n      \\\"Disallowed distribution token\\\"\\n    );\\n\\n    require(_nftType == 721 || _nftType == 1155, \\\"Unexpected NFT type\\\");\\n    require(\\n      _winners.length == _tokenIds.length && _tokenIds.length == _amounts.length,\\n      \\\"Mismatched NFT distribution data\\\"\\n    );\\n\\n    uint256 totalAmounts;\\n    if (_nftType == 721) {\\n      require(IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC721), \\\"Unexpected NFT address\\\");\\n\\n      // update totalNFTPrizeDeposit and transfer NFTs to the winners\\n      for (uint256 i; i < _winners.length; i++) {\\n        require(\\n          totalNFTPrizeDeposit[_gid][_tid][_nftAddress][_tokenIds[i]] -\\n            totalNFTPrizeDistribution[_gid][_tid][_nftAddress][_tokenIds[i]] ==\\n            1,\\n          \\\"NFT prize distribution amount exceeded\\\"\\n        );\\n\\n        totalNFTPrizeDistribution[_gid][_tid][_nftAddress][_tokenIds[i]] = 1;\\n        totalAmounts += _amounts[i];\\n        IERC721Upgradeable(_nftAddress).safeTransferFrom(address(this), _winners[i], _tokenIds[i]);\\n      }\\n\\n      // check if all amount value is 1\\n      require(totalAmounts == _winners.length, \\\"Invalid amount value\\\");\\n    } else {\\n      require(IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC1155), \\\"Unexpected NFT address\\\");\\n\\n      // update totalNFTPrizeDeposit and transfer NFTs to the winners\\n      for (uint256 i; i < _winners.length; i++) {\\n        require(\\n          totalNFTPrizeDeposit[_gid][_tid][_nftAddress][_tokenIds[i]] -\\n            totalNFTPrizeDistribution[_gid][_tid][_nftAddress][_tokenIds[i]] >=\\n            _amounts[i],\\n          \\\"NFT prize distribution amount exceeded\\\"\\n        );\\n\\n        totalNFTPrizeDistribution[_gid][_tid][_nftAddress][_tokenIds[i]] += _amounts[i];\\n        IERC1155Upgradeable(_nftAddress).safeTransferFrom(\\n          address(this),\\n          _winners[i],\\n          _tokenIds[i],\\n          _amounts[i],\\n          bytes(\\\"\\\")\\n        );\\n      }\\n    }\\n\\n    emit NFTPrizeDistributed(msg.sender, _winners, _gid, _tid, _nftAddress, _nftType, _tokenIds, _amounts);\\n  }\\n\\n  /**\\n   * @notice Deposit the prize tokens for the specific game/tournament\\n   * @dev Only tokens which are allowed as a distributable token can be deposited\\n   * @param _depositor Depositor address\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _token Prize token address\\n   * @param _amount Prize amount to deposit\\n   */\\n  function depositPrize(\\n    address _depositor,\\n    uint256 _gid,\\n    uint256 _tid,\\n    address _token,\\n    uint256 _amount\\n  ) external {\\n    require(msg.sender == owner() || msg.sender == addressRegistry.gameRegistry(), \\\"Only owner or GameRegistry\\\");\\n    require(_token != address(0), \\\"Unexpected token address\\\");\\n\\n    // check if tokens are allowed to claim as a prize\\n    require(IGameRegistry(addressRegistry.gameRegistry()).distributable(_gid, _token), \\\"Disallowed distribution token\\\");\\n\\n    // deposit prize tokens\\n    IERC20Upgradeable(_token).safeTransferFrom(_depositor, address(this), _amount);\\n    totalPrizeDeposit[_gid][_tid][_token] += _amount;\\n\\n    emit PrizeDeposited(msg.sender, _depositor, _gid, _tid, _token, _amount);\\n  }\\n\\n  /**\\n   * @notice Withdraw the prize tokens from the specific game/tournament\\n   * @dev Only owner\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _token Prize token address\\n   * @param _amount Prize amount to withdraw\\n   */\\n  function withdrawPrize(\\n    uint256 _gid,\\n    uint256 _tid,\\n    address _token,\\n    uint256 _amount\\n  ) external onlyOwner {\\n    // check if the prize is sufficient to withdraw\\n    require(totalPrizeDeposit[_gid][_tid][_token] >= _amount, \\\"Insufficient prize\\\");\\n\\n    // withdraw the prize\\n    totalPrizeDeposit[_gid][_tid][_token] -= _amount;\\n    IERC20Upgradeable(_token).safeTransfer(msg.sender, _amount);\\n\\n    emit PrizeWithdrawn(msg.sender, _gid, _tid, _token, _amount);\\n  }\\n\\n  /**\\n   * @notice Deposit NFT prize for the specific game/tournament\\n   * @dev NFT type should be either 721 or 1155\\n   * @param _from NFT owner address\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _nftAddress NFT address\\n   * @param _nftType NFT type (721/1155)\\n   * @param _tokenIds Token Id list\\n   * @param _amounts Token amount list\\n   */\\n  function depositNFTPrize(\\n    address _from,\\n    uint256 _gid,\\n    uint256 _tid,\\n    address _nftAddress,\\n    uint256 _nftType,\\n    uint256[] calldata _tokenIds,\\n    uint256[] calldata _amounts\\n  ) external {\\n    require(msg.sender == owner() || msg.sender == addressRegistry.gameRegistry(), \\\"Only owner or GameRegistry\\\");\\n\\n    // check if NFT is allowed to distribute\\n    require(\\n      IGameRegistry(addressRegistry.gameRegistry()).distributable(_gid, _nftAddress),\\n      \\\"Disallowed distribution token\\\"\\n    );\\n\\n    require(_nftAddress != address(0), \\\"Unexpected NFT address\\\");\\n    require(_nftType == 721 || _nftType == 1155, \\\"Unexpected NFT type\\\");\\n    require(_tokenIds.length == _amounts.length, \\\"Mismatched deposit data\\\");\\n\\n    uint256 totalAmounts;\\n    if (_nftType == 721) {\\n      require(IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC721), \\\"Unexpected NFT address\\\");\\n\\n      // transfer NFTs to the contract and update totalNFTPrizeDeposit\\n      for (uint256 i; i < _tokenIds.length; i++) {\\n        IERC721Upgradeable(_nftAddress).safeTransferFrom(_from, address(this), _tokenIds[i]);\\n        totalNFTPrizeDeposit[_gid][_tid][_nftAddress][_tokenIds[i]] = 1;\\n        totalAmounts += _amounts[i];\\n      }\\n\\n      // check if all amount value is 1\\n      require(totalAmounts == _tokenIds.length, \\\"Invalid amount value\\\");\\n    } else {\\n      require(IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC1155), \\\"Unexpected NFT address\\\");\\n\\n      // transfer NFTs to the contract and update totalNFTPrizeDeposit\\n      IERC1155Upgradeable(_nftAddress).safeBatchTransferFrom(_from, address(this), _tokenIds, _amounts, bytes(\\\"\\\"));\\n      for (uint256 i; i < _tokenIds.length; i++) {\\n        totalNFTPrizeDeposit[_gid][_tid][_nftAddress][_tokenIds[i]] += _amounts[i];\\n      }\\n    }\\n\\n    emit NFTPrizeDeposited(msg.sender, _from, _gid, _tid, _nftAddress, _nftType, _tokenIds, _amounts);\\n  }\\n\\n  /**\\n   * @notice Withdraw NFT prize for the specific game/tournament\\n   * @dev Only owner\\n   * @dev NFT type should be either 721 or 1155\\n   * @param _to NFT receiver address\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _nftAddress NFT address\\n   * @param _nftType NFT type (721/1155)\\n   * @param _tokenIds Token Id list\\n   * @param _amounts Token amount list\\n   */\\n  function withdrawNFTPrize(\\n    address _to,\\n    uint256 _gid,\\n    uint256 _tid,\\n    address _nftAddress,\\n    uint256 _nftType,\\n    uint256[] calldata _tokenIds,\\n    uint256[] calldata _amounts\\n  ) external nonReentrant onlyOwner {\\n    require(_nftType == 721 || _nftType == 1155, \\\"Unexpected NFT type\\\");\\n    require(_tokenIds.length == _amounts.length, \\\"Mismatched deposit data\\\");\\n\\n    uint256 totalAmounts;\\n    if (_nftType == 721) {\\n      require(IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC721), \\\"Unexpected NFT address\\\");\\n\\n      // update totalNFTPrizeDeposit and transfer NFTs from the contract\\n      for (uint256 i; i < _tokenIds.length; i++) {\\n        require(\\n          totalNFTPrizeDeposit[_gid][_tid][_nftAddress][_tokenIds[i]] -\\n            totalNFTPrizeDistribution[_gid][_tid][_nftAddress][_tokenIds[i]] ==\\n            1,\\n          \\\"Insufficient NFT prize\\\"\\n        );\\n\\n        totalNFTPrizeDeposit[_gid][_tid][_nftAddress][_tokenIds[i]] = 0;\\n        totalAmounts += _amounts[i];\\n        IERC721Upgradeable(_nftAddress).safeTransferFrom(address(this), _to, _tokenIds[i]);\\n      }\\n\\n      // check if all amount value is 1\\n      require(totalAmounts == _tokenIds.length, \\\"Invalid amount value\\\");\\n    } else {\\n      require(IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC1155), \\\"Unexpected NFT address\\\");\\n\\n      // update totalNFTPrizeDeposit and transfer NFTs from the contract\\n      for (uint256 i; i < _tokenIds.length; i++) {\\n        require(\\n          totalNFTPrizeDeposit[_gid][_tid][_nftAddress][_tokenIds[i]] -\\n            totalNFTPrizeDistribution[_gid][_tid][_nftAddress][_tokenIds[i]] >=\\n            _amounts[i],\\n          \\\"Insufficient NFT prize\\\"\\n        );\\n\\n        totalNFTPrizeDeposit[_gid][_tid][_nftAddress][_tokenIds[i]] -= _amounts[i];\\n      }\\n      IERC1155Upgradeable(_nftAddress).safeBatchTransferFrom(address(this), _to, _tokenIds, _amounts, bytes(\\\"\\\"));\\n    }\\n\\n    emit NFTPrizeWithdrawn(msg.sender, _to, _gid, _tid, _nftAddress, _nftType, _tokenIds, _amounts);\\n  }\\n\\n  /**\\n   * @notice Withdraw tokens\\n   * @dev Only owner\\n   * @param _tokens Token addresses\\n   * @param _amounts Token amounts\\n   * @param _beneficiary Beneficiary address\\n   */\\n  function withdraw(\\n    address[] calldata _tokens,\\n    uint256[] calldata _amounts,\\n    address _beneficiary\\n  ) external onlyOwner {\\n    require(_tokens.length == _amounts.length, \\\"Mismatched withdrawal data\\\");\\n\\n    for (uint256 i; i < _tokens.length; i++) {\\n      totalWithdrawAmount[_tokens[i]] += _amounts[i];\\n      IERC20Upgradeable(_tokens[i]).safeTransfer(_beneficiary, _amounts[i]);\\n\\n      emit Withdrawn(msg.sender, _beneficiary, _tokens[i], _amounts[i]);\\n    }\\n  }\\n\\n  /**\\n   * @notice Pause Oparcade\\n   * @dev Only owner\\n   */\\n  function pause() external onlyOwner {\\n    _pause();\\n  }\\n\\n  /**\\n   * @notice Resume Oparcade\\n   * @dev Only owner\\n   */\\n  function unpause() external onlyOwner {\\n    _unpause();\\n  }\\n}\\n\",\"keccak256\":\"0xe607fcddba66ef3499a801632a49f7e7d96564536e488253984a117e4c91e24d\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title AddressRegistry Contract Interface\\n * @notice Define the interface used to get addresses in Oparcade\\n * @author David Lee\\n */\\ninterface IAddressRegistry {\\n  /**\\n   * @notice Provide the Oparcade contract address\\n   * @dev Can be zero in case of the Oparcade contract is not registered\\n   * @return address Oparcade contract address\\n   */\\n  function oparcade() external view returns (address);\\n\\n  /**\\n   * @notice Provide the GameRegistry contract address\\n   * @dev Can be zero in case of the GameRegistry contract is not registered\\n   * @return address GameRegistry contract address\\n   */\\n  function gameRegistry() external view returns (address);\\n\\n  /**\\n   * @notice Provide the maintainer address\\n   * @dev Can be zero in case of the maintainer address is not registered\\n   * @return address Maintainer contract address\\n   */\\n  function maintainer() external view returns (address);\\n}\\n\",\"keccak256\":\"0xf647b5b87ae3327fc30b6197655f95bae8317303beced6b426f86a46181a930b\",\"license\":\"MIT\"},\"contracts/interfaces/IGameRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title GameRegistry Contract Interface\\n * @notice Define the interface necessary for the GameRegistry\\n * @author David Lee\\n */\\ninterface IGameRegistry {\\n  /**\\n   * @notice Returns the game creator address of the game\\n   * @param _gid Game ID created\\n   * @return (address) Game creator address of the game\\n   */\\n  function gameCreators(uint256 _gid) external view returns (address);\\n\\n  /**\\n   * @notice Returns the game creator fee applied\\n   * @dev Either base game creator fee set by the owner or one proposed by the tournament creator is applied\\n   * @dev The game creator fee applied can't be less than the base one\\n   * @param _gid Game ID\\n   * @param _tid Tournanemnt ID\\n   * @return (uint256) Game creator fee applied to the tournament\\n   */\\n  function appliedGameCreatorFees(uint256 _gid, uint256 _tid) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the tournament creator fee percentage of the specific game/tournament\\n   * @dev Max value is 1000 (100%)\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @return (uint256) Tournament creator fee percentage\\n   */\\n  function tournamentCreatorFees(uint256 _gid, uint256 _tid) external view returns (uint256);\\n\\n  /**\\n   * @notice Provide the deposit amount of the token given\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _token Token address\\n   * @return uint256 Deposit amount\\n   */\\n  function depositTokenAmount(\\n    uint256 _gid,\\n    uint256 _tid,\\n    address _token\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @notice Provide the claimability of the token given\\n   * @param _gid Game ID\\n   * @param _token Token address\\n   * @return (bool) true: distributable, false: not distributable\\n   */\\n  function distributable(uint256 _gid, address _token) external view returns (bool);\\n\\n  /**\\n   * @notice Provide whether the game is deprecated or not\\n   * @param _gid Game ID\\n   * @return (bool) true: deprecated, false: not deprecated\\n   */\\n  function isDeprecatedGame(uint256 _gid) external view returns (bool);\\n\\n  /**\\n   * @notice Returns the number of games added in games array\\n   * @return (uint256) Game count\\n   */\\n  function gameCount() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the tournament creator addresses of the specific game\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @return (address) Tournament creator address\\n   */\\n  function getTournamentCreator(uint256 _gid, uint256 _tid) external view returns (address);\\n\\n  /**\\n   * @notice Provide the Oparcade platform fee\\n   * @dev Max value is 1000 (100%)\\n   * @return (uint256) Oparcade platform fee\\n   */\\n  function platformFee() external view returns (uint256);\\n\\n  /**\\n   * @notice Reteurns the fee recipient address\\n   * @return (address) Fee recipient address\\n   */\\n  function feeRecipient() external view returns (address);\\n}\\n\",\"keccak256\":\"0x3bffd6937993ec4fed9fa4f4bf20f0bba0bbaa31394b60d289a2f532b8024e00\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506149d9806100206000396000f3fe6080604052600436106101b05760003560e01c80638639c9a7116100ec578063bc197c811161008a578063e3b2facc11610064578063e3b2facc146105b4578063f23a6e61146105d4578063f2fde38b14610600578063f3ad65f41461062057600080fd5b8063bc197c811461053a578063c4d66de814610566578063c836e8ee1461058657600080fd5b80638dbdbe6d116100c65780638dbdbe6d1461047c57806390ed20241461049c578063b3a833b8146104db578063b6bf94be146104fb57600080fd5b80638639c9a7146103eb578063888cecba1461040b5780638da5cb5b1461044a57600080fd5b80633f4ba83a116101595780635c975abb116101335780635c975abb14610361578063715018a6146103795780637ae38bd21461038e5780638456cb59146103d657600080fd5b80633f4ba83a1461030c5780634ceba21a146103215780634e5fba4f1461034157600080fd5b806321163be51161018a57806321163be51461025757806326f91506146102a4578063275927be146102c457600080fd5b806301ffc9a7146101bc578063150b7a02146101f15780631de6ba171461023557600080fd5b366101b757005b600080fd5b3480156101c857600080fd5b506101dc6101d7366004613f34565b610641565b60405190151581526020015b60405180910390f35b3480156101fd57600080fd5b5061021c61020c36600461402a565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020016101e8565b34801561024157600080fd5b50610255610250366004614096565b610678565b005b34801561026357600080fd5b506102966102723660046140e8565b61019560209081526000938452604080852082529284528284209052825290205481565b6040519081526020016101e8565b3480156102b057600080fd5b506102556102bf36600461416d565b6109a5565b3480156102d057600080fd5b506102966102df3660046141f1565b61019460209081526000948552604080862082529385528385208152918452828420909152825290205481565b34801561031857600080fd5b50610255610bd6565b34801561032d57600080fd5b5061025561033c366004614230565b610c3a565b34801561034d57600080fd5b5061025561035c3660046141f1565b611023565b34801561036d57600080fd5b5060975460ff166101dc565b34801561038557600080fd5b5061025561119c565b34801561039a57600080fd5b506102966103a93660046141f1565b61019660209081526000948552604080862082529385528385208152918452828420909152825290205481565b3480156103e257600080fd5b50610255611200565b3480156103f757600080fd5b506102556104063660046142c8565b611262565b34801561041757600080fd5b506102966104263660046140e8565b61019160209081526000938452604080852082529284528284209052825290205481565b34801561045657600080fd5b506033546001600160a01b03165b6040516001600160a01b0390911681526020016101e8565b34801561048857600080fd5b506102556104973660046140e8565b611d1d565b3480156104a857600080fd5b506102966104b73660046140e8565b61019260209081526000938452604080852082529284528284209052825290205481565b3480156104e757600080fd5b506102556104f6366004614396565b611f38565b34801561050757600080fd5b506102966105163660046140e8565b61019360209081526000938452604080852082529284528284209052825290205481565b34801561054657600080fd5b5061021c6105553660046144bf565b63bc197c8160e01b95945050505050565b34801561057257600080fd5b5061025561058136600461456d565b6126af565b34801561059257600080fd5b506102966105a136600461456d565b6101976020526000908152604090205481565b3480156105c057600080fd5b506102556105cf366004614396565b6127c4565b3480156105e057600080fd5b5061021c6105ef36600461458a565b63f23a6e6160e01b95945050505050565b34801561060c57600080fd5b5061025561061b36600461456d565b612f9f565b34801561062c57600080fd5b5061019854610464906001600160a01b031681565b60006001600160e01b03198216630271189760e51b148061067257506301ffc9a760e01b6001600160e01b03198316145b92915050565b6033546001600160a01b0316331480610719575061019860009054906101000a90046001600160a01b03166001600160a01b031663da0907556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070491906145f3565b6001600160a01b0316336001600160a01b0316145b61076a5760405162461bcd60e51b815260206004820152601a60248201527f4f6e6c79206f776e6572206f722047616d65526567697374727900000000000060448201526064015b60405180910390fd5b6001600160a01b0382166107c05760405162461bcd60e51b815260206004820152601860248201527f556e657870656374656420746f6b656e206164647265737300000000000000006044820152606401610761565b61019860009054906101000a90046001600160a01b03166001600160a01b031663da0907556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610814573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083891906145f3565b6040516339ff00bd60e01b8152600481018690526001600160a01b03848116602483015291909116906339ff00bd90604401602060405180830381865afa158015610887573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ab9190614610565b6108f75760405162461bcd60e51b815260206004820152601d60248201527f446973616c6c6f77656420646973747269627574696f6e20746f6b656e0000006044820152606401610761565b61090c6001600160a01b038316863084613081565b60008481526101956020908152604080832086845282528083206001600160a01b038616845290915281208054839290610947908490614648565b9091555050604080513381526001600160a01b03878116602083015291810183905290831690849086907fa555954f2adaf5a353a1db2b9a28e229f872593323659c9f5ab9cc426d0c58a29060600160405180910390a45050505050565b6033546001600160a01b031633146109ff5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610761565b838214610a4e5760405162461bcd60e51b815260206004820152601a60248201527f4d69736d617463686564207769746864726177616c20646174610000000000006044820152606401610761565b60005b84811015610bce57838382818110610a6b57610a6b614660565b905060200201356101976000888885818110610a8957610a89614660565b9050602002016020810190610a9e919061456d565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254610acd9190614648565b90915550610b27905082858584818110610ae957610ae9614660565b90506020020135888885818110610b0257610b02614660565b9050602002016020810190610b17919061456d565b6001600160a01b03169190613107565b858582818110610b3957610b39614660565b9050602002016020810190610b4e919061456d565b6001600160a01b0316826001600160a01b0316336001600160a01b03167fa4195c37c2947bbe89165f03e320b6903116f0b10d8cfdb522330f7ce6f9fa24878786818110610b9e57610b9e614660565b90506020020135604051610bb491815260200190565b60405180910390a480610bc681614676565b915050610a51565b505050505050565b6033546001600160a01b03163314610c305760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610761565b610c3861313c565b565b60975460ff1615610c805760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610761565b61019860009054906101000a90046001600160a01b03166001600160a01b0316639850d32b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf891906145f3565b6001600160a01b0316336001600160a01b031614610d4a5760405162461bcd60e51b815260206004820152600f60248201526e27b7363c9036b0b4b73a30b4b732b960891b6044820152606401610761565b838114610d995760405162461bcd60e51b815260206004820152601e60248201527f4d69736d6174636865642077696e6e65727320616e6420616d6f756e747300006044820152606401610761565b610198546040805163da09075560e01b815290516000926001600160a01b03169163da0907559160048083019260209291908290030181865afa158015610de4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0891906145f3565b6040516339ff00bd60e01b8152600481018a90526001600160a01b038681166024830152919250908216906339ff00bd90604401602060405180830381865afa158015610e59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7d9190614610565b610ec95760405162461bcd60e51b815260206004820152601d60248201527f446973616c6c6f77656420646973747269627574696f6e20746f6b656e0000006044820152606401610761565b610ed8888888888888886131d8565b6000888152610191602090815260408083208a845282528083206001600160a01b038816808552908352818420548c855261019584528285208c86528452828520918552925290912054610f2c9190614648565b6000898152610193602090815260408083208b845282528083206001600160a01b038916808552908352818420548d855261019284528285208d86528452828520918552925290912054610f809190614648565b1115610fce5760405162461bcd60e51b815260206004820152601560248201527f5072697a6520616d6f756e7420657863656564656400000000000000000000006044820152606401610761565b836001600160a01b031687897f6b4488e823ebb77fdc3a58bb5cbc1af38a0b2e39ff4dc84c080c08540dcd1ebc338a8a8989604051611011959493929190614729565b60405180910390a45050505050505050565b6033546001600160a01b0316331461107d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610761565b60008481526101956020908152604080832086845282528083206001600160a01b03861684529091529020548111156110f85760405162461bcd60e51b815260206004820152601260248201527f496e73756666696369656e74207072697a6500000000000000000000000000006044820152606401610761565b60008481526101956020908152604080832086845282528083206001600160a01b03861684529091528120805483929061113390849061476b565b9091555061114d90506001600160a01b0383163383613107565b60408051338152602081018390526001600160a01b03841691859187917f0cb36af5c5bca6f878ab2f1d050c5935fb5fecdb9b88efc1f4808456ff9b3ee491015b60405180910390a450505050565b6033546001600160a01b031633146111f65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610761565b610c3860006137a4565b6033546001600160a01b0316331461125a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610761565b610c38613803565b60975460ff16156112a85760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610761565b600260655414156112fb5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610761565b60026065556101985460408051639850d32b60e01b815290516001600160a01b0390921691639850d32b916004808201926020929091908290030181865afa15801561134b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061136f91906145f3565b6001600160a01b0316336001600160a01b0316146113c15760405162461bcd60e51b815260206004820152600f60248201526e27b7363c9036b0b4b73a30b4b732b960891b6044820152606401610761565b61019860009054906101000a90046001600160a01b03166001600160a01b031663da0907556040518163ffffffff1660e01b8152600401602060405180830381865afa158015611415573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143991906145f3565b6040516339ff00bd60e01b8152600481018c90526001600160a01b03888116602483015291909116906339ff00bd90604401602060405180830381865afa158015611488573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ac9190614610565b6114f85760405162461bcd60e51b815260206004820152601d60248201527f446973616c6c6f77656420646973747269627574696f6e20746f6b656e0000006044820152606401610761565b846102d11480611509575084610483145b61154b5760405162461bcd60e51b8152602060048201526013602482015272556e6578706563746564204e4654207479706560681b6044820152606401610761565b868314801561155957508281145b6115a55760405162461bcd60e51b815260206004820181905260248201527f4d69736d617463686564204e465420646973747269627574696f6e20646174616044820152606401610761565b6000856102d11415611919576040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038816906301ffc9a790602401602060405180830381865afa1580156115fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116209190614610565b6116655760405162461bcd60e51b8152602060048201526016602482015275556e6578706563746564204e4654206164647265737360501b6044820152606401610761565b60005b888110156118cd5760008c8152610194602090815260408083208e845282528083206001600160a01b038c1684529091528120908787848181106116ae576116ae614660565b602090810292909201358352508181019290925260409081016000908120548f825261019684528282208f835284528282206001600160a01b038d1683529093529081209088888581811061170557611705614660565b90506020020135815260200190815260200160002054611725919061476b565b6001146117835760405162461bcd60e51b815260206004820152602660248201527f4e4654207072697a6520646973747269627574696f6e20616d6f756e7420657860448201526518d95959195960d21b6064820152608401610761565b60008c8152610194602090815260408083208e845282528083206001600160a01b038c16845290915281206001918888858181106117c3576117c3614660565b905060200201358152602001908152602001600020819055508383828181106117ee576117ee614660565b90506020020135826118009190614648565b9150876001600160a01b03166342842e0e308c8c8581811061182457611824614660565b9050602002016020810190611839919061456d565b89898681811061184b5761184b614660565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b1580156118a257600080fd5b505af11580156118b6573d6000803e3d6000fd5b5050505080806118c590614676565b915050611668565b508088146119145760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420616d6f756e742076616c756560601b6044820152606401610761565b611cba565b6040516301ffc9a760e01b8152636cdb3d1360e11b60048201526001600160a01b038816906301ffc9a790602401602060405180830381865afa158015611964573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119889190614610565b6119cd5760405162461bcd60e51b8152602060048201526016602482015275556e6578706563746564204e4654206164647265737360501b6044820152606401610761565b60005b88811015611cb8578383828181106119ea576119ea614660565b9050602002013561019460008e815260200190815260200160002060008d815260200190815260200160002060008a6001600160a01b03166001600160a01b031681526020019081526020016000206000888885818110611a4d57611a4d614660565b9050602002013581526020019081526020016000205461019660008f815260200190815260200160002060008e815260200190815260200160002060008b6001600160a01b03166001600160a01b031681526020019081526020016000206000898986818110611abf57611abf614660565b90506020020135815260200190815260200160002054611adf919061476b565b1015611b3c5760405162461bcd60e51b815260206004820152602660248201527f4e4654207072697a6520646973747269627574696f6e20616d6f756e7420657860448201526518d95959195960d21b6064820152608401610761565b838382818110611b4e57611b4e614660565b9050602002013561019460008e815260200190815260200160002060008d815260200190815260200160002060008a6001600160a01b03166001600160a01b031681526020019081526020016000206000888885818110611bb157611bb1614660565b9050602002013581526020019081526020016000206000828254611bd59190614648565b90915550506001600160a01b03881663f242432a308c8c85818110611bfc57611bfc614660565b9050602002016020810190611c11919061456d565b898986818110611c2357611c23614660565b90506020020135888887818110611c3c57611c3c614660565b90506020020135604051806020016040528060008152506040518663ffffffff1660e01b8152600401611c739594939291906147da565b600060405180830381600087803b158015611c8d57600080fd5b505af1158015611ca1573d6000803e3d6000fd5b505050508080611cb090614676565b9150506119d0565b505b866001600160a01b03168a8c7fa825c8731f1dfe5c99472b7e94c839c9e6489ed55d0277366e867d8d88a306cf338d8d8c8c8c8c8c604051611d03989796959493929190614812565b60405180910390a450506001606555505050505050505050565b60975460ff1615611d635760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610761565b610198546040805163da09075560e01b815290516000926001600160a01b03169163da0907559160048083019260209291908290030181865afa158015611dae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd291906145f3565b6040516322b4b91b60e11b815260048101869052602481018590526001600160a01b0384811660448301529190911690634569723690606401602060405180830381865afa158015611e28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4c9190614872565b905060008111611e9e5760405162461bcd60e51b815260206004820152601560248201527f496e76616c6964206465706f73697420746f6b656e00000000000000000000006044820152606401610761565b611eb36001600160a01b038316333084613081565b60008481526101916020908152604080832086845282528083206001600160a01b038616845290915281208054839290611eee908490614648565b909155505060408051338152602081018390526001600160a01b03841691859187917f3360a6f28beae2ecd8c3c807e274aaae13fd8264155337e6d0535a44468f0942910161118e565b6033546001600160a01b0316331480611fd9575061019860009054906101000a90046001600160a01b03166001600160a01b031663da0907556040518163ffffffff1660e01b8152600401602060405180830381865afa158015611fa0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc491906145f3565b6001600160a01b0316336001600160a01b0316145b6120255760405162461bcd60e51b815260206004820152601a60248201527f4f6e6c79206f776e6572206f722047616d6552656769737472790000000000006044820152606401610761565b61019860009054906101000a90046001600160a01b03166001600160a01b031663da0907556040518163ffffffff1660e01b8152600401602060405180830381865afa158015612079573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061209d91906145f3565b6040516339ff00bd60e01b8152600481018a90526001600160a01b03888116602483015291909116906339ff00bd90604401602060405180830381865afa1580156120ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121109190614610565b61215c5760405162461bcd60e51b815260206004820152601d60248201527f446973616c6c6f77656420646973747269627574696f6e20746f6b656e0000006044820152606401610761565b6001600160a01b0386166121ab5760405162461bcd60e51b8152602060048201526016602482015275556e6578706563746564204e4654206164647265737360501b6044820152606401610761565b846102d114806121bc575084610483145b6121fe5760405162461bcd60e51b8152602060048201526013602482015272556e6578706563746564204e4654207479706560681b6044820152606401610761565b82811461224d5760405162461bcd60e51b815260206004820152601760248201527f4d69736d617463686564206465706f73697420646174610000000000000000006044820152606401610761565b6000856102d11415612488576040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038816906301ffc9a790602401602060405180830381865afa1580156122a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c89190614610565b61230d5760405162461bcd60e51b8152602060048201526016602482015275556e6578706563746564204e4654206164647265737360501b6044820152606401610761565b60005b8481101561243c57876001600160a01b03166342842e0e8c3089898681811061233b5761233b614660565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b15801561239257600080fd5b505af11580156123a6573d6000803e3d6000fd5b50505060008b8152610196602090815260408083208d845282528083206001600160a01b038d168452909152812060019250908888858181106123eb576123eb614660565b9050602002013581526020019081526020016000208190555083838281811061241657612416614660565b90506020020135826124289190614648565b91508061243481614676565b915050612310565b508084146124835760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420616d6f756e742076616c756560601b6044820152606401610761565b612654565b6040516301ffc9a760e01b8152636cdb3d1360e11b60048201526001600160a01b038816906301ffc9a790602401602060405180830381865afa1580156124d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f79190614610565b61253c5760405162461bcd60e51b8152602060048201526016602482015275556e6578706563746564204e4654206164647265737360501b6044820152606401610761565b60408051602081018252600081529051631759616b60e11b81526001600160a01b03891691632eb2c2d691612580918e9130918b918b918b918b919060040161488b565b600060405180830381600087803b15801561259a57600080fd5b505af11580156125ae573d6000803e3d6000fd5b5050505060005b84811015612652578383828181106125cf576125cf614660565b60008d8152610196602090815260408083208f845282528083206001600160a01b038f16845282528220920293909301359290915088888581811061261657612616614660565b905060200201358152602001908152602001600020600082825461263a9190614648565b9091555081905061264a81614676565b9150506125b5565b505b866001600160a01b0316888a7f8aa5f867116bd0007022fe5e2205d78c5a5922c47331762e9e69ce2c9a8f6a95338e8b8b8b8b8b60405161269b97969594939291906148ed565b60405180910390a450505050505050505050565b60006126bb600161387e565b905080156126d3576000805461ff0019166101001790555b6126db613994565b6126e3613a07565b6126eb613a7a565b6126f3613aed565b6126fb613aed565b6001600160a01b0382166127515760405162461bcd60e51b815260206004820152601760248201527f496e76616c6964204164647265737352656769737472790000000000000000006044820152606401610761565b610198805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03841617905580156127c0576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b600260655414156128175760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610761565b60026065556033546001600160a01b031633146128765760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610761565b846102d11480612887575084610483145b6128c95760405162461bcd60e51b8152602060048201526013602482015272556e6578706563746564204e4654207479706560681b6044820152606401610761565b8281146129185760405162461bcd60e51b815260206004820152601760248201527f4d69736d617463686564206465706f73697420646174610000000000000000006044820152606401610761565b6000856102d11415612c55576040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038816906301ffc9a790602401602060405180830381865afa15801561296f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129939190614610565b6129d85760405162461bcd60e51b8152602060048201526016602482015275556e6578706563746564204e4654206164647265737360501b6044820152606401610761565b60005b84811015612c095760008a8152610194602090815260408083208c845282528083206001600160a01b038c168452909152812090878784818110612a2157612a21614660565b602090810292909201358352508181019290925260409081016000908120548d825261019684528282208d835284528282206001600160a01b038d16835290935290812090888885818110612a7857612a78614660565b90506020020135815260200190815260200160002054612a98919061476b565b600114612ae75760405162461bcd60e51b815260206004820152601660248201527f496e73756666696369656e74204e4654207072697a65000000000000000000006044820152606401610761565b60008a8152610196602090815260408083208c845282528083206001600160a01b038c168452909152812081888885818110612b2557612b25614660565b90506020020135815260200190815260200160002081905550838382818110612b5057612b50614660565b9050602002013582612b629190614648565b9150876001600160a01b03166342842e0e308d898986818110612b8757612b87614660565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b158015612bde57600080fd5b505af1158015612bf2573d6000803e3d6000fd5b505050508080612c0190614676565b9150506129db565b50808414612c505760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420616d6f756e742076616c756560601b6044820152606401610761565b612f3f565b6040516301ffc9a760e01b8152636cdb3d1360e11b60048201526001600160a01b038816906301ffc9a790602401602060405180830381865afa158015612ca0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cc49190614610565b612d095760405162461bcd60e51b8152602060048201526016602482015275556e6578706563746564204e4654206164647265737360501b6044820152606401610761565b60005b84811015612ec757838382818110612d2657612d26614660565b60008d8152610194602090815260408083208f845282528083206001600160a01b038f168452825282209202939093013592909150888885818110612d6d57612d6d614660565b602090810292909201358352508181019290925260409081016000908120548e825261019684528282208e835284528282206001600160a01b038e16835290935290812090898986818110612dc457612dc4614660565b90506020020135815260200190815260200160002054612de4919061476b565b1015612e325760405162461bcd60e51b815260206004820152601660248201527f496e73756666696369656e74204e4654207072697a65000000000000000000006044820152606401610761565b838382818110612e4457612e44614660565b60008d8152610196602090815260408083208f845282528083206001600160a01b038f168452825282209202939093013592909150888885818110612e8b57612e8b614660565b9050602002013581526020019081526020016000206000828254612eaf919061476b565b90915550819050612ebf81614676565b915050612d0c565b5060408051602081018252600081529051631759616b60e11b81526001600160a01b03891691632eb2c2d691612f0c9130918f918b918b918b918b919060040161488b565b600060405180830381600087803b158015612f2657600080fd5b505af1158015612f3a573d6000803e3d6000fd5b505050505b866001600160a01b0316888a7f5a8dca5c67110aaf25dc3f613084907009569128e7e31216a0802dce0db9c784338e8b8b8b8b8b604051612f8697969594939291906148ed565b60405180910390a4505060016065555050505050505050565b6033546001600160a01b03163314612ff95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610761565b6001600160a01b0381166130755760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610761565b61307e816137a4565b50565b6040516001600160a01b03808516602483015283166044820152606481018290526131019085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152613b58565b50505050565b6040516001600160a01b03831660248201526044810182905261313790849063a9059cbb60e01b906064016130b5565b505050565b60975460ff1661318e5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610761565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b610198546040805163da09075560e01b815290516000926001600160a01b03169163da0907559160048083019260209291908290030181865afa158015613223573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061324791906145f3565b90506000806000805b888110156135dd57600087878381811061326c5761326c614660565b90506020020135905060006103e861019860009054906101000a90046001600160a01b03166001600160a01b031663da0907556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156132ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132f291906145f3565b6001600160a01b03166326232a2e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561332f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133539190614872565b8a8a8681811061336557613365614660565b905060200201356133769190614933565b6133809190614952565b905061338c8187614648565b9550613398818361476b565b9150506000866001600160a01b031663d0dd986d8f8f6040518363ffffffff1660e01b81526004016133d4929190918252602082015260400190565b602060405180830381865afa1580156133f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134159190614872565b905060006103e8828b8b8781811061342f5761342f614660565b905060200201356134409190614933565b61344a9190614952565b90506134568187614648565b9550613462818461476b565b925050506000866001600160a01b03166370ca09e68f8f6040518363ffffffff1660e01b815260040161349f929190918252602082015260400190565b602060405180830381865afa1580156134bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134e09190614872565b905060006103e8828b8b878181106134fa576134fa614660565b9050602002013561350b9190614933565b6135159190614952565b90506135218186614648565b945061352d828461476b565b925050508061019260008f815260200190815260200160002060008e815260200190815260200160002060008b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546135899190614648565b909155506135ca90508b8b848181106135a4576135a4614660565b90506020020160208101906135b9919061456d565b6001600160a01b038b169083613107565b50806135d581614676565b915050613250565b50806135e98385614648565b6135f39190614648565b60008c8152610193602090815260408083208e845282528083206001600160a01b038c1684529091528120805490919061362e908490614648565b9091555050610198546040805163da09075560e01b81529051613715926001600160a01b03169163da0907559160048083019260209291908290030181865afa15801561367f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136a391906145f3565b6001600160a01b031663469048406040518163ffffffff1660e01b8152600401602060405180830381865afa1580156136e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061370491906145f3565b6001600160a01b0389169085613107565b60405163411e407f60e11b8152600481018c905261375f906001600160a01b0386169063823c80fe906024015b602060405180830381865afa1580156136e0573d6000803e3d6000fd5b60405163f406c2d160e01b8152600481018c9052602481018b9052613797906001600160a01b0386169063f406c2d190604401613742565b5050505050505050505050565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60975460ff16156138495760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610761565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586131bb3390565b60008054610100900460ff161561390c578160ff1660011480156138a15750303b155b6139045760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610761565b506000919050565b60005460ff80841691161061397a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610761565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff166139ff5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610761565b610c38613c3d565b600054610100900460ff16613a725760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610761565b610c38613cb1565b600054610100900460ff16613ae55760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610761565b610c38613d23565b600054610100900460ff16610c385760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610761565b6000613bad826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613d9a9092919063ffffffff16565b8051909150156131375780806020019051810190613bcb9190614610565b6131375760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610761565b600054610100900460ff16613ca85760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610761565b610c38336137a4565b600054610100900460ff16613d1c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610761565b6001606555565b600054610100900460ff16613d8e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610761565b6097805460ff19169055565b6060613da98484600085613db3565b90505b9392505050565b606082471015613e2b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610761565b6001600160a01b0385163b613e825760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610761565b600080866001600160a01b03168587604051613e9e9190614974565b60006040518083038185875af1925050503d8060008114613edb576040519150601f19603f3d011682016040523d82523d6000602084013e613ee0565b606091505b5091509150613ef0828286613efb565b979650505050505050565b60608315613f0a575081613dac565b825115613f1a5782518084602001fd5b8160405162461bcd60e51b81526004016107619190614990565b600060208284031215613f4657600080fd5b81356001600160e01b031981168114613dac57600080fd5b6001600160a01b038116811461307e57600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715613fb257613fb2613f73565b604052919050565b600082601f830112613fcb57600080fd5b813567ffffffffffffffff811115613fe557613fe5613f73565b613ff8601f8201601f1916602001613f89565b81815284602083860101111561400d57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561404057600080fd5b843561404b81613f5e565b9350602085013561405b81613f5e565b925060408501359150606085013567ffffffffffffffff81111561407e57600080fd5b61408a87828801613fba565b91505092959194509250565b600080600080600060a086880312156140ae57600080fd5b85356140b981613f5e565b9450602086013593506040860135925060608601356140d781613f5e565b949793965091946080013592915050565b6000806000606084860312156140fd57600080fd5b8335925060208401359150604084013561411681613f5e565b809150509250925092565b60008083601f84011261413357600080fd5b50813567ffffffffffffffff81111561414b57600080fd5b6020830191508360208260051b850101111561416657600080fd5b9250929050565b60008060008060006060868803121561418557600080fd5b853567ffffffffffffffff8082111561419d57600080fd5b6141a989838a01614121565b909750955060208801359150808211156141c257600080fd5b506141cf88828901614121565b90945092505060408601356141e381613f5e565b809150509295509295909350565b6000806000806080858703121561420757600080fd5b8435935060208501359250604085013561422081613f5e565b9396929550929360600135925050565b600080600080600080600060a0888a03121561424b57600080fd5b8735965060208801359550604088013567ffffffffffffffff8082111561427157600080fd5b61427d8b838c01614121565b909750955060608a0135915061429282613f5e565b909350608089013590808211156142a857600080fd5b506142b58a828b01614121565b989b979a50959850939692959293505050565b60008060008060008060008060008060e08b8d0312156142e757600080fd5b8a35995060208b0135985060408b013567ffffffffffffffff8082111561430d57600080fd5b6143198e838f01614121565b909a50985060608d0135915061432e82613f5e565b90965060808c0135955060a08c0135908082111561434b57600080fd5b6143578e838f01614121565b909650945060c08d013591508082111561437057600080fd5b5061437d8d828e01614121565b915080935050809150509295989b9194979a5092959850565b600080600080600080600080600060e08a8c0312156143b457600080fd5b89356143bf81613f5e565b985060208a0135975060408a0135965060608a01356143dd81613f5e565b955060808a0135945060a08a013567ffffffffffffffff8082111561440157600080fd5b61440d8d838e01614121565b909650945060c08c013591508082111561442657600080fd5b506144338c828d01614121565b915080935050809150509295985092959850929598565b600082601f83011261445b57600080fd5b8135602067ffffffffffffffff82111561447757614477613f73565b8160051b614486828201613f89565b92835284810182019282810190878511156144a057600080fd5b83870192505b84831015613ef0578235825291830191908301906144a6565b600080600080600060a086880312156144d757600080fd5b85356144e281613f5e565b945060208601356144f281613f5e565b9350604086013567ffffffffffffffff8082111561450f57600080fd5b61451b89838a0161444a565b9450606088013591508082111561453157600080fd5b61453d89838a0161444a565b9350608088013591508082111561455357600080fd5b5061456088828901613fba565b9150509295509295909350565b60006020828403121561457f57600080fd5b8135613dac81613f5e565b600080600080600060a086880312156145a257600080fd5b85356145ad81613f5e565b945060208601356145bd81613f5e565b93506040860135925060608601359150608086013567ffffffffffffffff8111156145e757600080fd5b61456088828901613fba565b60006020828403121561460557600080fd5b8151613dac81613f5e565b60006020828403121561462257600080fd5b81518015158114613dac57600080fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561465b5761465b614632565b500190565b634e487b7160e01b600052603260045260246000fd5b600060001982141561468a5761468a614632565b5060010190565b8183526000602080850194508260005b858110156146cf5781356146b481613f5e565b6001600160a01b0316875295820195908201906001016146a1565b509495945050505050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561470c57600080fd5b8260051b8083602087013760009401602001938452509192915050565b6001600160a01b038616815260606020820152600061474c606083018688614691565b828103604084015261475f8185876146da565b98975050505050505050565b60008282101561477d5761477d614632565b500390565b60005b8381101561479d578181015183820152602001614785565b838111156131015750506000910152565b600081518084526147c6816020860160208601614782565b601f01601f19169290920160200192915050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152613ef060a08301846147ae565b6001600160a01b038916815260a06020820152600061483560a08301898b614691565b876040840152828103606084015261484e8187896146da565b905082810360808401526148638185876146da565b9b9a5050505050505050505050565b60006020828403121561488457600080fd5b5051919050565b60006001600160a01b03808a16835280891660208401525060a060408301526148b860a0830187896146da565b82810360608401526148cb8186886146da565b905082810360808401526148df81856147ae565b9a9950505050505050505050565b60006001600160a01b03808a16835280891660208401525086604083015260a0606083015261492060a0830186886146da565b82810360808401526148df8185876146da565b600081600019048311821515161561494d5761494d614632565b500290565b60008261496f57634e487b7160e01b600052601260045260246000fd5b500490565b60008251614986818460208701614782565b9190910192915050565b602081526000613dac60208301846147ae56fea2646970667358221220d11fce097057a3cf1a574d7ca564b0e055ea7d9d68e98250d85c98e84369bbb664736f6c634300080b0033",
  "deployedBytecode": "0x6080604052600436106101b05760003560e01c80638639c9a7116100ec578063bc197c811161008a578063e3b2facc11610064578063e3b2facc146105b4578063f23a6e61146105d4578063f2fde38b14610600578063f3ad65f41461062057600080fd5b8063bc197c811461053a578063c4d66de814610566578063c836e8ee1461058657600080fd5b80638dbdbe6d116100c65780638dbdbe6d1461047c57806390ed20241461049c578063b3a833b8146104db578063b6bf94be146104fb57600080fd5b80638639c9a7146103eb578063888cecba1461040b5780638da5cb5b1461044a57600080fd5b80633f4ba83a116101595780635c975abb116101335780635c975abb14610361578063715018a6146103795780637ae38bd21461038e5780638456cb59146103d657600080fd5b80633f4ba83a1461030c5780634ceba21a146103215780634e5fba4f1461034157600080fd5b806321163be51161018a57806321163be51461025757806326f91506146102a4578063275927be146102c457600080fd5b806301ffc9a7146101bc578063150b7a02146101f15780631de6ba171461023557600080fd5b366101b757005b600080fd5b3480156101c857600080fd5b506101dc6101d7366004613f34565b610641565b60405190151581526020015b60405180910390f35b3480156101fd57600080fd5b5061021c61020c36600461402a565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020016101e8565b34801561024157600080fd5b50610255610250366004614096565b610678565b005b34801561026357600080fd5b506102966102723660046140e8565b61019560209081526000938452604080852082529284528284209052825290205481565b6040519081526020016101e8565b3480156102b057600080fd5b506102556102bf36600461416d565b6109a5565b3480156102d057600080fd5b506102966102df3660046141f1565b61019460209081526000948552604080862082529385528385208152918452828420909152825290205481565b34801561031857600080fd5b50610255610bd6565b34801561032d57600080fd5b5061025561033c366004614230565b610c3a565b34801561034d57600080fd5b5061025561035c3660046141f1565b611023565b34801561036d57600080fd5b5060975460ff166101dc565b34801561038557600080fd5b5061025561119c565b34801561039a57600080fd5b506102966103a93660046141f1565b61019660209081526000948552604080862082529385528385208152918452828420909152825290205481565b3480156103e257600080fd5b50610255611200565b3480156103f757600080fd5b506102556104063660046142c8565b611262565b34801561041757600080fd5b506102966104263660046140e8565b61019160209081526000938452604080852082529284528284209052825290205481565b34801561045657600080fd5b506033546001600160a01b03165b6040516001600160a01b0390911681526020016101e8565b34801561048857600080fd5b506102556104973660046140e8565b611d1d565b3480156104a857600080fd5b506102966104b73660046140e8565b61019260209081526000938452604080852082529284528284209052825290205481565b3480156104e757600080fd5b506102556104f6366004614396565b611f38565b34801561050757600080fd5b506102966105163660046140e8565b61019360209081526000938452604080852082529284528284209052825290205481565b34801561054657600080fd5b5061021c6105553660046144bf565b63bc197c8160e01b95945050505050565b34801561057257600080fd5b5061025561058136600461456d565b6126af565b34801561059257600080fd5b506102966105a136600461456d565b6101976020526000908152604090205481565b3480156105c057600080fd5b506102556105cf366004614396565b6127c4565b3480156105e057600080fd5b5061021c6105ef36600461458a565b63f23a6e6160e01b95945050505050565b34801561060c57600080fd5b5061025561061b36600461456d565b612f9f565b34801561062c57600080fd5b5061019854610464906001600160a01b031681565b60006001600160e01b03198216630271189760e51b148061067257506301ffc9a760e01b6001600160e01b03198316145b92915050565b6033546001600160a01b0316331480610719575061019860009054906101000a90046001600160a01b03166001600160a01b031663da0907556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070491906145f3565b6001600160a01b0316336001600160a01b0316145b61076a5760405162461bcd60e51b815260206004820152601a60248201527f4f6e6c79206f776e6572206f722047616d65526567697374727900000000000060448201526064015b60405180910390fd5b6001600160a01b0382166107c05760405162461bcd60e51b815260206004820152601860248201527f556e657870656374656420746f6b656e206164647265737300000000000000006044820152606401610761565b61019860009054906101000a90046001600160a01b03166001600160a01b031663da0907556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610814573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083891906145f3565b6040516339ff00bd60e01b8152600481018690526001600160a01b03848116602483015291909116906339ff00bd90604401602060405180830381865afa158015610887573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ab9190614610565b6108f75760405162461bcd60e51b815260206004820152601d60248201527f446973616c6c6f77656420646973747269627574696f6e20746f6b656e0000006044820152606401610761565b61090c6001600160a01b038316863084613081565b60008481526101956020908152604080832086845282528083206001600160a01b038616845290915281208054839290610947908490614648565b9091555050604080513381526001600160a01b03878116602083015291810183905290831690849086907fa555954f2adaf5a353a1db2b9a28e229f872593323659c9f5ab9cc426d0c58a29060600160405180910390a45050505050565b6033546001600160a01b031633146109ff5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610761565b838214610a4e5760405162461bcd60e51b815260206004820152601a60248201527f4d69736d617463686564207769746864726177616c20646174610000000000006044820152606401610761565b60005b84811015610bce57838382818110610a6b57610a6b614660565b905060200201356101976000888885818110610a8957610a89614660565b9050602002016020810190610a9e919061456d565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254610acd9190614648565b90915550610b27905082858584818110610ae957610ae9614660565b90506020020135888885818110610b0257610b02614660565b9050602002016020810190610b17919061456d565b6001600160a01b03169190613107565b858582818110610b3957610b39614660565b9050602002016020810190610b4e919061456d565b6001600160a01b0316826001600160a01b0316336001600160a01b03167fa4195c37c2947bbe89165f03e320b6903116f0b10d8cfdb522330f7ce6f9fa24878786818110610b9e57610b9e614660565b90506020020135604051610bb491815260200190565b60405180910390a480610bc681614676565b915050610a51565b505050505050565b6033546001600160a01b03163314610c305760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610761565b610c3861313c565b565b60975460ff1615610c805760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610761565b61019860009054906101000a90046001600160a01b03166001600160a01b0316639850d32b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf891906145f3565b6001600160a01b0316336001600160a01b031614610d4a5760405162461bcd60e51b815260206004820152600f60248201526e27b7363c9036b0b4b73a30b4b732b960891b6044820152606401610761565b838114610d995760405162461bcd60e51b815260206004820152601e60248201527f4d69736d6174636865642077696e6e65727320616e6420616d6f756e747300006044820152606401610761565b610198546040805163da09075560e01b815290516000926001600160a01b03169163da0907559160048083019260209291908290030181865afa158015610de4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0891906145f3565b6040516339ff00bd60e01b8152600481018a90526001600160a01b038681166024830152919250908216906339ff00bd90604401602060405180830381865afa158015610e59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7d9190614610565b610ec95760405162461bcd60e51b815260206004820152601d60248201527f446973616c6c6f77656420646973747269627574696f6e20746f6b656e0000006044820152606401610761565b610ed8888888888888886131d8565b6000888152610191602090815260408083208a845282528083206001600160a01b038816808552908352818420548c855261019584528285208c86528452828520918552925290912054610f2c9190614648565b6000898152610193602090815260408083208b845282528083206001600160a01b038916808552908352818420548d855261019284528285208d86528452828520918552925290912054610f809190614648565b1115610fce5760405162461bcd60e51b815260206004820152601560248201527f5072697a6520616d6f756e7420657863656564656400000000000000000000006044820152606401610761565b836001600160a01b031687897f6b4488e823ebb77fdc3a58bb5cbc1af38a0b2e39ff4dc84c080c08540dcd1ebc338a8a8989604051611011959493929190614729565b60405180910390a45050505050505050565b6033546001600160a01b0316331461107d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610761565b60008481526101956020908152604080832086845282528083206001600160a01b03861684529091529020548111156110f85760405162461bcd60e51b815260206004820152601260248201527f496e73756666696369656e74207072697a6500000000000000000000000000006044820152606401610761565b60008481526101956020908152604080832086845282528083206001600160a01b03861684529091528120805483929061113390849061476b565b9091555061114d90506001600160a01b0383163383613107565b60408051338152602081018390526001600160a01b03841691859187917f0cb36af5c5bca6f878ab2f1d050c5935fb5fecdb9b88efc1f4808456ff9b3ee491015b60405180910390a450505050565b6033546001600160a01b031633146111f65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610761565b610c3860006137a4565b6033546001600160a01b0316331461125a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610761565b610c38613803565b60975460ff16156112a85760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610761565b600260655414156112fb5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610761565b60026065556101985460408051639850d32b60e01b815290516001600160a01b0390921691639850d32b916004808201926020929091908290030181865afa15801561134b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061136f91906145f3565b6001600160a01b0316336001600160a01b0316146113c15760405162461bcd60e51b815260206004820152600f60248201526e27b7363c9036b0b4b73a30b4b732b960891b6044820152606401610761565b61019860009054906101000a90046001600160a01b03166001600160a01b031663da0907556040518163ffffffff1660e01b8152600401602060405180830381865afa158015611415573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143991906145f3565b6040516339ff00bd60e01b8152600481018c90526001600160a01b03888116602483015291909116906339ff00bd90604401602060405180830381865afa158015611488573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ac9190614610565b6114f85760405162461bcd60e51b815260206004820152601d60248201527f446973616c6c6f77656420646973747269627574696f6e20746f6b656e0000006044820152606401610761565b846102d11480611509575084610483145b61154b5760405162461bcd60e51b8152602060048201526013602482015272556e6578706563746564204e4654207479706560681b6044820152606401610761565b868314801561155957508281145b6115a55760405162461bcd60e51b815260206004820181905260248201527f4d69736d617463686564204e465420646973747269627574696f6e20646174616044820152606401610761565b6000856102d11415611919576040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038816906301ffc9a790602401602060405180830381865afa1580156115fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116209190614610565b6116655760405162461bcd60e51b8152602060048201526016602482015275556e6578706563746564204e4654206164647265737360501b6044820152606401610761565b60005b888110156118cd5760008c8152610194602090815260408083208e845282528083206001600160a01b038c1684529091528120908787848181106116ae576116ae614660565b602090810292909201358352508181019290925260409081016000908120548f825261019684528282208f835284528282206001600160a01b038d1683529093529081209088888581811061170557611705614660565b90506020020135815260200190815260200160002054611725919061476b565b6001146117835760405162461bcd60e51b815260206004820152602660248201527f4e4654207072697a6520646973747269627574696f6e20616d6f756e7420657860448201526518d95959195960d21b6064820152608401610761565b60008c8152610194602090815260408083208e845282528083206001600160a01b038c16845290915281206001918888858181106117c3576117c3614660565b905060200201358152602001908152602001600020819055508383828181106117ee576117ee614660565b90506020020135826118009190614648565b9150876001600160a01b03166342842e0e308c8c8581811061182457611824614660565b9050602002016020810190611839919061456d565b89898681811061184b5761184b614660565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b1580156118a257600080fd5b505af11580156118b6573d6000803e3d6000fd5b5050505080806118c590614676565b915050611668565b508088146119145760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420616d6f756e742076616c756560601b6044820152606401610761565b611cba565b6040516301ffc9a760e01b8152636cdb3d1360e11b60048201526001600160a01b038816906301ffc9a790602401602060405180830381865afa158015611964573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119889190614610565b6119cd5760405162461bcd60e51b8152602060048201526016602482015275556e6578706563746564204e4654206164647265737360501b6044820152606401610761565b60005b88811015611cb8578383828181106119ea576119ea614660565b9050602002013561019460008e815260200190815260200160002060008d815260200190815260200160002060008a6001600160a01b03166001600160a01b031681526020019081526020016000206000888885818110611a4d57611a4d614660565b9050602002013581526020019081526020016000205461019660008f815260200190815260200160002060008e815260200190815260200160002060008b6001600160a01b03166001600160a01b031681526020019081526020016000206000898986818110611abf57611abf614660565b90506020020135815260200190815260200160002054611adf919061476b565b1015611b3c5760405162461bcd60e51b815260206004820152602660248201527f4e4654207072697a6520646973747269627574696f6e20616d6f756e7420657860448201526518d95959195960d21b6064820152608401610761565b838382818110611b4e57611b4e614660565b9050602002013561019460008e815260200190815260200160002060008d815260200190815260200160002060008a6001600160a01b03166001600160a01b031681526020019081526020016000206000888885818110611bb157611bb1614660565b9050602002013581526020019081526020016000206000828254611bd59190614648565b90915550506001600160a01b03881663f242432a308c8c85818110611bfc57611bfc614660565b9050602002016020810190611c11919061456d565b898986818110611c2357611c23614660565b90506020020135888887818110611c3c57611c3c614660565b90506020020135604051806020016040528060008152506040518663ffffffff1660e01b8152600401611c739594939291906147da565b600060405180830381600087803b158015611c8d57600080fd5b505af1158015611ca1573d6000803e3d6000fd5b505050508080611cb090614676565b9150506119d0565b505b866001600160a01b03168a8c7fa825c8731f1dfe5c99472b7e94c839c9e6489ed55d0277366e867d8d88a306cf338d8d8c8c8c8c8c604051611d03989796959493929190614812565b60405180910390a450506001606555505050505050505050565b60975460ff1615611d635760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610761565b610198546040805163da09075560e01b815290516000926001600160a01b03169163da0907559160048083019260209291908290030181865afa158015611dae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd291906145f3565b6040516322b4b91b60e11b815260048101869052602481018590526001600160a01b0384811660448301529190911690634569723690606401602060405180830381865afa158015611e28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4c9190614872565b905060008111611e9e5760405162461bcd60e51b815260206004820152601560248201527f496e76616c6964206465706f73697420746f6b656e00000000000000000000006044820152606401610761565b611eb36001600160a01b038316333084613081565b60008481526101916020908152604080832086845282528083206001600160a01b038616845290915281208054839290611eee908490614648565b909155505060408051338152602081018390526001600160a01b03841691859187917f3360a6f28beae2ecd8c3c807e274aaae13fd8264155337e6d0535a44468f0942910161118e565b6033546001600160a01b0316331480611fd9575061019860009054906101000a90046001600160a01b03166001600160a01b031663da0907556040518163ffffffff1660e01b8152600401602060405180830381865afa158015611fa0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc491906145f3565b6001600160a01b0316336001600160a01b0316145b6120255760405162461bcd60e51b815260206004820152601a60248201527f4f6e6c79206f776e6572206f722047616d6552656769737472790000000000006044820152606401610761565b61019860009054906101000a90046001600160a01b03166001600160a01b031663da0907556040518163ffffffff1660e01b8152600401602060405180830381865afa158015612079573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061209d91906145f3565b6040516339ff00bd60e01b8152600481018a90526001600160a01b03888116602483015291909116906339ff00bd90604401602060405180830381865afa1580156120ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121109190614610565b61215c5760405162461bcd60e51b815260206004820152601d60248201527f446973616c6c6f77656420646973747269627574696f6e20746f6b656e0000006044820152606401610761565b6001600160a01b0386166121ab5760405162461bcd60e51b8152602060048201526016602482015275556e6578706563746564204e4654206164647265737360501b6044820152606401610761565b846102d114806121bc575084610483145b6121fe5760405162461bcd60e51b8152602060048201526013602482015272556e6578706563746564204e4654207479706560681b6044820152606401610761565b82811461224d5760405162461bcd60e51b815260206004820152601760248201527f4d69736d617463686564206465706f73697420646174610000000000000000006044820152606401610761565b6000856102d11415612488576040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038816906301ffc9a790602401602060405180830381865afa1580156122a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c89190614610565b61230d5760405162461bcd60e51b8152602060048201526016602482015275556e6578706563746564204e4654206164647265737360501b6044820152606401610761565b60005b8481101561243c57876001600160a01b03166342842e0e8c3089898681811061233b5761233b614660565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b15801561239257600080fd5b505af11580156123a6573d6000803e3d6000fd5b50505060008b8152610196602090815260408083208d845282528083206001600160a01b038d168452909152812060019250908888858181106123eb576123eb614660565b9050602002013581526020019081526020016000208190555083838281811061241657612416614660565b90506020020135826124289190614648565b91508061243481614676565b915050612310565b508084146124835760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420616d6f756e742076616c756560601b6044820152606401610761565b612654565b6040516301ffc9a760e01b8152636cdb3d1360e11b60048201526001600160a01b038816906301ffc9a790602401602060405180830381865afa1580156124d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f79190614610565b61253c5760405162461bcd60e51b8152602060048201526016602482015275556e6578706563746564204e4654206164647265737360501b6044820152606401610761565b60408051602081018252600081529051631759616b60e11b81526001600160a01b03891691632eb2c2d691612580918e9130918b918b918b918b919060040161488b565b600060405180830381600087803b15801561259a57600080fd5b505af11580156125ae573d6000803e3d6000fd5b5050505060005b84811015612652578383828181106125cf576125cf614660565b60008d8152610196602090815260408083208f845282528083206001600160a01b038f16845282528220920293909301359290915088888581811061261657612616614660565b905060200201358152602001908152602001600020600082825461263a9190614648565b9091555081905061264a81614676565b9150506125b5565b505b866001600160a01b0316888a7f8aa5f867116bd0007022fe5e2205d78c5a5922c47331762e9e69ce2c9a8f6a95338e8b8b8b8b8b60405161269b97969594939291906148ed565b60405180910390a450505050505050505050565b60006126bb600161387e565b905080156126d3576000805461ff0019166101001790555b6126db613994565b6126e3613a07565b6126eb613a7a565b6126f3613aed565b6126fb613aed565b6001600160a01b0382166127515760405162461bcd60e51b815260206004820152601760248201527f496e76616c6964204164647265737352656769737472790000000000000000006044820152606401610761565b610198805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03841617905580156127c0576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b600260655414156128175760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610761565b60026065556033546001600160a01b031633146128765760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610761565b846102d11480612887575084610483145b6128c95760405162461bcd60e51b8152602060048201526013602482015272556e6578706563746564204e4654207479706560681b6044820152606401610761565b8281146129185760405162461bcd60e51b815260206004820152601760248201527f4d69736d617463686564206465706f73697420646174610000000000000000006044820152606401610761565b6000856102d11415612c55576040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038816906301ffc9a790602401602060405180830381865afa15801561296f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129939190614610565b6129d85760405162461bcd60e51b8152602060048201526016602482015275556e6578706563746564204e4654206164647265737360501b6044820152606401610761565b60005b84811015612c095760008a8152610194602090815260408083208c845282528083206001600160a01b038c168452909152812090878784818110612a2157612a21614660565b602090810292909201358352508181019290925260409081016000908120548d825261019684528282208d835284528282206001600160a01b038d16835290935290812090888885818110612a7857612a78614660565b90506020020135815260200190815260200160002054612a98919061476b565b600114612ae75760405162461bcd60e51b815260206004820152601660248201527f496e73756666696369656e74204e4654207072697a65000000000000000000006044820152606401610761565b60008a8152610196602090815260408083208c845282528083206001600160a01b038c168452909152812081888885818110612b2557612b25614660565b90506020020135815260200190815260200160002081905550838382818110612b5057612b50614660565b9050602002013582612b629190614648565b9150876001600160a01b03166342842e0e308d898986818110612b8757612b87614660565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b158015612bde57600080fd5b505af1158015612bf2573d6000803e3d6000fd5b505050508080612c0190614676565b9150506129db565b50808414612c505760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420616d6f756e742076616c756560601b6044820152606401610761565b612f3f565b6040516301ffc9a760e01b8152636cdb3d1360e11b60048201526001600160a01b038816906301ffc9a790602401602060405180830381865afa158015612ca0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cc49190614610565b612d095760405162461bcd60e51b8152602060048201526016602482015275556e6578706563746564204e4654206164647265737360501b6044820152606401610761565b60005b84811015612ec757838382818110612d2657612d26614660565b60008d8152610194602090815260408083208f845282528083206001600160a01b038f168452825282209202939093013592909150888885818110612d6d57612d6d614660565b602090810292909201358352508181019290925260409081016000908120548e825261019684528282208e835284528282206001600160a01b038e16835290935290812090898986818110612dc457612dc4614660565b90506020020135815260200190815260200160002054612de4919061476b565b1015612e325760405162461bcd60e51b815260206004820152601660248201527f496e73756666696369656e74204e4654207072697a65000000000000000000006044820152606401610761565b838382818110612e4457612e44614660565b60008d8152610196602090815260408083208f845282528083206001600160a01b038f168452825282209202939093013592909150888885818110612e8b57612e8b614660565b9050602002013581526020019081526020016000206000828254612eaf919061476b565b90915550819050612ebf81614676565b915050612d0c565b5060408051602081018252600081529051631759616b60e11b81526001600160a01b03891691632eb2c2d691612f0c9130918f918b918b918b918b919060040161488b565b600060405180830381600087803b158015612f2657600080fd5b505af1158015612f3a573d6000803e3d6000fd5b505050505b866001600160a01b0316888a7f5a8dca5c67110aaf25dc3f613084907009569128e7e31216a0802dce0db9c784338e8b8b8b8b8b604051612f8697969594939291906148ed565b60405180910390a4505060016065555050505050505050565b6033546001600160a01b03163314612ff95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610761565b6001600160a01b0381166130755760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610761565b61307e816137a4565b50565b6040516001600160a01b03808516602483015283166044820152606481018290526131019085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152613b58565b50505050565b6040516001600160a01b03831660248201526044810182905261313790849063a9059cbb60e01b906064016130b5565b505050565b60975460ff1661318e5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610761565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b610198546040805163da09075560e01b815290516000926001600160a01b03169163da0907559160048083019260209291908290030181865afa158015613223573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061324791906145f3565b90506000806000805b888110156135dd57600087878381811061326c5761326c614660565b90506020020135905060006103e861019860009054906101000a90046001600160a01b03166001600160a01b031663da0907556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156132ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132f291906145f3565b6001600160a01b03166326232a2e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561332f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133539190614872565b8a8a8681811061336557613365614660565b905060200201356133769190614933565b6133809190614952565b905061338c8187614648565b9550613398818361476b565b9150506000866001600160a01b031663d0dd986d8f8f6040518363ffffffff1660e01b81526004016133d4929190918252602082015260400190565b602060405180830381865afa1580156133f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134159190614872565b905060006103e8828b8b8781811061342f5761342f614660565b905060200201356134409190614933565b61344a9190614952565b90506134568187614648565b9550613462818461476b565b925050506000866001600160a01b03166370ca09e68f8f6040518363ffffffff1660e01b815260040161349f929190918252602082015260400190565b602060405180830381865afa1580156134bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134e09190614872565b905060006103e8828b8b878181106134fa576134fa614660565b9050602002013561350b9190614933565b6135159190614952565b90506135218186614648565b945061352d828461476b565b925050508061019260008f815260200190815260200160002060008e815260200190815260200160002060008b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546135899190614648565b909155506135ca90508b8b848181106135a4576135a4614660565b90506020020160208101906135b9919061456d565b6001600160a01b038b169083613107565b50806135d581614676565b915050613250565b50806135e98385614648565b6135f39190614648565b60008c8152610193602090815260408083208e845282528083206001600160a01b038c1684529091528120805490919061362e908490614648565b9091555050610198546040805163da09075560e01b81529051613715926001600160a01b03169163da0907559160048083019260209291908290030181865afa15801561367f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136a391906145f3565b6001600160a01b031663469048406040518163ffffffff1660e01b8152600401602060405180830381865afa1580156136e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061370491906145f3565b6001600160a01b0389169085613107565b60405163411e407f60e11b8152600481018c905261375f906001600160a01b0386169063823c80fe906024015b602060405180830381865afa1580156136e0573d6000803e3d6000fd5b60405163f406c2d160e01b8152600481018c9052602481018b9052613797906001600160a01b0386169063f406c2d190604401613742565b5050505050505050505050565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60975460ff16156138495760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610761565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586131bb3390565b60008054610100900460ff161561390c578160ff1660011480156138a15750303b155b6139045760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610761565b506000919050565b60005460ff80841691161061397a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610761565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff166139ff5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610761565b610c38613c3d565b600054610100900460ff16613a725760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610761565b610c38613cb1565b600054610100900460ff16613ae55760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610761565b610c38613d23565b600054610100900460ff16610c385760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610761565b6000613bad826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613d9a9092919063ffffffff16565b8051909150156131375780806020019051810190613bcb9190614610565b6131375760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610761565b600054610100900460ff16613ca85760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610761565b610c38336137a4565b600054610100900460ff16613d1c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610761565b6001606555565b600054610100900460ff16613d8e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610761565b6097805460ff19169055565b6060613da98484600085613db3565b90505b9392505050565b606082471015613e2b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610761565b6001600160a01b0385163b613e825760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610761565b600080866001600160a01b03168587604051613e9e9190614974565b60006040518083038185875af1925050503d8060008114613edb576040519150601f19603f3d011682016040523d82523d6000602084013e613ee0565b606091505b5091509150613ef0828286613efb565b979650505050505050565b60608315613f0a575081613dac565b825115613f1a5782518084602001fd5b8160405162461bcd60e51b81526004016107619190614990565b600060208284031215613f4657600080fd5b81356001600160e01b031981168114613dac57600080fd5b6001600160a01b038116811461307e57600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715613fb257613fb2613f73565b604052919050565b600082601f830112613fcb57600080fd5b813567ffffffffffffffff811115613fe557613fe5613f73565b613ff8601f8201601f1916602001613f89565b81815284602083860101111561400d57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561404057600080fd5b843561404b81613f5e565b9350602085013561405b81613f5e565b925060408501359150606085013567ffffffffffffffff81111561407e57600080fd5b61408a87828801613fba565b91505092959194509250565b600080600080600060a086880312156140ae57600080fd5b85356140b981613f5e565b9450602086013593506040860135925060608601356140d781613f5e565b949793965091946080013592915050565b6000806000606084860312156140fd57600080fd5b8335925060208401359150604084013561411681613f5e565b809150509250925092565b60008083601f84011261413357600080fd5b50813567ffffffffffffffff81111561414b57600080fd5b6020830191508360208260051b850101111561416657600080fd5b9250929050565b60008060008060006060868803121561418557600080fd5b853567ffffffffffffffff8082111561419d57600080fd5b6141a989838a01614121565b909750955060208801359150808211156141c257600080fd5b506141cf88828901614121565b90945092505060408601356141e381613f5e565b809150509295509295909350565b6000806000806080858703121561420757600080fd5b8435935060208501359250604085013561422081613f5e565b9396929550929360600135925050565b600080600080600080600060a0888a03121561424b57600080fd5b8735965060208801359550604088013567ffffffffffffffff8082111561427157600080fd5b61427d8b838c01614121565b909750955060608a0135915061429282613f5e565b909350608089013590808211156142a857600080fd5b506142b58a828b01614121565b989b979a50959850939692959293505050565b60008060008060008060008060008060e08b8d0312156142e757600080fd5b8a35995060208b0135985060408b013567ffffffffffffffff8082111561430d57600080fd5b6143198e838f01614121565b909a50985060608d0135915061432e82613f5e565b90965060808c0135955060a08c0135908082111561434b57600080fd5b6143578e838f01614121565b909650945060c08d013591508082111561437057600080fd5b5061437d8d828e01614121565b915080935050809150509295989b9194979a5092959850565b600080600080600080600080600060e08a8c0312156143b457600080fd5b89356143bf81613f5e565b985060208a0135975060408a0135965060608a01356143dd81613f5e565b955060808a0135945060a08a013567ffffffffffffffff8082111561440157600080fd5b61440d8d838e01614121565b909650945060c08c013591508082111561442657600080fd5b506144338c828d01614121565b915080935050809150509295985092959850929598565b600082601f83011261445b57600080fd5b8135602067ffffffffffffffff82111561447757614477613f73565b8160051b614486828201613f89565b92835284810182019282810190878511156144a057600080fd5b83870192505b84831015613ef0578235825291830191908301906144a6565b600080600080600060a086880312156144d757600080fd5b85356144e281613f5e565b945060208601356144f281613f5e565b9350604086013567ffffffffffffffff8082111561450f57600080fd5b61451b89838a0161444a565b9450606088013591508082111561453157600080fd5b61453d89838a0161444a565b9350608088013591508082111561455357600080fd5b5061456088828901613fba565b9150509295509295909350565b60006020828403121561457f57600080fd5b8135613dac81613f5e565b600080600080600060a086880312156145a257600080fd5b85356145ad81613f5e565b945060208601356145bd81613f5e565b93506040860135925060608601359150608086013567ffffffffffffffff8111156145e757600080fd5b61456088828901613fba565b60006020828403121561460557600080fd5b8151613dac81613f5e565b60006020828403121561462257600080fd5b81518015158114613dac57600080fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561465b5761465b614632565b500190565b634e487b7160e01b600052603260045260246000fd5b600060001982141561468a5761468a614632565b5060010190565b8183526000602080850194508260005b858110156146cf5781356146b481613f5e565b6001600160a01b0316875295820195908201906001016146a1565b509495945050505050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561470c57600080fd5b8260051b8083602087013760009401602001938452509192915050565b6001600160a01b038616815260606020820152600061474c606083018688614691565b828103604084015261475f8185876146da565b98975050505050505050565b60008282101561477d5761477d614632565b500390565b60005b8381101561479d578181015183820152602001614785565b838111156131015750506000910152565b600081518084526147c6816020860160208601614782565b601f01601f19169290920160200192915050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152613ef060a08301846147ae565b6001600160a01b038916815260a06020820152600061483560a08301898b614691565b876040840152828103606084015261484e8187896146da565b905082810360808401526148638185876146da565b9b9a5050505050505050505050565b60006020828403121561488457600080fd5b5051919050565b60006001600160a01b03808a16835280891660208401525060a060408301526148b860a0830187896146da565b82810360608401526148cb8186886146da565b905082810360808401526148df81856147ae565b9a9950505050505050505050565b60006001600160a01b03808a16835280891660208401525086604083015260a0606083015261492060a0830186886146da565b82810360808401526148df8185876146da565b600081600019048311821515161561494d5761494d614632565b500290565b60008261496f57634e487b7160e01b600052601260045260246000fd5b500490565b60008251614986818460208701614782565b9190910192915050565b602081526000613dac60208301846147ae56fea2646970667358221220d11fce097057a3cf1a574d7ca564b0e055ea7d9d68e98250d85c98e84369bbb664736f6c634300080b0033",
  "devdoc": {
    "author": "David Lee",
    "kind": "dev",
    "methods": {
      "deposit(uint256,uint256,address)": {
        "details": "Only tokens registered in GameRegistry with an amount greater than zero is valid for the deposit",
        "params": {
          "_gid": "Game ID",
          "_tid": "Tournament ID",
          "_token": "Token address to deposit"
        }
      },
      "depositNFTPrize(address,uint256,uint256,address,uint256,uint256[],uint256[])": {
        "details": "NFT type should be either 721 or 1155",
        "params": {
          "_amounts": "Token amount list",
          "_from": "NFT owner address",
          "_gid": "Game ID",
          "_nftAddress": "NFT address",
          "_nftType": "NFT type (721/1155)",
          "_tid": "Tournament ID",
          "_tokenIds": "Token Id list"
        }
      },
      "depositPrize(address,uint256,uint256,address,uint256)": {
        "details": "Only tokens which are allowed as a distributable token can be deposited",
        "params": {
          "_amount": "Prize amount to deposit",
          "_depositor": "Depositor address",
          "_gid": "Game ID",
          "_tid": "Tournament ID",
          "_token": "Prize token address"
        }
      },
      "distributeNFTPrize(uint256,uint256,address[],address,uint256,uint256[],uint256[])": {
        "details": "Only maintainerNFT type should be either 721 or 1155",
        "params": {
          "_amounts": "Token amount list",
          "_gid": "Game ID",
          "_nftAddress": "NFT address",
          "_nftType": "NFT type (721/1155)",
          "_tid": "Tournament ID",
          "_tokenIds": "Token Id list",
          "_winners": "Winners list"
        }
      },
      "distributePrize(uint256,uint256,address[],address,uint256[])": {
        "details": "Only maintainerThe maximum distributable prize amount is the sum of the users' deposit and the prize that the owner deposited",
        "params": {
          "_amounts": "Prize list",
          "_gid": "Game ID",
          "_tid": "Tournament ID",
          "_token": "Prize token address",
          "_winners": "Winners list"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Only owner"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Only owner"
      },
      "withdraw(address[],uint256[],address)": {
        "details": "Only owner",
        "params": {
          "_amounts": "Token amounts",
          "_beneficiary": "Beneficiary address",
          "_tokens": "Token addresses"
        }
      },
      "withdrawNFTPrize(address,uint256,uint256,address,uint256,uint256[],uint256[])": {
        "details": "Only ownerNFT type should be either 721 or 1155",
        "params": {
          "_amounts": "Token amount list",
          "_gid": "Game ID",
          "_nftAddress": "NFT address",
          "_nftType": "NFT type (721/1155)",
          "_tid": "Tournament ID",
          "_to": "NFT receiver address",
          "_tokenIds": "Token Id list"
        }
      },
      "withdrawPrize(uint256,uint256,address,uint256)": {
        "details": "Only owner",
        "params": {
          "_amount": "Prize amount to withdraw",
          "_gid": "Game ID",
          "_tid": "Tournament ID",
          "_token": "Prize token address"
        }
      }
    },
    "stateVariables": {
      "addressRegistry": {
        "details": "AddressRegistry"
      },
      "totalNFTPrizeDeposit": {
        "details": "Game ID -> Tournament ID -> NFT Address -> Token ID -> Deposit Amount"
      },
      "totalNFTPrizeDistribution": {
        "details": "Game ID -> Tournament ID -> NFT Address -> Token ID -> Distribution Amount"
      },
      "totalPrizeDeposit": {
        "details": "Game ID -> Tournament ID -> Token Address -> Total Prize Deposit Amount"
      },
      "totalPrizeDistribution": {
        "details": "Game ID -> Tournament ID -> Token Address -> Total Prize Distribution Amount excluding Fee"
      },
      "totalPrizeFee": {
        "details": "Game ID -> Tournament ID -> Token Address -> Total Prize Fee Amount"
      },
      "totalUserDeposit": {
        "details": "Game ID -> Tournament ID -> Token Address -> Total User Deposit Amount"
      },
      "totalWithdrawAmount": {
        "details": "Token Address -> Total Withdraw Amount"
      }
    },
    "title": "Oparcade",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deposit(uint256,uint256,address)": {
        "notice": "Deposit ERC20 tokens from user"
      },
      "depositNFTPrize(address,uint256,uint256,address,uint256,uint256[],uint256[])": {
        "notice": "Deposit NFT prize for the specific game/tournament"
      },
      "depositPrize(address,uint256,uint256,address,uint256)": {
        "notice": "Deposit the prize tokens for the specific game/tournament"
      },
      "distributeNFTPrize(uint256,uint256,address[],address,uint256,uint256[],uint256[])": {
        "notice": "Distribute winners NFT prizes"
      },
      "distributePrize(uint256,uint256,address[],address,uint256[])": {
        "notice": "Distribute winners their prizes"
      },
      "pause()": {
        "notice": "Pause Oparcade"
      },
      "unpause()": {
        "notice": "Resume Oparcade"
      },
      "withdraw(address[],uint256[],address)": {
        "notice": "Withdraw tokens"
      },
      "withdrawNFTPrize(address,uint256,uint256,address,uint256,uint256[],uint256[])": {
        "notice": "Withdraw NFT prize for the specific game/tournament"
      },
      "withdrawPrize(uint256,uint256,address,uint256)": {
        "notice": "Withdraw the prize tokens from the specific game/tournament"
      }
    },
    "notice": "This contract manages token deposit/distribution from/to the users playing the game/tournament",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 133,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1490,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 390,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 434,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 286,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 375,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1205,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1534,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "__gap",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 722,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "__gap",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 668,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "__gap",
        "offset": 0,
        "slot": "351",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6742,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "totalUserDeposit",
        "offset": 0,
        "slot": "401",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))"
      },
      {
        "astId": 6751,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "totalPrizeDistribution",
        "offset": 0,
        "slot": "402",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))"
      },
      {
        "astId": 6760,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "totalPrizeFee",
        "offset": 0,
        "slot": "403",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))"
      },
      {
        "astId": 6771,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "totalNFTPrizeDistribution",
        "offset": 0,
        "slot": "404",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_uint256))))"
      },
      {
        "astId": 6780,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "totalPrizeDeposit",
        "offset": 0,
        "slot": "405",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))"
      },
      {
        "astId": 6791,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "totalNFTPrizeDeposit",
        "offset": 0,
        "slot": "406",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_uint256))))"
      },
      {
        "astId": 6796,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "totalWithdrawAmount",
        "offset": 0,
        "slot": "407",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6800,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "addressRegistry",
        "offset": 0,
        "slot": "408",
        "type": "t_contract(IAddressRegistry)8223"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAddressRegistry)8223": {
        "encoding": "inplace",
        "label": "contract IAddressRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => mapping(uint256 => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_uint256))))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(address => mapping(uint256 => uint256))))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(address => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}