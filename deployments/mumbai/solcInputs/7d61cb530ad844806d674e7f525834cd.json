{
  "language": "Solidity",
  "sources": {
    "contracts/AddressRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\n/**\n * @title AddressRegistry\n * @notice This stores all addresses in the Oparcade\n * @author David Lee\n */\ncontract AddressRegistry is OwnableUpgradeable {\n  event OrarcadeUpdated(address indexed by, address indexed oldOparcade, address indexed newOparcade);\n  event GameRegistryUpdated(address indexed by, address indexed oldGameRegistry, address indexed newGameRegistry);\n  event MaintainerUpdated(address indexed by, address indexed oldMaintainer, address indexed newMaintainer);\n\n  /// @dev Oparcade contract address, can be zero if not set\n  address public oparcade;\n\n  /// @dev GameRegistry contract address, can be zero if not set\n  address public gameRegistry;\n\n  /// @dev Maintainer address, can be zero if not set\n  address public maintainer;\n\n  function initialize() public initializer {\n    __Ownable_init();\n  }\n\n  /**\n   * @notice Update Oparcade contract address\n   * @dev Only owner\n   * @param _oparcade Oparcade contract address\n   */\n  function updateOparcade(address _oparcade) external onlyOwner {\n    require(_oparcade != address(0), \"!Oparcade\");\n\n    emit OrarcadeUpdated(msg.sender, oparcade, _oparcade);\n\n    oparcade = _oparcade;\n  }\n\n  /**\n   * @notice Update GameRegistry contract address\n   * @dev Only owner\n   * @param _gameRegistry TokenRegistry contract address\n   */\n  function updateGameRegistry(address _gameRegistry) external onlyOwner {\n    require(_gameRegistry != address(0), \"!GameRegistry\");\n\n    emit GameRegistryUpdated(msg.sender, gameRegistry, _gameRegistry);\n\n    gameRegistry = _gameRegistry;\n  }\n\n  /**\n   * @notice Update maintainer address\n   * @dev Only owner\n   * @param _maintainer Maintainer address\n   */\n  function updateMaintainer(address _maintainer) external onlyOwner {\n    require(_maintainer != address(0), \"!Maintainer\");\n\n    emit MaintainerUpdated(msg.sender, maintainer, _maintainer);\n\n    maintainer = _maintainer;\n  }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "contracts/Oparcade.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"./interfaces/IAddressRegistry.sol\";\nimport \"./interfaces/IGameRegistry.sol\";\n\n/**\n * @title Oparcade\n * @notice This manages the token deposit/distribution from/to the users\n * @author David Lee\n */\ncontract Oparcade is OwnableUpgradeable, ReentrancyGuardUpgradeable, PausableUpgradeable {\n  using ECDSAUpgradeable for bytes32;\n  using SafeERC20Upgradeable for IERC20Upgradeable;\n\n  event Deposit(address indexed by, uint256 indexed gid, uint256 indexed tid, address token, uint256 amount);\n  event Distribute(\n    address indexed by,\n    address winner,\n    uint256 indexed gid,\n    uint256 indexed tid,\n    address token,\n    uint256 amount\n  );\n  event PlatformFeeUpdated(\n    address indexed by,\n    address indexed oldFeeRecipient,\n    uint256 oldPlatformFee,\n    address indexed newFeeRecipient,\n    uint256 newPlatformFee\n  );\n\n  /// @dev Game ID -> Tournament ID -> Token Address -> Total Deposit Amount excluding fees\n  mapping(uint256 => mapping(uint256 => mapping(address => uint256))) public totalDeposit;\n\n  /// @dev Game ID -> Tournament ID -> Token Address -> Total Distribution Amount excluding fees\n  mapping(uint256 => mapping(uint256 => mapping(address => uint256))) public totalDistribution;\n\n  /// @dev AddressRegistry\n  IAddressRegistry public addressRegistry;\n\n  /// @dev Signature -> Bool\n  mapping(bytes => bool) public signatures;\n\n  /// @dev Platform fee\n  uint16 public platformFee;\n\n  /// @dev Platform fee recipient\n  address public feeRecipient;\n\n  modifier onlyMaintainer() {\n    require(msg.sender == addressRegistry.maintainer(), \"Only maintainer\");\n    _;\n  }\n\n  receive() external payable {}\n\n  function initialize(\n    address _addressRegistry,\n    address _feeRecipient,\n    uint16 _platformFee\n  ) public initializer {\n    __Ownable_init();\n    __ReentrancyGuard_init();\n    __Pausable_init();\n\n    require(_addressRegistry != address(0), \"Invalid AddressRegistry\");\n    require(_feeRecipient != address(0) || _platformFee == 0, \"Fee recipient not set\");\n    require(_platformFee <= 1000, \"Platform fee exceeded\");\n\n    // initialize AddressRegistery\n    addressRegistry = IAddressRegistry(_addressRegistry);\n\n    // initialize fee and recipient\n    feeRecipient = _feeRecipient;\n    platformFee = _platformFee;\n  }\n\n  /**\n   * @notice Deposit ERC20 tokens from user\n   * @dev Only tokens registered in GameRegistry with an amount greater than zero is valid for the deposit\n   * @param _gid Game ID\n   * @param _tid Tournament ID\n   * @param _token Token address to deposit\n   */\n  function deposit(\n    uint256 _gid,\n    uint256 _tid,\n    address _token\n  ) external whenNotPaused {\n    // get token amount to deposit\n    uint256 depositTokenAmount = IGameRegistry(addressRegistry.gameRegistry()).depositTokenAmount(_gid, _token);\n\n    // check if the token address is valid\n    require(depositTokenAmount > 0, \"Invalid deposit token\");\n\n    // calculate the fee\n    uint256 feeAmount = (depositTokenAmount * platformFee) / 1000;\n    uint256 lockingAmount = depositTokenAmount - feeAmount;\n\n    // transfer the fee\n    IERC20Upgradeable(_token).safeTransferFrom(msg.sender, feeRecipient, feeAmount);\n\n    // transfer the payment\n    IERC20Upgradeable(_token).safeTransferFrom(msg.sender, address(this), lockingAmount);\n\n    totalDeposit[_gid][_tid][_token] += lockingAmount;\n\n    emit Deposit(msg.sender, _gid, _tid, _token, depositTokenAmount);\n  }\n\n  /**\n   * @notice Distribute winners their prizes\n   * @dev only maintainer\n   * @dev Total distribution amount of the tournament of the game must be equal to/less than the double amount deposited in the tournament of the game due to the bonus\n   * @param _gid Game ID\n   * @param _tid Tournament ID\n   * @param _winners Winners list\n   * @param _token Distribution token address\n   * @param _amounts Prize list\n   */\n  function distribute(\n    uint256 _gid,\n    uint256 _tid,\n    address[] memory _winners,\n    address _token,\n    uint256[] memory _amounts\n  ) external whenNotPaused onlyMaintainer {\n    require(_winners.length == _amounts.length, \"Mismatched winners and amounts\");\n\n    // check if token is allowed to claim\n    require(IGameRegistry(addressRegistry.gameRegistry()).distributable(_gid, _token), \"Disallowed distribution token\");\n\n    // transfer the payment\n    for (uint256 i; i < _winners.length; i++) {\n      totalDistribution[_gid][_tid][_token] += _amounts[i];\n      IERC20Upgradeable(_token).transfer(_winners[i], _amounts[i]);\n\n      emit Distribute(msg.sender, _winners[i], _gid, _tid, _token, _amounts[i]);\n    }\n\n    // check if total payout is not exceeded the (2 * total deposit amount), there might be some bonus\n    require(totalDistribution[_gid][_tid][_token] <= 2 * totalDeposit[_gid][_tid][_token], \"Total payouts exceeded\");\n  }\n\n  /**\n   * @notice Update platform fee\n   *\n   * @dev Only owner\n   * @dev Allow zero recipient address only of fee is also zero\n   *\n   * @param _platformFee platform fee\n   */\n  function updatePlatformFee(address _feeRecipient, uint16 _platformFee) external onlyOwner {\n    require(_feeRecipient != address(0) || _platformFee == 0, \"Fee recipient not set\");\n    require(_platformFee <= 1000, \"Platform fee exceeded\");\n\n    emit PlatformFeeUpdated(msg.sender, feeRecipient, platformFee, _feeRecipient, _platformFee);\n\n    feeRecipient = _feeRecipient;\n    platformFee = _platformFee;\n  }\n\n  /**\n   * @notice Pause Oparcade\n   *\n   * @dev Only owner\n   */\n  function pause() external onlyOwner {\n    _pause();\n  }\n\n  /**\n   * @notice Resume Oparcade\n   *\n   * @dev Only owner\n   */\n  function unpause() external onlyOwner {\n    _unpause();\n  }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal initializer {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal initializer {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal initializer {\n        __Context_init_unchained();\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal initializer {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return recover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return recover(hash, r, vs);\n        } else {\n            revert(\"ECDSA: invalid signature length\");\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return recover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`, `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        require(\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\n            \"ECDSA: invalid signature 's' value\"\n        );\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        require(signer != address(0), \"ECDSA: invalid signature\");\n\n        return signer;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IAddressRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @title AddressRegistry Contract Interface\n * @notice Define the interface used to get addresses in Oparcade\n * @author David Lee\n */\ninterface IAddressRegistry {\n  /**\n   * @notice Provide the Oparcade contract address\n   * @dev Can be zero in case of the Oparcade contract is not registered\n   * @return address Oparcade contract address\n   */\n  function oparcade() external view returns (address);\n\n  /**\n   * @notice Provide the GameRegistry contract address\n   * @dev Can be zero in case of the GameRegistry contract is not registered\n   * @return address GameRegistry contract address\n   */\n  function gameRegistry() external view returns (address);\n\n  /**\n   * @notice Provide the maintainer address\n   * @dev Can be zero in case of the maintainer address is not registered\n   * @return address Maintainer contract address\n   */\n  function maintainer() external view returns (address);\n}\n"
    },
    "contracts/interfaces/IGameRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @title TokenRegistry Contract Interface\n * @notice Define the interface used to get the token information\n * @author David Lee\n */\ninterface IGameRegistry {\n  /**\n   * @notice Provide the deposit amount of the token given\n   * @param _gid Game ID\n   * @param _token Token address\n   * @return uint256 Deposit amount\n   */\n  function depositTokenAmount(uint256 _gid, address _token) external view returns (uint256);\n\n  /**\n   * @notice Provide the claimability of the token given\n   * @param _gid Game ID\n   * @param _token Token address\n   * @return bool true: distributable, false: not distributable\n   */\n  function distributable(uint256 _gid, address _token) external view returns (bool);\n\n  /**\n   * @notice Provide whether the game is deprecated or not\n   * @param _gid Game ID\n   * @return bool true: deprecated, false: not deprecated\n   */\n  function isDeprecatedGame(uint256 _gid) external view returns (bool);\n\n  /**\n   * @notice Returns the number of games added in games array\n   */\n  function gameLength() external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/GameRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\n/**\n * @title GameRegistry\n * @notice This stores all games in the Oparcade\n * @author David Lee\n */\ncontract GameRegistry is OwnableUpgradeable {\n  event GameAdded(address indexed by, uint256 indexed gid, string gameName);\n  event GameRemoved(address indexed by, uint256 indexed gid, string gameName);\n  event DepositAmountUpdated(\n    address indexed by,\n    uint256 indexed gid,\n    address indexed token,\n    uint256 oldAmount,\n    uint256 newAmount\n  );\n  event DistributableAmountUpdated(\n    address indexed by,\n    uint256 indexed gid,\n    address indexed token,\n    bool oldStatus,\n    bool newStatus\n  );\n\n  /// @dev Game name array\n  string[] public games;\n\n  /// @dev Game ID -> Deposit token list\n  mapping(uint256 => address[]) public depositTokenList;\n\n  /// @dev Game ID -> Token address -> Deposit amount\n  mapping(uint256 => mapping(address => uint256)) public depositTokenAmount;\n\n  /// @dev Game ID -> Distributable token list\n  mapping(uint256 => address[]) public distributableTokenList;\n\n  /// @dev Game ID -> Token address -> Bool\n  mapping(uint256 => mapping(address => bool)) public distributable;\n\n  /// @dev Game ID -> Bool\n  mapping(uint256 => bool) public isDeprecatedGame;\n\n  modifier onlyValidGID(uint256 _gid) {\n    require(_gid < games.length, \"Invalid game index\");\n    _;\n  }\n\n  function initialize() public initializer {\n    __Ownable_init();\n  }\n\n  /**\n   * @notice Add new game\n   * @param _gameName Game name to add\n   */\n  function addGame(string memory _gameName) external onlyOwner returns (uint256 gid) {\n    games.push(_gameName);\n    gid = games.length - 1;\n\n    emit GameAdded(msg.sender, gid, _gameName);\n  }\n\n  /**\n   * @notice Remove game\n   * @dev Game is not removed from the games array, just set it deprecated\n   */\n  function removeGame(uint256 _gid) external onlyOwner onlyValidGID(_gid) {\n    // remove game\n    isDeprecatedGame[_gid] = true;\n\n    emit GameRemoved(msg.sender, _gid, games[_gid]);\n  }\n\n  /**\n   * @notice Update deposit token amount\n   * @dev Only owner\n   * @dev Only tokens with an amount greater than zero is valid for the deposit\n   * @param _gid Game ID\n   * @param _token Token address to allow/disallow the deposit\n   * @param _amount Token amount\n   */\n  function updateDepositTokenAmount(\n    uint256 _gid,\n    address _token,\n    uint256 _amount\n  ) external onlyOwner onlyValidGID(_gid) {\n    emit DepositAmountUpdated(msg.sender, _gid, _token, depositTokenAmount[_gid][_token], _amount);\n\n    // update deposit token list\n    if (_amount > 0) {\n      if (depositTokenAmount[_gid][_token] == 0) {\n        // add token to the list only if it's added newly\n        depositTokenList[_gid].push(_token);\n      }\n    } else {\n      for (uint256 i; i < depositTokenList[_gid].length; i++) {\n        if (_token == depositTokenList[_gid][i]) {\n          depositTokenList[_gid][i] = depositTokenList[_gid][depositTokenList[_gid].length - 1];\n          depositTokenList[_gid].pop();\n        }\n      }\n    }\n\n    // update deposit token amount\n    depositTokenAmount[_gid][_token] = _amount;\n  }\n\n  /**\n   * @notice Update distributable token address\n   * @dev Only owner\n   * @param _gid Game ID\n   * @param _token Token address to allow/disallow the deposit\n   * @param _isDistributable true: distributable false: not distributable\n   */\n  function updateDistributableTokenAddress(\n    uint256 _gid,\n    address _token,\n    bool _isDistributable\n  ) external onlyOwner onlyValidGID(_gid) {\n    emit DistributableAmountUpdated(msg.sender, _gid, _token, distributable[_gid][_token], _isDistributable);\n\n    // update distributable token list\n    if (_isDistributable) {\n      if (!distributable[_gid][_token]) {\n        // add token to the list only if it's added newly\n        distributableTokenList[_gid].push(_token);\n      }\n    } else {\n      for (uint256 i; i < distributableTokenList[_gid].length; i++) {\n        if (_token == distributableTokenList[_gid][i]) {\n          distributableTokenList[_gid][i] = distributableTokenList[_gid][distributableTokenList[_gid].length - 1];\n          distributableTokenList[_gid].pop();\n        }\n      }\n    }\n\n    // update distributable token amount\n    distributable[_gid][_token] = _isDistributable;\n  }\n\n  function getDepositTokenList(uint256 _gid) external view returns (address[] memory) {\n    return depositTokenList[_gid];\n  }\n\n  function getDistributableTokenList(uint256 _gid) external view returns (address[] memory) {\n    return distributableTokenList[_gid];\n  }\n\n  /**\n   * @notice Returns the number of games added in games array\n   */\n  function gameLength() external view returns (uint256) {\n    return games.length;\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}